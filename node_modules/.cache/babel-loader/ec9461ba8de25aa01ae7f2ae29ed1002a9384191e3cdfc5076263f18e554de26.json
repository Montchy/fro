{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api'; // Base URL of your backend\n\n/**\n * Retrieves a token using basic authentication.\n * @returns {Promise<string>} - The retrieved token.\n */\nconst getToken = async () => {\n  try {\n    const credentials = btoa(\"MAR200575:geheim1\"); // Encode credentials\n    const response = await fetch(\"http://localhost:8080/token\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Basic ${credentials}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch token: ${response.statusText}`);\n    }\n    const token = await response.text(); // Assuming the token is a plain string\n    if (!token) {\n      throw new Error('Token is empty or invalid');\n    }\n    console.log(\"Token fetched successfully:\", token);\n    return token;\n  } catch (error) {\n    console.error('Error fetching token:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetches data from an API endpoint using a Bearer token.\n * @param {string} endpoint - The endpoint to fetch data from.\n * @param {string} token - The Bearer token.\n * @returns {Promise<any>} - The response data.\n */\nconst fetchDataWithToken = async (endpoint, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Use Bearer token\n      }\n    });\n    const text = await response.text(); // Raw response as text\n    console.log(`Raw response from ${endpoint}:`, text);\n    if (!response.ok) {\n      throw new Error(`Error fetching data from ${endpoint}: ${response.status} ${response.statusText}`);\n    }\n    try {\n      const data = JSON.parse(text); // Try to parse JSON\n      console.log(`Parsed data from ${endpoint}:`, data);\n      return data;\n    } catch (parseError) {\n      console.error(`Error parsing JSON from ${endpoint}:`, parseError);\n      throw new Error(`Invalid JSON returned from ${endpoint}`);\n    }\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    throw error;\n  }\n};\n\n/**\n * Performs a GET request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const fetchData = async endpoint => {\n  try {\n    const token = await getToken();\n    const data = await fetchDataWithToken(endpoint, token);\n    if (!data) {\n      throw new Error(`No data returned from ${endpoint}`);\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error fetching data from ${endpoint}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getToken","credentials","btoa","response","fetch","method","headers","ok","Error","statusText","token","text","console","log","error","fetchDataWithToken","endpoint","status","data","JSON","parse","parseError","fetchData"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/fetchAndRead.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api'; // Base URL of your backend\n\n/**\n * Retrieves a token using basic authentication.\n * @returns {Promise<string>} - The retrieved token.\n */\nconst getToken = async () => {\n    try {\n        const credentials = btoa(\"MAR200575:geheim1\"); // Encode credentials\n        const response = await fetch(\"http://localhost:8080/token\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Basic ${credentials}`,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch token: ${response.statusText}`);\n        }\n\n        const token = await response.text(); // Assuming the token is a plain string\n        if (!token) {\n            throw new Error('Token is empty or invalid');\n        }\n\n        console.log(\"Token fetched successfully:\", token);\n        return token;\n    } catch (error) {\n        console.error('Error fetching token:', error);\n        throw error;\n    }\n};\n\n/**\n * Fetches data from an API endpoint using a Bearer token.\n * @param {string} endpoint - The endpoint to fetch data from.\n * @param {string} token - The Bearer token.\n * @returns {Promise<any>} - The response data.\n */\nconst fetchDataWithToken = async (endpoint, token) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`, // Use Bearer token\n            },\n        });\n\n        const text = await response.text(); // Raw response as text\n        console.log(`Raw response from ${endpoint}:`, text);\n\n        if (!response.ok) {\n            throw new Error(`Error fetching data from ${endpoint}: ${response.status} ${response.statusText}`);\n        }\n\n        try {\n            const data = JSON.parse(text); // Try to parse JSON\n            console.log(`Parsed data from ${endpoint}:`, data);\n            return data;\n        } catch (parseError) {\n            console.error(`Error parsing JSON from ${endpoint}:`, parseError);\n            throw new Error(`Invalid JSON returned from ${endpoint}`);\n        }\n    } catch (error) {\n        console.error(`API Error (${endpoint}):`, error);\n        throw error;\n    }\n};\n\n/**\n * Performs a GET request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const fetchData = async (endpoint) => {\n    try {\n        const token = await getToken();\n        const data = await fetchDataWithToken(endpoint, token);\n\n        if (!data) {\n            throw new Error(`No data returned from ${endpoint}`);\n        }\n\n        return data;\n    } catch (error) {\n        console.error(`Error fetching data from ${endpoint}:`, error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}