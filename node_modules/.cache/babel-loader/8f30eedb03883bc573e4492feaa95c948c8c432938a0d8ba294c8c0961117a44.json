{"ast":null,"code":"import ApiService from \"../Application/ApiService\";\n\n/**\n * Führt eine Fetch-Funktion aus, protokolliert die Antwort und behandelt Fehler.\n * @param {string} type - Der Typ der Datenquelle (z. B. \"Vermittler\").\n * @param {Function} fetchFunction - Die Fetch-Funktion für die API.\n * @returns {Promise<Array>} - Die bereinigte API-Antwort oder ein leeres Array.\n */\n\n/**\n * Entfernt zirkuläre Referenzen und verschachtelte Strukturen.\n * @param {Object} data - Die zu bereinigenden Daten.\n * @param {Set} seen - Set, um bereits besuchte Objekte zu verfolgen.\n * @returns {Object} - Bereinigte Daten.\n */\nconst sanitizeData = (data, seen = new WeakSet()) => {\n  if (data && typeof data === 'object') {\n    if (seen.has(data)) {\n      return undefined; // Zirkuläre Referenzen entfernen\n    }\n    seen.add(data);\n    const sanitized = Array.isArray(data) ? [] : {};\n    for (const key in data) {\n      if (key === 'betreuer' || key === 'einbringer' || key === 'vermittler') {\n        sanitized[key] = undefined; // Tiefe Referenzen entfernen\n      } else {\n        sanitized[key] = sanitizeData(data[key], seen);\n      }\n    }\n    return sanitized;\n  }\n  return data;\n};\n\n/**\n * Ruft alle Personen aus verschiedenen Endpunkten ab und führt sie zu einer Liste zusammen.\n * @returns {Promise<Array>} - Eine zusammengeführte Liste von Personen.\n */\nexport const fetchAllPersons = async () => {\n  try {\n    const vermittler = await fetchAndLog(\"Vermittler\", ApiService.fetchVermittler);\n    const einbringer = await fetchAndLog(\"Einbringer\", ApiService.fetchEinbringer);\n    const betreuer = await fetchAndLog(\"Betreuer\", ApiService.fetchBetreuer);\n    const allPersons = [...sanitizePersons(vermittler, \"Vermittler\"), ...sanitizePersons(einbringer, \"Einbringer\"), ...sanitizePersons(betreuer, \"Betreuer\")];\n\n    //console.log(\"Zusammengeführte Personenliste:\", allPersons);\n    return allPersons;\n  } catch (error) {\n    //console.error(\"Fehler beim Abrufen der Personen:\", error);\n    throw error;\n  }\n};\n\n/**\n * Bereinigt und formatiert die Liste der Personen aus einer bestimmten Quelle.\n * @param {Array} persons - Die ursprüngliche Personenliste.\n * @param {string} type - Der Typ der Quelle (z. B. \"Vermittler\", \"Einbringer\", \"Betreuer\").\n * @returns {Array} - Die bereinigte und formattierte Personenliste.\n */\nconst sanitizePersons = (persons, type) => {\n  if (!Array.isArray(persons)) {\n    console.warn(`Erwartete ein Array, aber erhalten:`, persons);\n    return [];\n  }\n  return persons.map(person => {\n    var _person$email, _person$adresse, _person$adresse2, _person$adresse3;\n    return {\n      id: person.id,\n      vorname: person.vorname || \"Unbekannt\",\n      nachname: person.nachname || \"Unbekannt\",\n      email: ((_person$email = person.email) === null || _person$email === void 0 ? void 0 : _person$email.address) || \"Keine Email\",\n      telefon: person.tel || \"Keine Telefonnummer\",\n      adresse: [((_person$adresse = person.adresse) === null || _person$adresse === void 0 ? void 0 : _person$adresse.strasse) || \"\", ((_person$adresse2 = person.adresse) === null || _person$adresse2 === void 0 ? void 0 : _person$adresse2.ort) || \"\", ((_person$adresse3 = person.adresse) === null || _person$adresse3 === void 0 ? void 0 : _person$adresse3.land) || \"\"].filter(Boolean).join(\", \"),\n      typ: type\n    };\n  });\n};","map":{"version":3,"names":["ApiService","sanitizeData","data","seen","WeakSet","has","undefined","add","sanitized","Array","isArray","key","fetchAllPersons","vermittler","fetchAndLog","fetchVermittler","einbringer","fetchEinbringer","betreuer","fetchBetreuer","allPersons","sanitizePersons","error","persons","type","console","warn","map","person","_person$email","_person$adresse","_person$adresse2","_person$adresse3","id","vorname","nachname","email","address","telefon","tel","adresse","strasse","ort","land","filter","Boolean","join","typ"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/personService.js"],"sourcesContent":["import ApiService from \"../Application/ApiService\";\n\n/**\n * Führt eine Fetch-Funktion aus, protokolliert die Antwort und behandelt Fehler.\n * @param {string} type - Der Typ der Datenquelle (z. B. \"Vermittler\").\n * @param {Function} fetchFunction - Die Fetch-Funktion für die API.\n * @returns {Promise<Array>} - Die bereinigte API-Antwort oder ein leeres Array.\n */\n\n\n/**\n * Entfernt zirkuläre Referenzen und verschachtelte Strukturen.\n * @param {Object} data - Die zu bereinigenden Daten.\n * @param {Set} seen - Set, um bereits besuchte Objekte zu verfolgen.\n * @returns {Object} - Bereinigte Daten.\n */\nconst sanitizeData = (data, seen = new WeakSet()) => {\n    if (data && typeof data === 'object') {\n        if (seen.has(data)) {\n            return undefined; // Zirkuläre Referenzen entfernen\n        }\n        seen.add(data);\n\n        const sanitized = Array.isArray(data) ? [] : {};\n        for (const key in data) {\n            if (key === 'betreuer' || key === 'einbringer' || key === 'vermittler') {\n                sanitized[key] = undefined; // Tiefe Referenzen entfernen\n            } else {\n                sanitized[key] = sanitizeData(data[key], seen);\n            }\n        }\n        return sanitized;\n    }\n    return data;\n};\n\n/**\n * Ruft alle Personen aus verschiedenen Endpunkten ab und führt sie zu einer Liste zusammen.\n * @returns {Promise<Array>} - Eine zusammengeführte Liste von Personen.\n */\nexport const fetchAllPersons = async () => {\n    try {\n        const vermittler = await fetchAndLog(\"Vermittler\", ApiService.fetchVermittler);\n        const einbringer = await fetchAndLog(\"Einbringer\", ApiService.fetchEinbringer);\n        const betreuer = await fetchAndLog(\"Betreuer\", ApiService.fetchBetreuer);\n\n        const allPersons = [\n            ...sanitizePersons(vermittler, \"Vermittler\"),\n            ...sanitizePersons(einbringer, \"Einbringer\"),\n            ...sanitizePersons(betreuer, \"Betreuer\"),\n        ];\n\n        //console.log(\"Zusammengeführte Personenliste:\", allPersons);\n        return allPersons;\n    } catch (error) {\n        //console.error(\"Fehler beim Abrufen der Personen:\", error);\n        throw error;\n    }\n};\n\n/**\n * Bereinigt und formatiert die Liste der Personen aus einer bestimmten Quelle.\n * @param {Array} persons - Die ursprüngliche Personenliste.\n * @param {string} type - Der Typ der Quelle (z. B. \"Vermittler\", \"Einbringer\", \"Betreuer\").\n * @returns {Array} - Die bereinigte und formattierte Personenliste.\n */\nconst sanitizePersons = (persons, type) => {\n    if (!Array.isArray(persons)) {\n        console.warn(`Erwartete ein Array, aber erhalten:`, persons);\n        return [];\n    }\n\n    return persons.map(person => ({\n        id: person.id,\n        vorname: person.vorname || \"Unbekannt\",\n        nachname: person.nachname || \"Unbekannt\",\n        email: person.email?.address || \"Keine Email\",\n        telefon: person.tel || \"Keine Telefonnummer\",\n        adresse: [\n            person.adresse?.strasse || \"\",\n            person.adresse?.ort || \"\",\n            person.adresse?.land || \"\",\n        ].filter(Boolean).join(\", \"),\n        typ: type,\n    }));\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}