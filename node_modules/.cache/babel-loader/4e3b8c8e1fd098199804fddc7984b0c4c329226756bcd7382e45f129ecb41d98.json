{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api'; // Base URL of your backend\n\nconst getToken = async () => {\n  try {\n    const credentials = btoa(\"MAR200575:geheim1\"); // Encode credentials\n    const response = await fetch(\"http://localhost:8080/token\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Basic ${credentials}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch token: ${response.statusText}`);\n    }\n    const token = await response.text(); // Assuming the token is a plain string\n    if (!token) {\n      throw new Error('Token is empty or invalid');\n    }\n    return token;\n  } catch (error) {\n    console.error('Error fetching token:', error);\n    throw error;\n  }\n};\nconst fetchDataWithToken = async (endpoint, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Use Bearer token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n\n    // Validate JSON response\n    const contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    } else {\n      throw new Error('Invalid JSON response from the server');\n    }\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n/**\n * Performs a GET request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const fetchData = async (endpoint, options = {}) => {\n  try {\n    const token = await getToken();\n    console.log(token);\n    const data = await fetchDataWithToken(endpoint, token);\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n/**\n * Performs a POST request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @param {Object} body - The payload (JSON object) for the POST request.\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const postData = async (endpoint, body, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body),\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`Error sending data: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n/**\n * Performs a PUT request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons/{id}\".\n * @param {Object} body - The payload (JSON object) for the PUT request.\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const updateData = async (endpoint, body, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body),\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`Error updating data: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n/**\n * Performs a DELETE request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons/{id}\".\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<void>} - Success message if deleted.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const deleteData = async (endpoint, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`Error deleting data: ${response.statusText}`);\n    }\n    return 'Data successfully deleted.';\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getToken","credentials","btoa","response","fetch","method","headers","ok","Error","statusText","token","text","error","console","fetchDataWithToken","endpoint","contentType","get","includes","json","fetchData","options","log","data","postData","body","JSON","stringify","updateData","deleteData"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/fetchAndRead.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api'; // Base URL of your backend\n\nconst getToken = async () => {\n    try {\n        const credentials = btoa(\"MAR200575:geheim1\"); // Encode credentials\n        const response = await fetch(\"http://localhost:8080/token\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Basic ${credentials}`,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch token: ${response.statusText}`);\n        }\n\n        const token = await response.text(); // Assuming the token is a plain string\n        if (!token) {\n            throw new Error('Token is empty or invalid');\n        }\n\n        return token;\n    } catch (error) {\n        console.error('Error fetching token:', error);\n        throw error;\n    }\n};\n\nconst fetchDataWithToken = async (endpoint, token) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`, // Use Bearer token\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error fetching data: ${response.statusText}`);\n        }\n\n        // Validate JSON response\n        const contentType = response.headers.get('Content-Type');\n        if (contentType && contentType.includes('application/json')) {\n            return await response.json();\n        } else {\n            throw new Error('Invalid JSON response from the server');\n        }\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n    }\n};\n\n/**\n * Performs a GET request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const fetchData = async (endpoint, options = {}) => {\n    try {\n        const token = await getToken();\n        console.log(token);\n        const data = await fetchDataWithToken(endpoint, token);\n\n        return data;\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n    }\n};\n\n/**\n * Performs a POST request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @param {Object} body - The payload (JSON object) for the POST request.\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const postData = async (endpoint, body, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error sending data: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n    }\n};\n\n/**\n * Performs a PUT request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons/{id}\".\n * @param {Object} body - The payload (JSON object) for the PUT request.\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const updateData = async (endpoint, body, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error updating data: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n    }\n};\n\n/**\n * Performs a DELETE request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons/{id}\".\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<void>} - Success message if deleted.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const deleteData = async (endpoint, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error deleting data: ${response.statusText}`);\n        }\n\n        return 'Data successfully deleted.';\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}