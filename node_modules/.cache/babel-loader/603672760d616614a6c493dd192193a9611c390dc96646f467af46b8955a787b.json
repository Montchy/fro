{"ast":null,"code":"var _jsxFileName = \"/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Components/Graphs.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport RenderHtml from \"react-native-render-html\";\nimport { useWindowDimensions } from \"react-native\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst source = {\n  html: `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Auktionsstatistik</title>\n    <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js\"></script>\n\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n        .chart {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            margin: 20px;\n        }\n        .tooltip {\n            position: absolute;\n            text-align: center;\n            background: lightgrey;\n            border-radius: 4px;\n            padding: 8px;\n            font-size: 12px;\n            display: none;\n            pointer-events: none;\n        }\n\n        #controls {\n            margin: 20px;\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        #controls select, #controls button, #controls input {\n            padding: 10px 15px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            font-size: 14px;\n            cursor: pointer;\n        }\n        #controls button:hover {\n            background-color: #f0f0f0;\n        }\n        #data-overview {\n            margin-top: 20px;\n            width: 100%;\n            border-collapse: collapse;\n            font-size: 14px;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n        }\n        #data-overview th, #data-overview td {\n            border: 1px solid #ddd;\n            padding: 10px;\n            text-align: left;\n        }\n        #data-overview th {\n            background-color: #007bff;\n            color: white;\n        }\n        #data-overview tr:nth-child(even) {\n            background-color: #f9f9f9;\n        }\n        #data-overview tr:hover {\n            background-color: #f1f1f1;\n        }\n        #theme-toggle {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background-color: #FFFFFF;\n            color: #333;\n            border: none;\n            border-radius: 25px;\n            padding: 12px 16px;\n            font-size: 20px;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.3s ease-in-out;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        #theme-toggle:hover {\n            background-color: #E0A800;\n            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n            transform: translateY(-2px);\n        }\n\n\n    </style>\n</head>\n<body>\n<div id=\"controls\">\n    <select id=\"chart-type-selector\" onchange=\"updateChartType(this.value)\">\n        <option value=\"bar\">Balkendiagramm</option>\n        <option value=\"pie\">Kreisdiagramm</option>\n        <option value=\"heatmap\">Heatmap</option>\n        <option value=\"line\">Liniendiagramm</option>\n    </select>\n    <select id=\"metric-selector\" onchange=\"updateMetric(this.value)\">\n        <option value=\"sales\" selected>Nach Anzahl Verk√§ufe</option>\n        <option value=\"revenue\">Nach Umsatz</option>\n    </select>\n    <select id=\"view-selector\" onchange=\"updateView(this.value)\">\n        <option value=\"date\" selected>Nach Datum</option>\n        <option value=\"category\">Nach Kategorie</option>\n        <option value=\"state\">Nach Bundesland</option>\n    </select>\n    <select id=\"year-selector\" style=\"display: none;\" onchange=\"updateYear(this.value)\">\n        <option value=\"all\" selected>Gesamt</option>\n        <option value=\"2020\">2020</option>\n        <option value=\"2021\">2021</option>\n        <option value=\"2022\">2022</option>\n        <option value=\"2023\">2023</option>\n        <option value=\"2024\">2024</option>\n    </select>\n    <select id=\"action-selector\" onchange=\"handleActionChange(this.value)\">\n        <option value=\"\">Aktion ausw√§hlen...</option>\n        <option value=\"sort-asc\">Nach niedrigstem sortieren</option>\n        <option value=\"sort-desc\">Nach h√∂chstem sortieren</option>\n        <option value=\"filter\">alles √ºber 10 anzeigen</option>\n        <option value=\"reset\">Daten zur√ºcksetzen</option>\n        <option value=\"highlight-top\">Top 3 hervorheben</option>\n        <option value=\"show-average\">Durchschnitt anzeigen</option>\n        <option value=\"sort-category\">Nach Kategorie sortieren</option>\n    </select>\n    <select id=\"interval-selector\" onchange=\"updateChart()\">\n        <option value=\"day\">T√§glich</option>\n        <option value=\"week\">W√∂chentlich</option>\n        <option value=\"month\">Monatlich</option>\n        <option value=\"year\">J√§hrlich</option>\n    </select>\n    <div id=\"date-filter\">\n        <input type=\"date\" id=\"start-date\" placeholder=\"Startdatum\">\n        <input type=\"date\" id=\"end-date\" placeholder=\"Enddatum\">\n        <button onclick=\"filterByDate()\">Filtern</button>\n    </div>\n    <button id=\"compare-button\" onclick=\"openCompareMode()\">Vergleichen</button>\n    <button id=\"map-button\" onclick=\"openMapMode()\">Kartenansicht</button>\n    <select id=\"export-options\">\n        <option value=\"\">Exportieren...</option>\n        <option value=\"print\">Diagramme drucken</option>\n        <option value=\"csv\">Daten als CSV</option>\n        <option value=\"pdf\">Daten als PDF</option>\n    </select>\n    <button id=\"theme-toggle\">üåô</button>\n\n</div>\n\n<div id=\"average-sales\" style=\"display: none; text-align: center; margin: 20px; font-size: 18px;\">\n    <strong>Durchschnitt:</strong> <span id=\"average-sales-value\">0</span>\n</div>\n\n<div id=\"sales-chart\" class=\"chart\"></div>\n<div id=\"tooltip\" class=\"tooltip\"></div>\n<table id=\"data-overview\">\n    <thead>\n    <tr>\n        <th>Datum</th>\n        <th>Kategorie</th>\n        <th>Anzahl Verk√§ufe</th>\n        <th>Umsatz</th>\n        <th>Bundesland</th>\n    </tr>\n    </thead>\n    <tbody></tbody>\n</table>\n\n<script>\n    const width = 800;\n    const height = 400;\n    const margin = { top: 20, right: 30, bottom: 50, left: 60 };\n\n    let chartType = 'bar';\n    let currentInterval = \"day\";\n    let currentMetric = \"sales\";\n    let currentView = \"date\";\n    let selectedYear = \"all\";\n    let aggregatedData = [];\n\n\n    let dummyData = [\n        { date: \"2020-01-05\", category: \"Kunst\", sales: 5, revenue: 50000, state: \"Nieder√∂sterreich\" },\n        { date: \"2020-02-10\", category: \"Antiquit√§ten\", sales: 3, revenue: 32000, state: \"Wien\" },\n        { date: \"2020-03-15\", category: \"Kunst\", sales: 10, revenue: 15000, state: \"Steiermark\" },\n        { date: \"2020-04-20\", category: \"Schmuck\", sales: 7, revenue: 70000, state: \"Ober√∂sterreich\" },\n        { date: \"2020-05-01\", category: \"Kunst\", sales: 12, revenue: 120000, state: \"Nieder√∂sterreich\" },\n        { date: \"2021-03-10\", category: \"Schmuck\", sales: 15, revenue: 301000, state: \"Burgenland\" },\n        { date: \"2021-04-18\", category: \"Antiquit√§ten\", sales: 26, revenue: 52500, state: \"Tirol\" },\n        { date: \"2021-04-22\", category: \"Kunst\", sales: 18, revenue: 36000, state: \"K√§rnten\" },\n        { date: \"2022-05-05\", category: \"Schmuck\", sales: 19, revenue: 38000, state: \"Salzburg\" },\n        { date: \"2022-05-15\", category: \"Antiquit√§ten\", sales: 12, revenue: 24000, state: \"Vorarlberg\" },\n        { date: \"2022-06-01\", category: \"Kunst\", sales: 10, revenue: 20000, state: \"Steiermark\" },\n        { date: \"2023-06-20\", category: \"Schmuck\", sales: 35, revenue: 70000, state: \"Ober√∂sterreich\" },\n        { date: \"2023-07-10\", category: \"Antiquit√§ten\", sales: 23, revenue: 46000, state: \"Wien\" },\n        { date: \"2023-08-15\", category: \"Kunst\", sales: 41, revenue: 82000, state: \"Burgenland\" },\n        { date: \"2023-09-20\", category: \"Schmuck\", sales: 28, revenue: 56000, state: \"Tirol\" },\n        { date: \"2024-01-01\", category: \"Kunst\", sales: 50, revenue: 100000, state: \"Nieder√∂sterreich\" },\n        { date: \"2024-06-10\", category: \"Antiquit√§ten\", sales: 42, revenue: 84000, state: \"K√§rnten\" },\n        { date: \"2024-07-15\", category: \"Schmuck\", sales: 48, revenue: 96000, state: \"Vorarlberg\" },\n        { date: \"2024-10-20\", category: \"Kunst\", sales: 38, revenue: 76000, state: \"Salzburg\" }\n    ];\n\n\n    let originalData = [...dummyData];\n\n    function aggregateSales(data, interval) {\n        const grouped = d3.group(data, d => {\n            const date = new Date(d.date);\n            if (interval === \"day\") return d3.timeFormat(\"%Y-%m-%d\")(date);\n            if (interval === \"week\") return d3.timeFormat(\"%Y-W%U\")(date);\n            if (interval === \"month\") return d3.timeFormat(\"%Y-%m\")(date);\n            if (interval === \"year\") return d3.timeFormat(\"%Y\")(date);\n        });\n\n        return Array.from(grouped, ([key, values]) => ({\n            date: key,\n            value: d3.sum(values, v => v[currentMetric]), // Aggregiere nach der aktuellen Metrik\n            sales: d3.sum(values, v => v.sales), // Behalte Verk√§ufe bei\n            revenue: d3.sum(values, v => v.revenue), // Behalte Umsatz bei\n            state: Array.from(new Set(values.map(v => v.state))).join(\", \"), // Kombiniere Bundesl√§nder\n            category: Array.from(new Set(values.map(v => v.category))).join(\", \") // Kombiniere Kategorien\n        }));\n    }\n\n\n\n    document.getElementById(\"export-options\").addEventListener(\"change\", (event) => {\n        const value = event.target.value;\n        if (value === \"print\") printPage();\n        else if (value === \"csv\") exportCSV();\n        else if (value === \"pdf\") exportPDF();\n        event.target.value = \"\"; // Setze das Dropdown zur√ºck\n    });\n\n    function aggregateByCategory(data, year) {\n        let filteredData = data;\n\n        if (year !== \"all\") {\n            filteredData = data.filter(d => new Date(d.date).getFullYear() === parseInt(year));\n        }\n\n        const grouped = d3.group(filteredData, d => d.category);\n\n        return Array.from(grouped, ([category, values]) => ({\n            category,\n            value: d3.sum(values, v => v[currentMetric]), // Summiere Verk√§ufe oder Umsatz basierend auf der aktuellen Metrik\n            sales: d3.sum(values, v => v.sales),\n            revenue: d3.sum(values, v => v.revenue),\n            states: Array.from(new Set(values.map(v => v.state))).join(\", \")\n        }));\n    }\n\n    function aggregateByState(data, year = \"all\") {\n        let filteredData = data;\n\n        // Nach Jahr filtern, falls ein bestimmtes Jahr ausgew√§hlt ist\n        if (year !== \"all\") {\n            filteredData = data.filter(d => new Date(d.date).getFullYear() === parseInt(year));\n        }\n\n        const grouped = d3.group(filteredData, d => d.state);\n\n        return Array.from(grouped, ([state, values]) => ({\n            state,\n            value: d3.sum(values, v => v[currentMetric]), // Summiere Verk√§ufe oder Umsatz\n            sales: d3.sum(values, v => v.sales),\n            revenue: d3.sum(values, v => v.revenue),\n            categories: Array.from(new Set(values.map(v => v.category))).join(\", \")\n        }));\n    }\n\n    function updateChartAndTableByState() {\n        const aggregatedData = aggregateByState(originalData, selectedYear);\n        renderTable(aggregatedData, \"state\"); // Tabelle f√ºr Bundesl√§nder\n        renderChart(aggregatedData); // Diagramm f√ºr Bundesl√§nder\n    }\n\n    function renderChart(data, highlight = false) {\n        d3.select(\"#sales-chart\").select(\"svg\").remove();\n\n        const axisField = currentView === \"state\" ? \"state\" : currentView === \"category\" ? \"category\" : \"date\";\n\n        if (chartType === 'bar') {\n            renderBarChart(data.map(d => ({ date: d[axisField], ...d })), highlight);\n        } else if (chartType === 'pie') {\n            renderPieChart(data.map(d => ({ date: d[axisField], ...d }))); // Hier axisField f√ºr Konsistenz nutzen\n        } else if (chartType === 'heatmap') {\n            renderHeatmap(data);\n        } else if (chartType === 'line') {\n            renderLineChart(data.map(d => ({ date: d[axisField], ...d }))); // Hier axisField f√ºr Konsistenz nutzen\n        }\n    }\n\n    function renderBarChart(data, highlight = false) {\n        const svg = d3.select(\"#sales-chart\")\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \\`translate(${margin.left},${margin.top})\\`);\n\n        const x = d3.scaleBand()\n            .domain(data.map(d => d.date))\n            .range([0, width])\n            .padding(0.2);\n\n        const y = d3.scaleLinear()\n            .domain([0, d3.max(data, d => d.value)]) // Verwende die aktuelle Metrik\n            .nice()\n            .range([height, 0]);\n\n        const tooltip = d3.select(\"#tooltip\");\n\n        svg.append(\"g\")\n            .attr(\"transform\", \\`translate(0,${height})\\`)\n            .call(d3.axisBottom(x).tickFormat(d => d))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        svg.append(\"g\").call(d3.axisLeft(y));\n\n        svg.selectAll(\".bar\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", d => x(d.date))\n            .attr(\"y\", d => y(d.value)) // Verwende die aktuelle Metrik\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", d => height - y(d.value)) // Verwende die aktuelle Metrik\n            .attr(\"fill\", d => d.highlight ? \"orange\" : \"steelblue\")\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this)\n                    .raise()\n                    .transition()\n                    .duration(200)\n                    .attr(\"fill\", d.highlight ? \"orange\" : \"#00008B\")\n                    .attr(\"width\", x.bandwidth() * 1.2)\n                    .attr(\"x\", d => x(d.date) - x.bandwidth() * 0.1);\n                tooltip.style(\"display\", \"block\")\n                    .html(\\`<strong>Datum:</strong> ${d.date}<br>\n                       <strong>Kategorie:</strong> ${d.category}<br>\n                       <strong>${currentMetric === \"sales\" ? \"Verk√§ufe\" : \"Umsatz\"}:</strong> ${d.value}\\`)\n                    .style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mousemove\", (event) => {\n                tooltip.style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mouseout\", function (event, d) {\n                d3.select(this)\n                    .transition()\n                    .duration(200)\n                    .attr(\"fill\", d.highlight ? \"orange\" : \"steelblue\")\n                    .attr(\"width\", x.bandwidth())\n                    .attr(\"x\", d => x(d.date));\n                tooltip.style(\"display\", \"none\");\n            });\n    }\n\n    function renderPieChart(data) {\n        const svg = d3.select(\"#sales-chart\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\")\n            .attr(\"transform\", \\`translate(${width / 2}, ${height / 2})\\`);\n\n        const radius = Math.min(width, height) / 2 - margin.top;\n\n        const pie = d3.pie().value(d => d.value); // Verwende die aktuelle Metrik\n        const arc = d3.arc().innerRadius(0).outerRadius(radius);\n\n        const tooltip = d3.select(\"#tooltip\");\n\n        const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n        svg.selectAll('path')\n            .data(pie(data))\n            .enter()\n            .append('path')\n            .attr('d', arc)\n            .attr('fill', d => d.highlight ? \"orange\" : color(d.data.date))\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this)\n                    .raise()\n                    .transition()\n                    .duration(200)\n                    .attr('d', d3.arc().innerRadius(0).outerRadius(radius + 20));\n                tooltip.style(\"display\", \"block\")\n                    .html(\\`<strong>Datum:</strong> ${d.data.date}<br>\n                       <strong>Kategorie:</strong> ${d.data.category}<br>\n                       <strong>${currentMetric === \"sales\" ? \"Verk√§ufe\" : \"Umsatz\"}:</strong> ${d.data.value}\\`)\n                    .style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mousemove\", (event) => {\n                tooltip.style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mouseout\", function (event, d) {\n                d3.select(this)\n                    .transition()\n                    .duration(200)\n                    .attr('d', arc);\n                tooltip.style(\"display\", \"none\");\n            });\n    }\n\n    function renderHeatmap(data) {\n        const svg = d3.select(\"#sales-chart\")\n            .append(\"svg\")\n            .attr(\"width\", width + 100) // Platz f√ºr die Farblegende rechts\n            .attr(\"height\", height + 50); // Platz f√ºr Achsenbeschriftungen\n\n        const colorScale = d3.scaleSequential(d3.interpolateBlues)\n            .domain([0, d3.max(data, d => d.value)]); // Verwende die aktuelle Metrik\n\n        const tooltip = d3.select(\"#tooltip\");\n\n        // Spalten und Zeilen definieren\n        const numCols = Math.ceil(Math.sqrt(data.length));\n        const numRows = Math.ceil(data.length / numCols);\n\n        const cellSize = Math.min(width / numCols, (height - 50) / numRows); // Dynamische Zellenberechnung\n\n        // Heatmap-Zellen\n        const cells = svg.selectAll(\"g.cell\")\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"cell\")\n            .attr(\"transform\", (d, i) => \\`translate(${i % numCols * cellSize}, ${Math.floor(i / numCols) * cellSize + 20})\\`); // +20 f√ºr Beschriftungen oben\n\n        // Rechtecke der Zellen\n        cells.append(\"rect\")\n            .attr(\"width\", cellSize - 2) // Zellen mit etwas Abstand\n            .attr(\"height\", cellSize - 2)\n            .attr(\"fill\", d => d.highlight ? \"orange\" : colorScale(d.value)) // Orange f√ºr hervorgehobene Felder\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this)\n                    .raise() // Bringt das Rechteck nach vorne\n                    .transition()\n                    .duration(200)\n                    .attr(\"fill\", d.highlight ? \"orange\" : \"#00008B\"); // Hervorgehobene Farbe\n                tooltip.style(\"display\", \"block\")\n                    .html(\\`<strong>Datum:</strong> ${d.date}<br>\n                       <strong>Kategorie:</strong> ${d.category}<br>\n                       <strong>${currentMetric === \"sales\" ? \"Verk√§ufe\" : \"Umsatz\"}:</strong> ${d.value}\\`)\n                    .style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mousemove\", (event) => {\n                tooltip.style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mouseout\", function (event, d) {\n                d3.select(this)\n                    .transition()\n                    .duration(200)\n                    .attr(\"fill\", d.highlight ? \"orange\" : colorScale(d.value)); // R√ºckkehr zur Originalfarbe\n                tooltip.style(\"display\", \"none\");\n            });\n\n        // Beschriftungen f√ºr die Spalten (oben)\n        const columnLabels = svg.append(\"g\")\n            .selectAll(\"text\")\n            .data(data.slice(0, numCols)) // Erste Zeile als Spaltenbeschriftung\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", (d, i) => i * cellSize + (cellSize / 2)) // Zentriert √ºber den Spalten\n            .attr(\"y\", 15) // Platz oberhalb der Zellen\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"font-weight\", \"bold\")\n            .text(d => d.date); // Hier Datum oder andere Spalten√ºberschrift\n\n        // Beschriftungen f√ºr die Reihen (links)\n        const rowLabels = svg.append(\"g\")\n            .selectAll(\"text\")\n            .data(data.filter((_, i) => i % numCols === 0)) // Erste Spalte als Reihenbeschriftung\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", -10) // Platz links der Zellen\n            .attr(\"y\", (d, i) => i * cellSize + cellSize / 1.5 + 20) // Zentriert auf den Reihen\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"font-weight\", \"bold\")\n            .text(d => d.category); // Kategorie oder andere Reihen√ºberschrift\n\n        // Vertikale Farblegende\n        const legendHeight = 200;\n        const legendX = width + 20; // Rechts von der Heatmap\n        const legendY = (height - legendHeight) / 2;\n\n        const legendScale = d3.scaleLinear()\n            .domain([d3.max(data, d => d.value), 0]) // Dunkel oben, hell unten\n            .range([legendY, legendY + legendHeight]);\n\n        const legendAxis = d3.axisRight(legendScale)\n            .ticks(5);\n\n        const gradientId = \"heatmap-vertical-gradient\";\n\n        // Farbverlauf f√ºr die vertikale Legende definieren\n        const defs = svg.append(\"defs\");\n        const gradient = defs.append(\"linearGradient\")\n            .attr(\"id\", gradientId)\n            .attr(\"x1\", \"0%\")\n            .attr(\"x2\", \"0%\")\n            .attr(\"y1\", \"0%\")\n            .attr(\"y2\", \"100%\");\n\n        gradient.append(\"stop\")\n            .attr(\"offset\", \"0%\")\n            .attr(\"stop-color\", d3.interpolateBlues(1)); // Dunkelblau oben\n\n        gradient.append(\"stop\")\n            .attr(\"offset\", \"100%\")\n            .attr(\"stop-color\", d3.interpolateBlues(0)); // Hellblau unten\n\n        svg.append(\"rect\")\n            .attr(\"x\", legendX)\n            .attr(\"y\", legendY)\n            .attr(\"width\", 20)\n            .attr(\"height\", legendHeight)\n            .style(\"fill\", \\`url(#${gradientId})\\`);\n\n        svg.append(\"g\")\n            .attr(\"transform\", \\`translate(${legendX + 20}, 0)\\`)\n            .call(legendAxis);\n    }\n\n    function renderLineChart(data) {\n        const svg = d3.select(\"#sales-chart\")\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \\`translate(${margin.left},${margin.top})\\`);\n\n        const x = d3.scalePoint()\n            .domain(data.map(d => d.date))\n            .range([0, width]);\n\n        const y = d3.scaleLinear()\n            .domain([0, d3.max(data, d => d.value)]) // Nutze die aktuelle Metrik\n            .nice()\n            .range([height, 0]);\n\n        const line = d3.line()\n            .x(d => x(d.date))\n            .y(d => y(d.value)); // Nutze die aktuelle Metrik\n\n        svg.append(\"g\")\n            .attr(\"transform\", \\`translate(0,${height})\\`)\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        svg.append(\"g\").call(d3.axisLeft(y));\n\n        svg.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", line);\n\n        const tooltip = d3.select(\"#tooltip\");\n\n        svg.selectAll(\"circle\")\n            .data(data)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", d => x(d.date))\n            .attr(\"cy\", d => y(d.value)) // Nutze die aktuelle Metrik\n            .attr(\"r\", 5)\n            .attr(\"fill\", \"steelblue\")\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this)\n                    .raise()\n                    .transition()\n                    .duration(200)\n                    .attr(\"r\", 8)\n                    .attr(\"fill\", \"orange\");\n                tooltip.style(\"display\", \"block\")\n                    .html(\\`<strong>Datum:</strong> ${d.date}<br>\n                       <strong>Kategorie:</strong> ${d.category}<br>\n                       <strong>${currentMetric === \"sales\" ? \"Verk√§ufe\" : \"Umsatz\"}:</strong> ${d.value}\\`)\n                    .style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mousemove\", (event) => {\n                tooltip.style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mouseout\", function () {\n                d3.select(this)\n                    .transition()\n                    .duration(200)\n                    .attr(\"r\", 5)\n                    .attr(\"fill\", \"steelblue\");\n                tooltip.style(\"display\", \"none\");\n            });\n    }\n\n    function updateMetric(metric) {\n        currentMetric = metric;\n        refreshView();\n    }\n\n    function updateView(view) {\n        currentView = view;\n        refreshView();\n    }\n    function updateYear(year) {\n        selectedYear = year;\n        refreshView();\n    }\n\n    function updateChartAndTableByCategory() {\n        const aggregatedData = aggregateByCategory(originalData, selectedYear);\n        renderTable(aggregatedData, \"category\"); // Tabelle f√ºr Kategorien\n        renderChart(aggregatedData); // Diagramm f√ºr Kategorien\n    }\n\n    function updateChartType(type) {\n        chartType = type;\n        refreshView();\n    }\n\n    function refreshView() {\n        // Sichtbarkeit der Dropdowns steuern\n        const dateFilter = document.getElementById(\"date-filter\");\n\n        if (currentView === \"date\") {\n            document.getElementById(\"interval-selector\").style.display = \"inline-block\"; // Sichtbar f√ºr Datum\n            document.getElementById(\"year-selector\").style.display = \"none\"; // Versteckt f√ºr Datum\n            dateFilter.style.display = \"inline-block\"; // Datumsfilter anzeigen\n            aggregatedData = aggregateSales(originalData, currentInterval); // Aggregation f√ºr Datum\n            renderTable(aggregatedData, \"date\"); // Tabelle aktualisieren\n        } else {\n            document.getElementById(\"interval-selector\").style.display = \"none\"; // Versteckt f√ºr andere Ansichten\n            document.getElementById(\"year-selector\").style.display = \"inline-block\"; // Sichtbar f√ºr Kategorie/Bundesland\n            dateFilter.style.display = \"none\"; // Datumsfilter verstecken\n\n            if (currentView === \"category\") {\n                aggregatedData = aggregateByCategory(originalData, selectedYear); // Aggregation f√ºr Kategorie\n                renderTable(aggregatedData, \"category\"); // Tabelle aktualisieren\n            } else if (currentView === \"state\") {\n                aggregatedData = aggregateByState(originalData, selectedYear); // Aggregation f√ºr Bundesland\n                renderTable(aggregatedData, \"state\"); // Tabelle aktualisieren\n            }\n        }\n\n        // Diagramm basierend auf aggregierten Daten aktualisieren\n        renderChart(aggregatedData);\n    }\n\n    function handleActionChange(action) {\n        if (action === \"sort-asc\") sortData(\"asc\");\n        if (action === \"sort-desc\") sortData(\"desc\");\n        if (action === \"filter\") filterData();\n        if (action === \"reset\") resetData(); // Hier wird resetData aufgerufen\n        if (action === \"highlight-top\") highlightTopThree();\n        if (action === \"show-average\") showAverageValue();\n        if (action === \"sort-category\" && currentView === \"category\") sortByCategory();\n\n        document.getElementById(\"action-selector\").value = \"\"; // Dropdown zur√ºcksetzen\n    }\n\n\n    function updateChart() {\n        const interval = document.getElementById(\"interval-selector\").value;\n        currentInterval = interval; // Speichert das aktuelle Intervall\n\n        if (currentView === \"date\") {\n            const aggregatedData = aggregateSales(originalData, interval);\n            renderTable(aggregatedData, \"date\");\n            renderChart(aggregatedData);\n        }\n    }\n\n    function sortByCategory() {\n        aggregatedData.sort((a, b) => a.category.localeCompare(b.category));\n        renderTable(aggregatedData);\n        renderChart(aggregatedData);\n    }\n\n\n    function sortData(order) {\n        aggregatedData.sort((a, b) => {\n            if (order === \"asc\") {\n                return a.value - b.value; // Sortieren nach der aktuellen Metrik\n            } else {\n                return b.value - a.value;\n            }\n        });\n        renderTable(aggregatedData, currentView); // Tabelle aktualisieren\n        renderChart(aggregatedData); // Diagramm aktualisieren\n    }\n\n\n    function filterData() {\n        aggregatedData = aggregatedData.filter(d => d.value > 10); // Filter auf die aktuelle Metrik anwenden\n        renderTable(aggregatedData, currentView);\n        renderChart(aggregatedData);\n    }\n\n\n    function resetData() {\n        if (currentView === \"state\") {\n            aggregatedData = aggregateByState(originalData, selectedYear);\n            renderTable(aggregatedData, \"state\");\n        } else if (currentView === \"category\") {\n            aggregatedData = aggregateByCategory(originalData, selectedYear);\n            renderTable(aggregatedData, \"category\");\n        } else {\n            aggregatedData = aggregateSales(originalData, currentInterval);\n            renderTable(aggregatedData, \"date\");\n        }\n        renderChart(aggregatedData);\n    }\n\n\n    function highlightTopThree() {\n        aggregatedData = aggregatedData.map(d => ({ ...d, highlight: false }));\n        const topThree = [...aggregatedData].sort((a, b) => b.value - a.value).slice(0, 3); // Nach aktueller Metrik sortieren\n        topThree.forEach(d => d.highlight = true);\n        renderTable(aggregatedData, currentView);\n        renderChart(aggregatedData, true);\n    }\n\n    function showAverageValue() {\n        const average = d3.mean(aggregatedData, d => d.value); // Durchschnitt der aktuellen Metrik berechnen\n        document.getElementById(\"average-sales-value\").textContent = average.toFixed(2);\n        document.getElementById(\"average-sales\").style.display = \"block\";\n    }\n\n    function filterByDate() {\n        const startDateInput = document.getElementById(\"start-date\").value;\n        const endDateInput = document.getElementById(\"end-date\").value;\n\n        if (!startDateInput || !endDateInput) {\n            alert(\"Bitte Start- und Enddatum ausw√§hlen.\");\n            return;\n        }\n\n        const startDate = new Date(startDateInput);\n        const endDate = new Date(endDateInput);\n\n        if (startDate > endDate) {\n            alert(\"Das Startdatum muss vor dem Enddatum liegen.\");\n            return;\n        }\n\n        // Filtern der Daten basierend auf dem Datum\n        const filteredData = originalData.filter(d => {\n            const date = new Date(d.date);\n            return date >= startDate && date <= endDate;\n        });\n\n        // Aktualisieren der Tabelle und des Diagramms\n        aggregatedData = aggregateSales(filteredData, currentInterval);\n        renderTable(aggregatedData, \"date\");\n        renderChart(aggregatedData);\n    }\n\n\n    function updateTableHeaders(groupBy = \"date\") {\n        const tableHead = d3.select(\"#data-overview thead\");\n        tableHead.selectAll(\"tr\").remove(); // Alte √úberschriften entfernen\n\n        let headers = [];\n        if (groupBy === \"category\") {\n            headers = [\"Kategorie\", \"Anzahl Verk√§ufe\", \"Umsatz\", \"Bundesl√§nder\"];\n        } else if (groupBy === \"state\") {\n            headers = [\"Bundesland\", \"Kategorien\", \"Anzahl Verk√§ufe\", \"Umsatz\"];\n        } else {\n            // Default: Nach Datum gruppiert\n            headers = [\"Datum\", \"Kategorie\", \"Anzahl Verk√§ufe\", \"Umsatz\", \"Bundesland\"];\n        }\n\n        // Neue √úberschriften hinzuf√ºgen\n        tableHead.append(\"tr\")\n            .selectAll(\"th\")\n            .data(headers)\n            .enter()\n            .append(\"th\")\n            .text(d => d);\n    }\n\n    function renderTable(data, groupBy = \"date\") {\n        updateTableHeaders(groupBy); // √úberschriften aktualisieren\n\n        const tbody = d3.select(\"#data-overview tbody\");\n        tbody.selectAll(\"tr\").remove();\n\n        tbody.selectAll(\"tr\")\n            .data(data)\n            .enter()\n            .append(\"tr\")\n            .attr(\"class\", d => d.highlight ? \"highlight\" : \"\")\n            .html(d => {\n                if (groupBy === \"category\") {\n                    return \\`\n                    <td>${d.category || ''}</td>\n                    <td>${d.sales || ''}</td>\n                    <td>${d.revenue || ''}</td>\n                    <td>${d.states || ''}</td>\n                \\`;\n                } else if (groupBy === \"state\") {\n                    return \\`\n                    <td>${d.state || ''}</td>\n                    <td>${d.categories || ''}</td>\n                    <td>${d.sales || ''}</td>\n                    <td>${d.revenue || ''}</td>\n                \\`;\n                } else {\n                    // Default: Nach Datum gruppiert\n                    return \\`\n                    <td>${d.date || ''}</td>\n                    <td>${d.category || ''}</td>\n                    <td>${d.sales || ''}</td>\n                    <td>${d.revenue || ''}</td>\n                    <td>${d.state || ''}</td>\n                \\`;\n                }\n            });\n    }\n\n\n\n    // Initial render\n    aggregatedData = aggregateSales(originalData, \"day\");\n    renderTable(aggregatedData);\n    renderChart(aggregatedData);\n    document.getElementById(\"year-selector\").style.display = \"none\"; // Standardm√§√üig ausblenden\n    document.getElementById(\"interval-selector\").style.display = \"inline-block\"; // Standardm√§√üig anzeigen\n\n    function printPage() {\n        window.print();\n    }\n    function exportCSV() {\n        // Erstelle den Header der CSV-Datei\n        const csvHeader = \"Datum,Kategorie,Verk√§ufe,Umsatz,Bundesland\\\\n\";\n\n        // F√ºge die Daten aus aggregatedData hinzu\n        const csvRows = aggregatedData.map(d =>\n            \\`${d.date},${d.category},${d.sales},${d.revenue},${d.state}\\`\n        ).join(\"\\\\n\");\n\n        // Kombiniere den Header und die Daten\n        const csvContent = \"data:text/csv;charset=utf-8,\" + csvHeader + csvRows;\n\n        // Erstelle eine Download-URL f√ºr die CSV-Datei\n        const encodedUri = encodeURI(csvContent);\n\n        // Erstelle einen tempor√§ren Link, um die Datei herunterzuladen\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"data.csv\");\n\n        // F√ºge den Link zum Dokument hinzu, klicke darauf, und entferne ihn danach\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    function exportPDF() {\n        const { jsPDF } = window.jspdf;\n\n        // W√§hle den gesamten sichtbaren Bereich aus\n        const element = document.body;\n\n        html2canvas(element, { scale: 2 }).then(canvas => {\n            const imgData = canvas.toDataURL(\"image/png\");\n            const pdf = new jsPDF('p', 'mm', 'a4');\n            const pdfWidth = pdf.internal.pageSize.getWidth();\n            const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\n\n            pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\n            pdf.save('statistics.pdf'); // PDF herunterladen\n        });\n    }\n\n    function openCompareMode() {\n        const compareButton = document.getElementById(\"compare-button\");\n        compareButton.style.display = \"none\";\n        window.location.href = \"compare.html\";\n        console.log(\"Versuche, zur Vergleichsseite zu navigieren...\");\n    }\n\n    function openMapMode() {\n        const mapButton = document.getElementById(\"map-button\");\n        mapButton.style.display = \"none\"; // Button verstecken\n        window.location.href = \"map.html\"; // Wechsel zur Map-Datei\n        console.log(\"Versuche, zur Map zu navigieren...\");\n    }\n    function hideElementsForCompareMode() {\n        const urlParams = new URLSearchParams(window.location.search);\n        if (urlParams.get('compare') === 'true') {\n            document.getElementById(\"compare-button\").style.display = \"none\";\n            document.getElementById(\"export-options\").style.display = \"none\";\n            document.getElementById(\"theme-toggle\").style.display = \"none\";\n        }\n    }\n    let darkMode = false;\n    function toggleTheme() {\n        darkMode = !darkMode;\n        document.body.style.backgroundColor = darkMode ? \"#121212\" : \"#ffffff\";\n        document.body.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n\n        const controls = document.getElementById(\"controls\");\n        controls.style.backgroundColor = darkMode ? \"#222\" : \"#f9f9f9\";\n        controls.style.borderBottom = darkMode ? \"1px solid #444\" : \"1px solid #ccc\";\n\n        const tableHeaders = document.querySelectorAll(\"#data-overview th\");\n        tableHeaders.forEach(header => {\n            header.style.backgroundColor = darkMode ? \"#0844A4\" : \"#007bff\";\n            header.style.color = darkMode ? \"#ffffff\" : \"#ffffff\";\n        });\n\n        const tableCells = document.querySelectorAll(\"#data-overview td\");\n        tableCells.forEach(cell => {\n            cell.style.backgroundColor = darkMode ? \"#222\" : \"#ffffff\";\n            cell.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n        });\n\n        const buttons = document.querySelectorAll(\"#controls button\");\n        buttons.forEach(button => {\n            button.style.backgroundColor = darkMode ? \"#0844A4\" : \"#f9f9f9\";\n            button.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n        });\n\n        const dropdowns = document.querySelectorAll(\"#controls select\");\n        dropdowns.forEach(select => {\n            select.style.backgroundColor = darkMode ? \"#222\" : \"#ffffff\";\n            select.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n            select.style.border = darkMode ? \"1px solid #444\" : \"1px solid #ccc\";\n        });\n\n        const inputs = document.querySelectorAll(\"input\");\n        inputs.forEach(input => {\n            input.style.backgroundColor = darkMode ? \"#222\" : \"#ffffff\";\n            input.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n            input.style.border = darkMode ? \"1px solid #444\" : \"1px solid #ccc\";\n        });\n\n        // Tooltip\n        const tooltip = document.getElementById(\"tooltip\");\n        if (tooltip) {\n            tooltip.style.backgroundColor = darkMode ? \"#333\" : \"lightgrey\";\n            tooltip.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n        }\n\n        const svgElements = document.querySelectorAll(\"svg\");\n        svgElements.forEach(svg => {\n            svg.style.backgroundColor = darkMode ? \"#121212\" : \"#ffffff\";\n        });\n\n        const themeToggle = document.getElementById(\"theme-toggle\");\n        themeToggle.textContent = darkMode ? \"‚òÄÔ∏è\" : \"üåô\";\n        themeToggle.style.backgroundColor = darkMode ? \"#0844A4\" : \"#FFFFFF\";\n        themeToggle.style.color = darkMode ? \"#FFFFFF\" : \"#333\";\n    }\n    document.getElementById(\"theme-toggle\").addEventListener(\"click\", toggleTheme);\n\n    document.addEventListener(\"DOMContentLoaded\", hideElementsForCompareMode);\n\n    // Add an event listener to handle postMessage for Darkmode\n    window.addEventListener(\"message\", (event) => {\n        if (event.data.theme === \"dark\") {\n            if (!darkMode) toggleTheme(); // Activate Darkmode\n        } else if (event.data.theme === \"light\") {\n            if (darkMode) toggleTheme(); // Deactivate Darkmode\n        }\n    });\n\n\n</script>\n</body>\n</html>`\n};\nconst Graphs = () => {\n  _s();\n  const {\n    width\n  } = useWindowDimensions();\n  return /*#__PURE__*/_jsxDEV(RenderHtml, {\n    contentWidth: width,\n    source: source\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1004,\n    columnNumber: 9\n  }, this);\n};\n_s(Graphs, \"ryR7mLr8YBgJ6dEcE7angTe4Nyw=\", false, function () {\n  return [useWindowDimensions];\n});\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","RenderHtml","useWindowDimensions","jsxDEV","_jsxDEV","source","html","margin","left","top","height","d","date","category","currentMetric","value","width","data","i","numCols","cellSize","Math","floor","gradientId","legendX","sales","revenue","states","state","categories","Graphs","_s","contentWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Components/Graphs.jsx"],"sourcesContent":["import React from \"react\";\nimport RenderHtml from \"react-native-render-html\";\nimport {useWindowDimensions} from \"react-native\";\n\nconst source = {\n    html: `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Auktionsstatistik</title>\n    <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js\"></script>\n\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n        .chart {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            margin: 20px;\n        }\n        .tooltip {\n            position: absolute;\n            text-align: center;\n            background: lightgrey;\n            border-radius: 4px;\n            padding: 8px;\n            font-size: 12px;\n            display: none;\n            pointer-events: none;\n        }\n\n        #controls {\n            margin: 20px;\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        #controls select, #controls button, #controls input {\n            padding: 10px 15px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            font-size: 14px;\n            cursor: pointer;\n        }\n        #controls button:hover {\n            background-color: #f0f0f0;\n        }\n        #data-overview {\n            margin-top: 20px;\n            width: 100%;\n            border-collapse: collapse;\n            font-size: 14px;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n        }\n        #data-overview th, #data-overview td {\n            border: 1px solid #ddd;\n            padding: 10px;\n            text-align: left;\n        }\n        #data-overview th {\n            background-color: #007bff;\n            color: white;\n        }\n        #data-overview tr:nth-child(even) {\n            background-color: #f9f9f9;\n        }\n        #data-overview tr:hover {\n            background-color: #f1f1f1;\n        }\n        #theme-toggle {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background-color: #FFFFFF;\n            color: #333;\n            border: none;\n            border-radius: 25px;\n            padding: 12px 16px;\n            font-size: 20px;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.3s ease-in-out;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        #theme-toggle:hover {\n            background-color: #E0A800;\n            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n            transform: translateY(-2px);\n        }\n\n\n    </style>\n</head>\n<body>\n<div id=\"controls\">\n    <select id=\"chart-type-selector\" onchange=\"updateChartType(this.value)\">\n        <option value=\"bar\">Balkendiagramm</option>\n        <option value=\"pie\">Kreisdiagramm</option>\n        <option value=\"heatmap\">Heatmap</option>\n        <option value=\"line\">Liniendiagramm</option>\n    </select>\n    <select id=\"metric-selector\" onchange=\"updateMetric(this.value)\">\n        <option value=\"sales\" selected>Nach Anzahl Verk√§ufe</option>\n        <option value=\"revenue\">Nach Umsatz</option>\n    </select>\n    <select id=\"view-selector\" onchange=\"updateView(this.value)\">\n        <option value=\"date\" selected>Nach Datum</option>\n        <option value=\"category\">Nach Kategorie</option>\n        <option value=\"state\">Nach Bundesland</option>\n    </select>\n    <select id=\"year-selector\" style=\"display: none;\" onchange=\"updateYear(this.value)\">\n        <option value=\"all\" selected>Gesamt</option>\n        <option value=\"2020\">2020</option>\n        <option value=\"2021\">2021</option>\n        <option value=\"2022\">2022</option>\n        <option value=\"2023\">2023</option>\n        <option value=\"2024\">2024</option>\n    </select>\n    <select id=\"action-selector\" onchange=\"handleActionChange(this.value)\">\n        <option value=\"\">Aktion ausw√§hlen...</option>\n        <option value=\"sort-asc\">Nach niedrigstem sortieren</option>\n        <option value=\"sort-desc\">Nach h√∂chstem sortieren</option>\n        <option value=\"filter\">alles √ºber 10 anzeigen</option>\n        <option value=\"reset\">Daten zur√ºcksetzen</option>\n        <option value=\"highlight-top\">Top 3 hervorheben</option>\n        <option value=\"show-average\">Durchschnitt anzeigen</option>\n        <option value=\"sort-category\">Nach Kategorie sortieren</option>\n    </select>\n    <select id=\"interval-selector\" onchange=\"updateChart()\">\n        <option value=\"day\">T√§glich</option>\n        <option value=\"week\">W√∂chentlich</option>\n        <option value=\"month\">Monatlich</option>\n        <option value=\"year\">J√§hrlich</option>\n    </select>\n    <div id=\"date-filter\">\n        <input type=\"date\" id=\"start-date\" placeholder=\"Startdatum\">\n        <input type=\"date\" id=\"end-date\" placeholder=\"Enddatum\">\n        <button onclick=\"filterByDate()\">Filtern</button>\n    </div>\n    <button id=\"compare-button\" onclick=\"openCompareMode()\">Vergleichen</button>\n    <button id=\"map-button\" onclick=\"openMapMode()\">Kartenansicht</button>\n    <select id=\"export-options\">\n        <option value=\"\">Exportieren...</option>\n        <option value=\"print\">Diagramme drucken</option>\n        <option value=\"csv\">Daten als CSV</option>\n        <option value=\"pdf\">Daten als PDF</option>\n    </select>\n    <button id=\"theme-toggle\">üåô</button>\n\n</div>\n\n<div id=\"average-sales\" style=\"display: none; text-align: center; margin: 20px; font-size: 18px;\">\n    <strong>Durchschnitt:</strong> <span id=\"average-sales-value\">0</span>\n</div>\n\n<div id=\"sales-chart\" class=\"chart\"></div>\n<div id=\"tooltip\" class=\"tooltip\"></div>\n<table id=\"data-overview\">\n    <thead>\n    <tr>\n        <th>Datum</th>\n        <th>Kategorie</th>\n        <th>Anzahl Verk√§ufe</th>\n        <th>Umsatz</th>\n        <th>Bundesland</th>\n    </tr>\n    </thead>\n    <tbody></tbody>\n</table>\n\n<script>\n    const width = 800;\n    const height = 400;\n    const margin = { top: 20, right: 30, bottom: 50, left: 60 };\n\n    let chartType = 'bar';\n    let currentInterval = \"day\";\n    let currentMetric = \"sales\";\n    let currentView = \"date\";\n    let selectedYear = \"all\";\n    let aggregatedData = [];\n\n\n    let dummyData = [\n        { date: \"2020-01-05\", category: \"Kunst\", sales: 5, revenue: 50000, state: \"Nieder√∂sterreich\" },\n        { date: \"2020-02-10\", category: \"Antiquit√§ten\", sales: 3, revenue: 32000, state: \"Wien\" },\n        { date: \"2020-03-15\", category: \"Kunst\", sales: 10, revenue: 15000, state: \"Steiermark\" },\n        { date: \"2020-04-20\", category: \"Schmuck\", sales: 7, revenue: 70000, state: \"Ober√∂sterreich\" },\n        { date: \"2020-05-01\", category: \"Kunst\", sales: 12, revenue: 120000, state: \"Nieder√∂sterreich\" },\n        { date: \"2021-03-10\", category: \"Schmuck\", sales: 15, revenue: 301000, state: \"Burgenland\" },\n        { date: \"2021-04-18\", category: \"Antiquit√§ten\", sales: 26, revenue: 52500, state: \"Tirol\" },\n        { date: \"2021-04-22\", category: \"Kunst\", sales: 18, revenue: 36000, state: \"K√§rnten\" },\n        { date: \"2022-05-05\", category: \"Schmuck\", sales: 19, revenue: 38000, state: \"Salzburg\" },\n        { date: \"2022-05-15\", category: \"Antiquit√§ten\", sales: 12, revenue: 24000, state: \"Vorarlberg\" },\n        { date: \"2022-06-01\", category: \"Kunst\", sales: 10, revenue: 20000, state: \"Steiermark\" },\n        { date: \"2023-06-20\", category: \"Schmuck\", sales: 35, revenue: 70000, state: \"Ober√∂sterreich\" },\n        { date: \"2023-07-10\", category: \"Antiquit√§ten\", sales: 23, revenue: 46000, state: \"Wien\" },\n        { date: \"2023-08-15\", category: \"Kunst\", sales: 41, revenue: 82000, state: \"Burgenland\" },\n        { date: \"2023-09-20\", category: \"Schmuck\", sales: 28, revenue: 56000, state: \"Tirol\" },\n        { date: \"2024-01-01\", category: \"Kunst\", sales: 50, revenue: 100000, state: \"Nieder√∂sterreich\" },\n        { date: \"2024-06-10\", category: \"Antiquit√§ten\", sales: 42, revenue: 84000, state: \"K√§rnten\" },\n        { date: \"2024-07-15\", category: \"Schmuck\", sales: 48, revenue: 96000, state: \"Vorarlberg\" },\n        { date: \"2024-10-20\", category: \"Kunst\", sales: 38, revenue: 76000, state: \"Salzburg\" }\n    ];\n\n\n    let originalData = [...dummyData];\n\n    function aggregateSales(data, interval) {\n        const grouped = d3.group(data, d => {\n            const date = new Date(d.date);\n            if (interval === \"day\") return d3.timeFormat(\"%Y-%m-%d\")(date);\n            if (interval === \"week\") return d3.timeFormat(\"%Y-W%U\")(date);\n            if (interval === \"month\") return d3.timeFormat(\"%Y-%m\")(date);\n            if (interval === \"year\") return d3.timeFormat(\"%Y\")(date);\n        });\n\n        return Array.from(grouped, ([key, values]) => ({\n            date: key,\n            value: d3.sum(values, v => v[currentMetric]), // Aggregiere nach der aktuellen Metrik\n            sales: d3.sum(values, v => v.sales), // Behalte Verk√§ufe bei\n            revenue: d3.sum(values, v => v.revenue), // Behalte Umsatz bei\n            state: Array.from(new Set(values.map(v => v.state))).join(\", \"), // Kombiniere Bundesl√§nder\n            category: Array.from(new Set(values.map(v => v.category))).join(\", \") // Kombiniere Kategorien\n        }));\n    }\n\n\n\n    document.getElementById(\"export-options\").addEventListener(\"change\", (event) => {\n        const value = event.target.value;\n        if (value === \"print\") printPage();\n        else if (value === \"csv\") exportCSV();\n        else if (value === \"pdf\") exportPDF();\n        event.target.value = \"\"; // Setze das Dropdown zur√ºck\n    });\n\n    function aggregateByCategory(data, year) {\n        let filteredData = data;\n\n        if (year !== \"all\") {\n            filteredData = data.filter(d => new Date(d.date).getFullYear() === parseInt(year));\n        }\n\n        const grouped = d3.group(filteredData, d => d.category);\n\n        return Array.from(grouped, ([category, values]) => ({\n            category,\n            value: d3.sum(values, v => v[currentMetric]), // Summiere Verk√§ufe oder Umsatz basierend auf der aktuellen Metrik\n            sales: d3.sum(values, v => v.sales),\n            revenue: d3.sum(values, v => v.revenue),\n            states: Array.from(new Set(values.map(v => v.state))).join(\", \")\n        }));\n    }\n\n    function aggregateByState(data, year = \"all\") {\n        let filteredData = data;\n\n        // Nach Jahr filtern, falls ein bestimmtes Jahr ausgew√§hlt ist\n        if (year !== \"all\") {\n            filteredData = data.filter(d => new Date(d.date).getFullYear() === parseInt(year));\n        }\n\n        const grouped = d3.group(filteredData, d => d.state);\n\n        return Array.from(grouped, ([state, values]) => ({\n            state,\n            value: d3.sum(values, v => v[currentMetric]), // Summiere Verk√§ufe oder Umsatz\n            sales: d3.sum(values, v => v.sales),\n            revenue: d3.sum(values, v => v.revenue),\n            categories: Array.from(new Set(values.map(v => v.category))).join(\", \")\n        }));\n    }\n\n    function updateChartAndTableByState() {\n        const aggregatedData = aggregateByState(originalData, selectedYear);\n        renderTable(aggregatedData, \"state\"); // Tabelle f√ºr Bundesl√§nder\n        renderChart(aggregatedData); // Diagramm f√ºr Bundesl√§nder\n    }\n\n    function renderChart(data, highlight = false) {\n        d3.select(\"#sales-chart\").select(\"svg\").remove();\n\n        const axisField = currentView === \"state\" ? \"state\" : currentView === \"category\" ? \"category\" : \"date\";\n\n        if (chartType === 'bar') {\n            renderBarChart(data.map(d => ({ date: d[axisField], ...d })), highlight);\n        } else if (chartType === 'pie') {\n            renderPieChart(data.map(d => ({ date: d[axisField], ...d }))); // Hier axisField f√ºr Konsistenz nutzen\n        } else if (chartType === 'heatmap') {\n            renderHeatmap(data);\n        } else if (chartType === 'line') {\n            renderLineChart(data.map(d => ({ date: d[axisField], ...d }))); // Hier axisField f√ºr Konsistenz nutzen\n        }\n    }\n\n    function renderBarChart(data, highlight = false) {\n        const svg = d3.select(\"#sales-chart\")\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \\`translate(${margin.left},${margin.top})\\`);\n\n        const x = d3.scaleBand()\n            .domain(data.map(d => d.date))\n            .range([0, width])\n            .padding(0.2);\n\n        const y = d3.scaleLinear()\n            .domain([0, d3.max(data, d => d.value)]) // Verwende die aktuelle Metrik\n            .nice()\n            .range([height, 0]);\n\n        const tooltip = d3.select(\"#tooltip\");\n\n        svg.append(\"g\")\n            .attr(\"transform\", \\`translate(0,${height})\\`)\n            .call(d3.axisBottom(x).tickFormat(d => d))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        svg.append(\"g\").call(d3.axisLeft(y));\n\n        svg.selectAll(\".bar\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", d => x(d.date))\n            .attr(\"y\", d => y(d.value)) // Verwende die aktuelle Metrik\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", d => height - y(d.value)) // Verwende die aktuelle Metrik\n            .attr(\"fill\", d => d.highlight ? \"orange\" : \"steelblue\")\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this)\n                    .raise()\n                    .transition()\n                    .duration(200)\n                    .attr(\"fill\", d.highlight ? \"orange\" : \"#00008B\")\n                    .attr(\"width\", x.bandwidth() * 1.2)\n                    .attr(\"x\", d => x(d.date) - x.bandwidth() * 0.1);\n                tooltip.style(\"display\", \"block\")\n                    .html(\\`<strong>Datum:</strong> ${d.date}<br>\n                       <strong>Kategorie:</strong> ${d.category}<br>\n                       <strong>${currentMetric === \"sales\" ? \"Verk√§ufe\" : \"Umsatz\"}:</strong> ${d.value}\\`)\n                    .style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mousemove\", (event) => {\n                tooltip.style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mouseout\", function (event, d) {\n                d3.select(this)\n                    .transition()\n                    .duration(200)\n                    .attr(\"fill\", d.highlight ? \"orange\" : \"steelblue\")\n                    .attr(\"width\", x.bandwidth())\n                    .attr(\"x\", d => x(d.date));\n                tooltip.style(\"display\", \"none\");\n            });\n    }\n\n    function renderPieChart(data) {\n        const svg = d3.select(\"#sales-chart\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\")\n            .attr(\"transform\", \\`translate(${width / 2}, ${height / 2})\\`);\n\n        const radius = Math.min(width, height) / 2 - margin.top;\n\n        const pie = d3.pie().value(d => d.value); // Verwende die aktuelle Metrik\n        const arc = d3.arc().innerRadius(0).outerRadius(radius);\n\n        const tooltip = d3.select(\"#tooltip\");\n\n        const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n        svg.selectAll('path')\n            .data(pie(data))\n            .enter()\n            .append('path')\n            .attr('d', arc)\n            .attr('fill', d => d.highlight ? \"orange\" : color(d.data.date))\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this)\n                    .raise()\n                    .transition()\n                    .duration(200)\n                    .attr('d', d3.arc().innerRadius(0).outerRadius(radius + 20));\n                tooltip.style(\"display\", \"block\")\n                    .html(\\`<strong>Datum:</strong> ${d.data.date}<br>\n                       <strong>Kategorie:</strong> ${d.data.category}<br>\n                       <strong>${currentMetric === \"sales\" ? \"Verk√§ufe\" : \"Umsatz\"}:</strong> ${d.data.value}\\`)\n                    .style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mousemove\", (event) => {\n                tooltip.style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mouseout\", function (event, d) {\n                d3.select(this)\n                    .transition()\n                    .duration(200)\n                    .attr('d', arc);\n                tooltip.style(\"display\", \"none\");\n            });\n    }\n\n    function renderHeatmap(data) {\n        const svg = d3.select(\"#sales-chart\")\n            .append(\"svg\")\n            .attr(\"width\", width + 100) // Platz f√ºr die Farblegende rechts\n            .attr(\"height\", height + 50); // Platz f√ºr Achsenbeschriftungen\n\n        const colorScale = d3.scaleSequential(d3.interpolateBlues)\n            .domain([0, d3.max(data, d => d.value)]); // Verwende die aktuelle Metrik\n\n        const tooltip = d3.select(\"#tooltip\");\n\n        // Spalten und Zeilen definieren\n        const numCols = Math.ceil(Math.sqrt(data.length));\n        const numRows = Math.ceil(data.length / numCols);\n\n        const cellSize = Math.min(width / numCols, (height - 50) / numRows); // Dynamische Zellenberechnung\n\n        // Heatmap-Zellen\n        const cells = svg.selectAll(\"g.cell\")\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"cell\")\n            .attr(\"transform\", (d, i) => \\`translate(${(i % numCols) * cellSize}, ${Math.floor(i / numCols) * cellSize + 20})\\`); // +20 f√ºr Beschriftungen oben\n\n        // Rechtecke der Zellen\n        cells.append(\"rect\")\n            .attr(\"width\", cellSize - 2) // Zellen mit etwas Abstand\n            .attr(\"height\", cellSize - 2)\n            .attr(\"fill\", d => d.highlight ? \"orange\" : colorScale(d.value)) // Orange f√ºr hervorgehobene Felder\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this)\n                    .raise() // Bringt das Rechteck nach vorne\n                    .transition()\n                    .duration(200)\n                    .attr(\"fill\", d.highlight ? \"orange\" : \"#00008B\"); // Hervorgehobene Farbe\n                tooltip.style(\"display\", \"block\")\n                    .html(\\`<strong>Datum:</strong> ${d.date}<br>\n                       <strong>Kategorie:</strong> ${d.category}<br>\n                       <strong>${currentMetric === \"sales\" ? \"Verk√§ufe\" : \"Umsatz\"}:</strong> ${d.value}\\`)\n                    .style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mousemove\", (event) => {\n                tooltip.style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mouseout\", function (event, d) {\n                d3.select(this)\n                    .transition()\n                    .duration(200)\n                    .attr(\"fill\", d.highlight ? \"orange\" : colorScale(d.value)); // R√ºckkehr zur Originalfarbe\n                tooltip.style(\"display\", \"none\");\n            });\n\n        // Beschriftungen f√ºr die Spalten (oben)\n        const columnLabels = svg.append(\"g\")\n            .selectAll(\"text\")\n            .data(data.slice(0, numCols)) // Erste Zeile als Spaltenbeschriftung\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", (d, i) => i * cellSize + (cellSize / 2)) // Zentriert √ºber den Spalten\n            .attr(\"y\", 15) // Platz oberhalb der Zellen\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"font-weight\", \"bold\")\n            .text(d => d.date); // Hier Datum oder andere Spalten√ºberschrift\n\n        // Beschriftungen f√ºr die Reihen (links)\n        const rowLabels = svg.append(\"g\")\n            .selectAll(\"text\")\n            .data(data.filter((_, i) => i % numCols === 0)) // Erste Spalte als Reihenbeschriftung\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", -10) // Platz links der Zellen\n            .attr(\"y\", (d, i) => i * cellSize + cellSize / 1.5 + 20) // Zentriert auf den Reihen\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"font-weight\", \"bold\")\n            .text(d => d.category); // Kategorie oder andere Reihen√ºberschrift\n\n        // Vertikale Farblegende\n        const legendHeight = 200;\n        const legendX = width + 20; // Rechts von der Heatmap\n        const legendY = (height - legendHeight) / 2;\n\n        const legendScale = d3.scaleLinear()\n            .domain([d3.max(data, d => d.value), 0]) // Dunkel oben, hell unten\n            .range([legendY, legendY + legendHeight]);\n\n        const legendAxis = d3.axisRight(legendScale)\n            .ticks(5);\n\n        const gradientId = \"heatmap-vertical-gradient\";\n\n        // Farbverlauf f√ºr die vertikale Legende definieren\n        const defs = svg.append(\"defs\");\n        const gradient = defs.append(\"linearGradient\")\n            .attr(\"id\", gradientId)\n            .attr(\"x1\", \"0%\")\n            .attr(\"x2\", \"0%\")\n            .attr(\"y1\", \"0%\")\n            .attr(\"y2\", \"100%\");\n\n        gradient.append(\"stop\")\n            .attr(\"offset\", \"0%\")\n            .attr(\"stop-color\", d3.interpolateBlues(1)); // Dunkelblau oben\n\n        gradient.append(\"stop\")\n            .attr(\"offset\", \"100%\")\n            .attr(\"stop-color\", d3.interpolateBlues(0)); // Hellblau unten\n\n        svg.append(\"rect\")\n            .attr(\"x\", legendX)\n            .attr(\"y\", legendY)\n            .attr(\"width\", 20)\n            .attr(\"height\", legendHeight)\n            .style(\"fill\", \\`url(#${gradientId})\\`);\n\n        svg.append(\"g\")\n            .attr(\"transform\", \\`translate(${legendX + 20}, 0)\\`)\n            .call(legendAxis);\n    }\n\n    function renderLineChart(data) {\n        const svg = d3.select(\"#sales-chart\")\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \\`translate(${margin.left},${margin.top})\\`);\n\n        const x = d3.scalePoint()\n            .domain(data.map(d => d.date))\n            .range([0, width]);\n\n        const y = d3.scaleLinear()\n            .domain([0, d3.max(data, d => d.value)]) // Nutze die aktuelle Metrik\n            .nice()\n            .range([height, 0]);\n\n        const line = d3.line()\n            .x(d => x(d.date))\n            .y(d => y(d.value)); // Nutze die aktuelle Metrik\n\n        svg.append(\"g\")\n            .attr(\"transform\", \\`translate(0,${height})\\`)\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        svg.append(\"g\").call(d3.axisLeft(y));\n\n        svg.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", line);\n\n        const tooltip = d3.select(\"#tooltip\");\n\n        svg.selectAll(\"circle\")\n            .data(data)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", d => x(d.date))\n            .attr(\"cy\", d => y(d.value)) // Nutze die aktuelle Metrik\n            .attr(\"r\", 5)\n            .attr(\"fill\", \"steelblue\")\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this)\n                    .raise()\n                    .transition()\n                    .duration(200)\n                    .attr(\"r\", 8)\n                    .attr(\"fill\", \"orange\");\n                tooltip.style(\"display\", \"block\")\n                    .html(\\`<strong>Datum:</strong> ${d.date}<br>\n                       <strong>Kategorie:</strong> ${d.category}<br>\n                       <strong>${currentMetric === \"sales\" ? \"Verk√§ufe\" : \"Umsatz\"}:</strong> ${d.value}\\`)\n                    .style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mousemove\", (event) => {\n                tooltip.style(\"left\", (event.pageX + 10) + \"px\")\n                    .style(\"top\", (event.pageY - 20) + \"px\");\n            })\n            .on(\"mouseout\", function () {\n                d3.select(this)\n                    .transition()\n                    .duration(200)\n                    .attr(\"r\", 5)\n                    .attr(\"fill\", \"steelblue\");\n                tooltip.style(\"display\", \"none\");\n            });\n    }\n\n    function updateMetric(metric) {\n        currentMetric = metric;\n        refreshView();\n    }\n\n    function updateView(view) {\n        currentView = view;\n        refreshView();\n    }\n    function updateYear(year) {\n        selectedYear = year;\n        refreshView();\n    }\n\n    function updateChartAndTableByCategory() {\n        const aggregatedData = aggregateByCategory(originalData, selectedYear);\n        renderTable(aggregatedData, \"category\"); // Tabelle f√ºr Kategorien\n        renderChart(aggregatedData); // Diagramm f√ºr Kategorien\n    }\n\n    function updateChartType(type) {\n        chartType = type;\n        refreshView();\n    }\n\n    function refreshView() {\n        // Sichtbarkeit der Dropdowns steuern\n        const dateFilter = document.getElementById(\"date-filter\");\n\n        if (currentView === \"date\") {\n            document.getElementById(\"interval-selector\").style.display = \"inline-block\"; // Sichtbar f√ºr Datum\n            document.getElementById(\"year-selector\").style.display = \"none\"; // Versteckt f√ºr Datum\n            dateFilter.style.display = \"inline-block\"; // Datumsfilter anzeigen\n            aggregatedData = aggregateSales(originalData, currentInterval); // Aggregation f√ºr Datum\n            renderTable(aggregatedData, \"date\"); // Tabelle aktualisieren\n        } else {\n            document.getElementById(\"interval-selector\").style.display = \"none\"; // Versteckt f√ºr andere Ansichten\n            document.getElementById(\"year-selector\").style.display = \"inline-block\"; // Sichtbar f√ºr Kategorie/Bundesland\n            dateFilter.style.display = \"none\"; // Datumsfilter verstecken\n\n            if (currentView === \"category\") {\n                aggregatedData = aggregateByCategory(originalData, selectedYear); // Aggregation f√ºr Kategorie\n                renderTable(aggregatedData, \"category\"); // Tabelle aktualisieren\n            } else if (currentView === \"state\") {\n                aggregatedData = aggregateByState(originalData, selectedYear); // Aggregation f√ºr Bundesland\n                renderTable(aggregatedData, \"state\"); // Tabelle aktualisieren\n            }\n        }\n\n        // Diagramm basierend auf aggregierten Daten aktualisieren\n        renderChart(aggregatedData);\n    }\n\n    function handleActionChange(action) {\n        if (action === \"sort-asc\") sortData(\"asc\");\n        if (action === \"sort-desc\") sortData(\"desc\");\n        if (action === \"filter\") filterData();\n        if (action === \"reset\") resetData(); // Hier wird resetData aufgerufen\n        if (action === \"highlight-top\") highlightTopThree();\n        if (action === \"show-average\") showAverageValue();\n        if (action === \"sort-category\" && currentView === \"category\") sortByCategory();\n\n        document.getElementById(\"action-selector\").value = \"\"; // Dropdown zur√ºcksetzen\n    }\n\n\n    function updateChart() {\n        const interval = document.getElementById(\"interval-selector\").value;\n        currentInterval = interval; // Speichert das aktuelle Intervall\n\n        if (currentView === \"date\") {\n            const aggregatedData = aggregateSales(originalData, interval);\n            renderTable(aggregatedData, \"date\");\n            renderChart(aggregatedData);\n        }\n    }\n\n    function sortByCategory() {\n        aggregatedData.sort((a, b) => a.category.localeCompare(b.category));\n        renderTable(aggregatedData);\n        renderChart(aggregatedData);\n    }\n\n\n    function sortData(order) {\n        aggregatedData.sort((a, b) => {\n            if (order === \"asc\") {\n                return a.value - b.value; // Sortieren nach der aktuellen Metrik\n            } else {\n                return b.value - a.value;\n            }\n        });\n        renderTable(aggregatedData, currentView); // Tabelle aktualisieren\n        renderChart(aggregatedData); // Diagramm aktualisieren\n    }\n\n\n    function filterData() {\n        aggregatedData = aggregatedData.filter(d => d.value > 10); // Filter auf die aktuelle Metrik anwenden\n        renderTable(aggregatedData, currentView);\n        renderChart(aggregatedData);\n    }\n\n\n    function resetData() {\n        if (currentView === \"state\") {\n            aggregatedData = aggregateByState(originalData, selectedYear);\n            renderTable(aggregatedData, \"state\");\n        } else if (currentView === \"category\") {\n            aggregatedData = aggregateByCategory(originalData, selectedYear);\n            renderTable(aggregatedData, \"category\");\n        } else {\n            aggregatedData = aggregateSales(originalData, currentInterval);\n            renderTable(aggregatedData, \"date\");\n        }\n        renderChart(aggregatedData);\n    }\n\n\n    function highlightTopThree() {\n        aggregatedData = aggregatedData.map(d => ({ ...d, highlight: false }));\n        const topThree = [...aggregatedData].sort((a, b) => b.value - a.value).slice(0, 3); // Nach aktueller Metrik sortieren\n        topThree.forEach(d => d.highlight = true);\n        renderTable(aggregatedData, currentView);\n        renderChart(aggregatedData, true);\n    }\n\n    function showAverageValue() {\n        const average = d3.mean(aggregatedData, d => d.value); // Durchschnitt der aktuellen Metrik berechnen\n        document.getElementById(\"average-sales-value\").textContent = average.toFixed(2);\n        document.getElementById(\"average-sales\").style.display = \"block\";\n    }\n\n    function filterByDate() {\n        const startDateInput = document.getElementById(\"start-date\").value;\n        const endDateInput = document.getElementById(\"end-date\").value;\n\n        if (!startDateInput || !endDateInput) {\n            alert(\"Bitte Start- und Enddatum ausw√§hlen.\");\n            return;\n        }\n\n        const startDate = new Date(startDateInput);\n        const endDate = new Date(endDateInput);\n\n        if (startDate > endDate) {\n            alert(\"Das Startdatum muss vor dem Enddatum liegen.\");\n            return;\n        }\n\n        // Filtern der Daten basierend auf dem Datum\n        const filteredData = originalData.filter(d => {\n            const date = new Date(d.date);\n            return date >= startDate && date <= endDate;\n        });\n\n        // Aktualisieren der Tabelle und des Diagramms\n        aggregatedData = aggregateSales(filteredData, currentInterval);\n        renderTable(aggregatedData, \"date\");\n        renderChart(aggregatedData);\n    }\n\n\n    function updateTableHeaders(groupBy = \"date\") {\n        const tableHead = d3.select(\"#data-overview thead\");\n        tableHead.selectAll(\"tr\").remove(); // Alte √úberschriften entfernen\n\n        let headers = [];\n        if (groupBy === \"category\") {\n            headers = [\"Kategorie\", \"Anzahl Verk√§ufe\", \"Umsatz\", \"Bundesl√§nder\"];\n        } else if (groupBy === \"state\") {\n            headers = [\"Bundesland\", \"Kategorien\", \"Anzahl Verk√§ufe\", \"Umsatz\"];\n        } else {\n            // Default: Nach Datum gruppiert\n            headers = [\"Datum\", \"Kategorie\", \"Anzahl Verk√§ufe\", \"Umsatz\", \"Bundesland\"];\n        }\n\n        // Neue √úberschriften hinzuf√ºgen\n        tableHead.append(\"tr\")\n            .selectAll(\"th\")\n            .data(headers)\n            .enter()\n            .append(\"th\")\n            .text(d => d);\n    }\n\n    function renderTable(data, groupBy = \"date\") {\n        updateTableHeaders(groupBy); // √úberschriften aktualisieren\n\n        const tbody = d3.select(\"#data-overview tbody\");\n        tbody.selectAll(\"tr\").remove();\n\n        tbody.selectAll(\"tr\")\n            .data(data)\n            .enter()\n            .append(\"tr\")\n            .attr(\"class\", d => d.highlight ? \"highlight\" : \"\")\n            .html(d => {\n                if (groupBy === \"category\") {\n                    return \\`\n                    <td>${d.category || ''}</td>\n                    <td>${d.sales || ''}</td>\n                    <td>${d.revenue || ''}</td>\n                    <td>${d.states || ''}</td>\n                \\`;\n                } else if (groupBy === \"state\") {\n                    return \\`\n                    <td>${d.state || ''}</td>\n                    <td>${d.categories || ''}</td>\n                    <td>${d.sales || ''}</td>\n                    <td>${d.revenue || ''}</td>\n                \\`;\n                } else {\n                    // Default: Nach Datum gruppiert\n                    return \\`\n                    <td>${d.date || ''}</td>\n                    <td>${d.category || ''}</td>\n                    <td>${d.sales || ''}</td>\n                    <td>${d.revenue || ''}</td>\n                    <td>${d.state || ''}</td>\n                \\`;\n                }\n            });\n    }\n\n\n\n    // Initial render\n    aggregatedData = aggregateSales(originalData, \"day\");\n    renderTable(aggregatedData);\n    renderChart(aggregatedData);\n    document.getElementById(\"year-selector\").style.display = \"none\"; // Standardm√§√üig ausblenden\n    document.getElementById(\"interval-selector\").style.display = \"inline-block\"; // Standardm√§√üig anzeigen\n\n    function printPage() {\n        window.print();\n    }\n    function exportCSV() {\n        // Erstelle den Header der CSV-Datei\n        const csvHeader = \"Datum,Kategorie,Verk√§ufe,Umsatz,Bundesland\\\\n\";\n\n        // F√ºge die Daten aus aggregatedData hinzu\n        const csvRows = aggregatedData.map(d =>\n            \\`${d.date},${d.category},${d.sales},${d.revenue},${d.state}\\`\n        ).join(\"\\\\n\");\n\n        // Kombiniere den Header und die Daten\n        const csvContent = \"data:text/csv;charset=utf-8,\" + csvHeader + csvRows;\n\n        // Erstelle eine Download-URL f√ºr die CSV-Datei\n        const encodedUri = encodeURI(csvContent);\n\n        // Erstelle einen tempor√§ren Link, um die Datei herunterzuladen\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"data.csv\");\n\n        // F√ºge den Link zum Dokument hinzu, klicke darauf, und entferne ihn danach\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    function exportPDF() {\n        const { jsPDF } = window.jspdf;\n\n        // W√§hle den gesamten sichtbaren Bereich aus\n        const element = document.body;\n\n        html2canvas(element, { scale: 2 }).then(canvas => {\n            const imgData = canvas.toDataURL(\"image/png\");\n            const pdf = new jsPDF('p', 'mm', 'a4');\n            const pdfWidth = pdf.internal.pageSize.getWidth();\n            const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\n\n            pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\n            pdf.save('statistics.pdf'); // PDF herunterladen\n        });\n    }\n\n    function openCompareMode() {\n        const compareButton = document.getElementById(\"compare-button\");\n        compareButton.style.display = \"none\";\n        window.location.href = \"compare.html\";\n        console.log(\"Versuche, zur Vergleichsseite zu navigieren...\");\n    }\n\n    function openMapMode() {\n        const mapButton = document.getElementById(\"map-button\");\n        mapButton.style.display = \"none\"; // Button verstecken\n        window.location.href = \"map.html\"; // Wechsel zur Map-Datei\n        console.log(\"Versuche, zur Map zu navigieren...\");\n    }\n    function hideElementsForCompareMode() {\n        const urlParams = new URLSearchParams(window.location.search);\n        if (urlParams.get('compare') === 'true') {\n            document.getElementById(\"compare-button\").style.display = \"none\";\n            document.getElementById(\"export-options\").style.display = \"none\";\n            document.getElementById(\"theme-toggle\").style.display = \"none\";\n        }\n    }\n    let darkMode = false;\n    function toggleTheme() {\n        darkMode = !darkMode;\n        document.body.style.backgroundColor = darkMode ? \"#121212\" : \"#ffffff\";\n        document.body.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n\n        const controls = document.getElementById(\"controls\");\n        controls.style.backgroundColor = darkMode ? \"#222\" : \"#f9f9f9\";\n        controls.style.borderBottom = darkMode ? \"1px solid #444\" : \"1px solid #ccc\";\n\n        const tableHeaders = document.querySelectorAll(\"#data-overview th\");\n        tableHeaders.forEach(header => {\n            header.style.backgroundColor = darkMode ? \"#0844A4\" : \"#007bff\";\n            header.style.color = darkMode ? \"#ffffff\" : \"#ffffff\";\n        });\n\n        const tableCells = document.querySelectorAll(\"#data-overview td\");\n        tableCells.forEach(cell => {\n            cell.style.backgroundColor = darkMode ? \"#222\" : \"#ffffff\";\n            cell.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n        });\n\n        const buttons = document.querySelectorAll(\"#controls button\");\n        buttons.forEach(button => {\n            button.style.backgroundColor = darkMode ? \"#0844A4\" : \"#f9f9f9\";\n            button.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n        });\n\n        const dropdowns = document.querySelectorAll(\"#controls select\");\n        dropdowns.forEach(select => {\n            select.style.backgroundColor = darkMode ? \"#222\" : \"#ffffff\";\n            select.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n            select.style.border = darkMode ? \"1px solid #444\" : \"1px solid #ccc\";\n        });\n\n        const inputs = document.querySelectorAll(\"input\");\n        inputs.forEach(input => {\n            input.style.backgroundColor = darkMode ? \"#222\" : \"#ffffff\";\n            input.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n            input.style.border = darkMode ? \"1px solid #444\" : \"1px solid #ccc\";\n        });\n\n        // Tooltip\n        const tooltip = document.getElementById(\"tooltip\");\n        if (tooltip) {\n            tooltip.style.backgroundColor = darkMode ? \"#333\" : \"lightgrey\";\n            tooltip.style.color = darkMode ? \"#ffffff\" : \"#000000\";\n        }\n\n        const svgElements = document.querySelectorAll(\"svg\");\n        svgElements.forEach(svg => {\n            svg.style.backgroundColor = darkMode ? \"#121212\" : \"#ffffff\";\n        });\n\n        const themeToggle = document.getElementById(\"theme-toggle\");\n        themeToggle.textContent = darkMode ? \"‚òÄÔ∏è\" : \"üåô\";\n        themeToggle.style.backgroundColor = darkMode ? \"#0844A4\" : \"#FFFFFF\";\n        themeToggle.style.color = darkMode ? \"#FFFFFF\" : \"#333\";\n    }\n    document.getElementById(\"theme-toggle\").addEventListener(\"click\", toggleTheme);\n\n    document.addEventListener(\"DOMContentLoaded\", hideElementsForCompareMode);\n\n    // Add an event listener to handle postMessage for Darkmode\n    window.addEventListener(\"message\", (event) => {\n        if (event.data.theme === \"dark\") {\n            if (!darkMode) toggleTheme(); // Activate Darkmode\n        } else if (event.data.theme === \"light\") {\n            if (darkMode) toggleTheme(); // Deactivate Darkmode\n        }\n    });\n\n\n</script>\n</body>\n</html>`\n};\nconst Graphs = () => {\n    const { width } = useWindowDimensions();\n    return (\n        <RenderHtml\n            contentWidth={width}\n            source={source}\n        />\n    );\n}\n\n\nexport default Graphs;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAAQC,mBAAmB,QAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,MAAM,GAAG;EACXC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6CC,MAAM,CAACC,IAAI,IAAID,MAAM,CAACE,GAAG;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+CC,MAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsDC,CAAC,CAACC,IAAI;AAC5D,qDAAqDD,CAAC,CAACE,QAAQ;AAC/D,iCAAiCC,aAAa,KAAK,OAAO,GAAG,UAAU,GAAG,QAAQ,cAAcH,CAAC,CAACI,KAAK;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6CC,KAAK,GAAG,CAAC,KAAKN,MAAM,GAAG,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsDC,CAAC,CAACM,IAAI,CAACL,IAAI;AACjE,qDAAqDD,CAAC,CAACM,IAAI,CAACJ,QAAQ;AACpE,iCAAiCC,aAAa,KAAK,OAAO,GAAG,UAAU,GAAG,QAAQ,cAAcH,CAAC,CAACM,IAAI,CAACF,KAAK;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAwDG,CAAC,GAAGC,OAAO,GAAIC,QAAQ,KAAKC,IAAI,CAACC,KAAK,CAACJ,CAAC,GAAGC,OAAO,CAAC,GAAGC,QAAQ,GAAG,EAAE;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsDT,CAAC,CAACC,IAAI;AAC5D,qDAAqDD,CAAC,CAACE,QAAQ;AAC/D,iCAAiCC,aAAa,KAAK,OAAO,GAAG,UAAU,GAAG,QAAQ,cAAcH,CAAC,CAACI,KAAK;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoCQ,UAAU;AAC9C;AACA;AACA,6CAA6CC,OAAO,GAAG,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6CjB,MAAM,CAACC,IAAI,IAAID,MAAM,CAACE,GAAG;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+CC,MAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsDC,CAAC,CAACC,IAAI;AAC5D,qDAAqDD,CAAC,CAACE,QAAQ;AAC/D,iCAAiCC,aAAa,KAAK,OAAO,GAAG,UAAU,GAAG,QAAQ,cAAcH,CAAC,CAACI,KAAK;AACvc,KAAK,IAAI,EAAE;AACvC,0BAA0Bd,CAAC,CAACe,OAAO,IAAI,EAAE;AACzC,0BAA0Bf,CAAC,CAACgB,MAAM,IAAI,EAAE;AACxC;AACA;AACA;AACA,0BAA0BhB,CAAC,CAACiB,KAAK,IAAI,EAAE;AACvC,0BAA0BjB,CAAC,CAACkB,UAAU,IAAI,EAAE;AAC5C,0BAA0BlB,CAAC,CAACc,KAAK,IAAI,EAAE;AACvC,0BAA0Bd,CAAC,CAACe,OAAO,IAAI,EAAE;AACzC;AACA;AACA;AACA;AACA,0BAA0Bf,CAAC,CAACC,IAAI,IAAI,EAAE;AACtC,0BAA0BD,CAAC,CAACE,QAAQ,IAAI,EAAE;AAC1C,0BAA0BF,CAAC,CAACc,KAAK,IAAI,EAAE;AACvC,0BAA0Bd,CAAC,CAACe,OAAO,IAAI,EAAE;AACzC,0BAA0Bf,CAAC,CAACiB,KAAK,IAAI,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgBjB,CAAC,CAACC,IAAI,IAAID,CAAC,CAACE,QAAQ,IAAIF,CAAC,CAACc,KAAK,IAAId,CAAC,CAACe,OAAO,IAAIf,CAAC,CAACiB,KAAK;AACvjB,MAAM;IAAEf;EAAM,CAAC,GAAGd,mBAAmB,CAAC,CAAC;EACvC,oBACIE,OAAA,CAACH,UAAU;IACP+B,YAAY,EAAEhB,KAAM;IACpBX,MAAM,EAAEA;EAAO;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV,CAAC;AAAAL,EAAA,CARKD,MAAM;EAAA,QACU5B,mBAAmB;AAAA;AAAAmC,EAAA,GADnCP,MAAM;AAWZ,eAAeA,MAAM;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}