{"ast":null,"code":"import Adresse from './Classes/Adresse.js';\nimport Person from './Classes/Person.js';\nimport Betreuer from './Classes/Betreuer.js';\nimport Einbringer from './Classes/Einbringer.js';\nimport Exponat from './Classes/Exponat.js';\nimport Kaeufer from './Classes/Kaeufer.js';\nimport Kuenstler from './Classes/Kuenstler.js';\nimport Vermittler from './Classes/Vermittler.js';\nimport Dokument from './Classes/Dokument.js';\nimport { Sprache, Anrede, Land, Waehrung, Steuertyp, Grad } from './Classes/Enums.js';\n\n// Importiere alle API-Funktionen aus fetchAndRead.js\nimport { fetchData, postData, updateData, deleteData } from './fetchAndRead.js';\n\n// Definiere die API-Endpunkte\nconst ENDPOINTS = {\n  PERSONS: '/persons',\n  BETREUER: '/betreuer',\n  EINBRINGER: '/einbringer',\n  EXPONATE: '/exponate',\n  KAEUFER: '/kaeufer',\n  KUENSTLER: '/kuenstler',\n  VERMITTLER: '/vermittler',\n  DOKUMENTE: '/dokumente'\n};\n\n/**\n * ApiService\n * Bietet zentrale Funktionen zum Arbeiten mit dem Backend.\n */\nclass ApiService {\n  // Fetch-Funktionen für verschiedene Ressourcen\n  static async fetchPersons() {\n    return fetchData(ENDPOINTS.PERSONS);\n  }\n  static async fetchBetreuer() {\n    return fetchData(ENDPOINTS.BETREUER);\n  }\n  static async fetchEinbringer() {\n    return fetchData(ENDPOINTS.EINBRINGER);\n  }\n  static async fetchExponate() {\n    return fetchData(ENDPOINTS.EXPONATE);\n  }\n  static async fetchKaeufer() {\n    return fetchData(ENDPOINTS.KAEUFER);\n  }\n  static async fetchKuenstler() {\n    return fetchData(ENDPOINTS.KUENSTLER);\n  }\n  static async fetchVermittler() {\n    return fetchData(ENDPOINTS.VERMITTLER);\n  }\n  static async fetchDokumente() {\n    return fetchData(ENDPOINTS.DOKUMENTE);\n  }\n\n  // Testfunktion: Daten abrufen und in der Konsole ausgeben\n  static async runTest() {\n    console.log(\"Running API Service Test...\");\n    try {\n      // Test: Parallelisierte Abrufe\n      const [persons, exponate, kuenstler] = await Promise.allSettled([this.fetchPersons(), this.fetchExponate(), this.fetchKuenstler()]);\n      if (persons.status === 'fulfilled') {\n        console.log(\"Personen-Daten:\", persons.value);\n      } else {\n        console.error(\"Fehler bei Personen:\", persons.reason);\n      }\n      if (exponate.status === 'fulfilled') {\n        console.log(\"Exponate-Daten:\", exponate.value);\n      } else {\n        console.error(\"Fehler bei Exponaten:\", exponate.reason);\n      }\n      if (kuenstler.status === 'fulfilled') {\n        console.log(\"Künstler-Daten:\", kuenstler.value);\n      } else {\n        console.error(\"Fehler bei Künstlern:\", kuenstler.reason);\n      }\n    } catch (error) {\n      console.error(\"Allgemeiner Fehler:\", error);\n    }\n  }\n\n  // Neue Hilfsfunktion: Abrufen und Loggen von Daten\n  static async fetchAndLog(type, fetchFunction) {\n    try {\n      const response = await fetchFunction();\n      if (!Array.isArray(response)) {\n        console.warn(`${type} API hat kein Array zurückgegeben:`, response);\n        return [];\n      }\n      console.log(`${type} Response:`, response);\n      return response;\n    } catch (error) {\n      console.error(`Fehler beim Abrufen von ${type}:`, error);\n      return [];\n    }\n  }\n\n  // Alle Personen von verschiedenen Endpunkten abrufen\n  static async fetchAllPersons() {\n    try {\n      const vermittler = await this.fetchAndLog(\"Vermittler\", this.fetchVermittler);\n      const einbringer = await this.fetchAndLog(\"Einbringer\", this.fetchEinbringer);\n      const betreuer = await this.fetchAndLog(\"Betreuer\", this.fetchBetreuer);\n      const allPersons = [...this.sanitizePersons(vermittler, \"Vermittler\"), ...this.sanitizePersons(einbringer, \"Einbringer\"), ...this.sanitizePersons(betreuer, \"Betreuer\")];\n      console.log(\"Zusammengeführte Personenliste:\", allPersons);\n      return allPersons;\n    } catch (error) {\n      console.error(\"Fehler beim Abrufen der Personen:\", error);\n      throw error;\n    }\n  }\n\n  // Datenbereinigung und Strukturierung\n  static sanitizePersons(persons, type) {\n    if (!Array.isArray(persons)) {\n      console.warn(`Erwartete ein Array, aber erhalten:`, persons);\n      return [];\n    }\n    return persons.map(person => {\n      var _person$email, _person$adresse, _person$adresse2, _person$adresse3;\n      return {\n        id: person.id,\n        vorname: person.vorname || \"Unbekannt\",\n        nachname: person.nachname || \"Unbekannt\",\n        email: ((_person$email = person.email) === null || _person$email === void 0 ? void 0 : _person$email.address) || \"Keine Email\",\n        telefon: person.tel || \"Keine Telefonnummer\",\n        adresse: `${((_person$adresse = person.adresse) === null || _person$adresse === void 0 ? void 0 : _person$adresse.strasse) || \"\"}, ${((_person$adresse2 = person.adresse) === null || _person$adresse2 === void 0 ? void 0 : _person$adresse2.ort) || \"\"}, ${((_person$adresse3 = person.adresse) === null || _person$adresse3 === void 0 ? void 0 : _person$adresse3.land) || \"\"}`,\n        typ: type\n      };\n    });\n  }\n}\n\n// Exportiere ApiService und alle Enums und Modelle\nexport default ApiService;\nexport { Adresse, Person, Betreuer, Einbringer, Exponat, Kaeufer, Kuenstler, Vermittler, Dokument, Sprache, Anrede, Land, Waehrung, Steuertyp, Grad };\n\n// Starte den Test automatisch beim Laden\nApiService.runTest();","map":{"version":3,"names":["Adresse","Person","Betreuer","Einbringer","Exponat","Kaeufer","Kuenstler","Vermittler","Dokument","Sprache","Anrede","Land","Waehrung","Steuertyp","Grad","fetchData","postData","updateData","deleteData","ENDPOINTS","PERSONS","BETREUER","EINBRINGER","EXPONATE","KAEUFER","KUENSTLER","VERMITTLER","DOKUMENTE","ApiService","fetchPersons","fetchBetreuer","fetchEinbringer","fetchExponate","fetchKaeufer","fetchKuenstler","fetchVermittler","fetchDokumente","runTest","console","log","persons","exponate","kuenstler","Promise","allSettled","status","value","error","reason","fetchAndLog","type","fetchFunction","response","Array","isArray","warn","fetchAllPersons","vermittler","einbringer","betreuer","allPersons","sanitizePersons","map","person","_person$email","_person$adresse","_person$adresse2","_person$adresse3","id","vorname","nachname","email","address","telefon","tel","adresse","strasse","ort","land","typ"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/ApiService.js"],"sourcesContent":["import Adresse from './Classes/Adresse.js';\nimport Person from './Classes/Person.js';\nimport Betreuer from './Classes/Betreuer.js';\nimport Einbringer from './Classes/Einbringer.js';\nimport Exponat from './Classes/Exponat.js';\nimport Kaeufer from './Classes/Kaeufer.js';\nimport Kuenstler from './Classes/Kuenstler.js';\nimport Vermittler from './Classes/Vermittler.js';\nimport Dokument from './Classes/Dokument.js';\nimport { Sprache, Anrede, Land, Waehrung, Steuertyp, Grad } from './Classes/Enums.js';\n\n// Importiere alle API-Funktionen aus fetchAndRead.js\nimport { fetchData, postData, updateData, deleteData } from './fetchAndRead.js';\n\n// Definiere die API-Endpunkte\nconst ENDPOINTS = {\n    PERSONS: '/persons',\n    BETREUER: '/betreuer',\n    EINBRINGER: '/einbringer',\n    EXPONATE: '/exponate',\n    KAEUFER: '/kaeufer',\n    KUENSTLER: '/kuenstler',\n    VERMITTLER: '/vermittler',\n    DOKUMENTE: '/dokumente',\n};\n\n/**\n * ApiService\n * Bietet zentrale Funktionen zum Arbeiten mit dem Backend.\n */\nclass ApiService {\n    // Fetch-Funktionen für verschiedene Ressourcen\n    static async fetchPersons() {\n        return fetchData(ENDPOINTS.PERSONS);\n    }\n\n    static async fetchBetreuer() {\n        return fetchData(ENDPOINTS.BETREUER);\n    }\n\n    static async fetchEinbringer() {\n        return fetchData(ENDPOINTS.EINBRINGER);\n    }\n\n    static async fetchExponate() {\n        return fetchData(ENDPOINTS.EXPONATE);\n    }\n\n    static async fetchKaeufer() {\n        return fetchData(ENDPOINTS.KAEUFER);\n    }\n\n    static async fetchKuenstler() {\n        return fetchData(ENDPOINTS.KUENSTLER);\n    }\n\n    static async fetchVermittler() {\n        return fetchData(ENDPOINTS.VERMITTLER);\n    }\n\n    static async fetchDokumente() {\n        return fetchData(ENDPOINTS.DOKUMENTE);\n    }\n\n    // Testfunktion: Daten abrufen und in der Konsole ausgeben\n    static async runTest() {\n        console.log(\"Running API Service Test...\");\n\n        try {\n            // Test: Parallelisierte Abrufe\n            const [persons, exponate, kuenstler] = await Promise.allSettled([\n                this.fetchPersons(),\n                this.fetchExponate(),\n                this.fetchKuenstler(),\n            ]);\n\n            if (persons.status === 'fulfilled') {\n                console.log(\"Personen-Daten:\", persons.value);\n            } else {\n                console.error(\"Fehler bei Personen:\", persons.reason);\n            }\n\n            if (exponate.status === 'fulfilled') {\n                console.log(\"Exponate-Daten:\", exponate.value);\n            } else {\n                console.error(\"Fehler bei Exponaten:\", exponate.reason);\n            }\n\n            if (kuenstler.status === 'fulfilled') {\n                console.log(\"Künstler-Daten:\", kuenstler.value);\n            } else {\n                console.error(\"Fehler bei Künstlern:\", kuenstler.reason);\n            }\n        } catch (error) {\n            console.error(\"Allgemeiner Fehler:\", error);\n        }\n    }\n\n    // Neue Hilfsfunktion: Abrufen und Loggen von Daten\n    static async fetchAndLog(type, fetchFunction) {\n        try {\n            const response = await fetchFunction();\n            if (!Array.isArray(response)) {\n                console.warn(`${type} API hat kein Array zurückgegeben:`, response);\n                return [];\n            }\n            console.log(`${type} Response:`, response);\n            return response;\n        } catch (error) {\n            console.error(`Fehler beim Abrufen von ${type}:`, error);\n            return [];\n        }\n    }\n\n    // Alle Personen von verschiedenen Endpunkten abrufen\n    static async fetchAllPersons() {\n        try {\n            const vermittler = await this.fetchAndLog(\"Vermittler\", this.fetchVermittler);\n            const einbringer = await this.fetchAndLog(\"Einbringer\", this.fetchEinbringer);\n            const betreuer = await this.fetchAndLog(\"Betreuer\", this.fetchBetreuer);\n\n            const allPersons = [\n                ...this.sanitizePersons(vermittler, \"Vermittler\"),\n                ...this.sanitizePersons(einbringer, \"Einbringer\"),\n                ...this.sanitizePersons(betreuer, \"Betreuer\"),\n            ];\n\n            console.log(\"Zusammengeführte Personenliste:\", allPersons);\n            return allPersons;\n        } catch (error) {\n            console.error(\"Fehler beim Abrufen der Personen:\", error);\n            throw error;\n        }\n    }\n\n    // Datenbereinigung und Strukturierung\n    static sanitizePersons(persons, type) {\n        if (!Array.isArray(persons)) {\n            console.warn(`Erwartete ein Array, aber erhalten:`, persons);\n            return [];\n        }\n\n        return persons.map(person => ({\n            id: person.id,\n            vorname: person.vorname || \"Unbekannt\",\n            nachname: person.nachname || \"Unbekannt\",\n            email: person.email?.address || \"Keine Email\",\n            telefon: person.tel || \"Keine Telefonnummer\",\n            adresse: `${person.adresse?.strasse || \"\"}, ${person.adresse?.ort || \"\"}, ${person.adresse?.land || \"\"}`,\n            typ: type,\n        }));\n    }\n}\n\n// Exportiere ApiService und alle Enums und Modelle\nexport default ApiService;\nexport {\n    Adresse,\n    Person,\n    Betreuer,\n    Einbringer,\n    Exponat,\n    Kaeufer,\n    Kuenstler,\n    Vermittler,\n    Dokument,\n    Sprache,\n    Anrede,\n    Land,\n    Waehrung,\n    Steuertyp,\n    Grad,\n};\n\n// Starte den Test automatisch beim Laden\nApiService.runTest();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}