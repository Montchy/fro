{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = require(\"react\");\nvar _identity = _interopRequireDefault(require(\"ramda/src/identity\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst useProfiler = typeof __DEV__ === 'boolean' && __DEV__ && typeof performance === 'object' ? function useProfiler({\n  name,\n  prop\n}) {\n  const lastUpdate = (0, _react.useRef)(0);\n  const profile = (0, _react.useCallback)(function onUpdate() {\n    const now = performance.now();\n    const diff = now - lastUpdate.current;\n    if (diff < 60) {\n      console.warn(`You seem to update ${prop ? `the ${prop} prop(s)` : 'props'} of the \"${name ? name : 'RenderHTML'}\" component in short periods of time, causing costly tree rerenders (last update was ${diff.toFixed(2)}ms ago). See https://stackoverflow.com/q/68966120/2779871`);\n    }\n    lastUpdate.current = now;\n  }, [name, prop]);\n  return profile;\n} : /* istanbul ignore next */\nfunction useProfiler() {\n  return _identity.default;\n};\nvar _default = useProfiler;\nexports.default = _default;","map":{"version":3,"names":["_react","require","_identity","_interopRequireDefault","useProfiler","__DEV__","performance","name","prop","lastUpdate","useRef","profile","useCallback","onUpdate","now","diff","current","console","warn","toFixed","default"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/react-native-render-html/lib/commonjs/hooks/useProfiler.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\nimport identity from 'ramda/src/identity';\n\ndeclare const performance: { now: () => number };\n\nconst useProfiler =\n  typeof __DEV__ === 'boolean' && __DEV__ && typeof performance === 'object'\n    ? function useProfiler({ name, prop }: { name?: string; prop?: string }) {\n        const lastUpdate = useRef(0);\n        const profile = useCallback(\n          function onUpdate() {\n            const now = performance.now();\n            const diff = now - lastUpdate.current;\n            if (diff < 60) {\n              console.warn(\n                `You seem to update ${\n                  prop ? `the ${prop} prop(s)` : 'props'\n                } of the \"${\n                  name ? name : 'RenderHTML'\n                }\" component in short periods of time, causing costly tree rerenders (last update was ${diff.toFixed(\n                  2\n                )}ms ago). See https://stackoverflow.com/q/68966120/2779871`\n              );\n            }\n            lastUpdate.current = now;\n          },\n          [name, prop]\n        );\n        return profile;\n      }\n    : /* istanbul ignore next */\n      function useProfiler() {\n        return identity as () => void;\n      };\n\nexport default useProfiler;\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAC,sBAAA,CAAAF,OAAA;;;;;;AAIA,MAAMG,WAAW,GACf,OAAOC,OAAP,KAAmB,SAAnB,IAAgCA,OAAhC,IAA2C,OAAOC,WAAP,KAAuB,QAAlE,GACI,SAASF,WAATA,CAAqB;EAAEG,IAAF;EAAQC;AAAR,CAArB,EAAuE;EACrE,MAAMC,UAAU,GAAG,IAAAT,MAAA,CAAAU,MAAA,EAAO,CAAP,CAAnB;EACA,MAAMC,OAAO,GAAG,IAAAX,MAAA,CAAAY,WAAA,EACd,SAASC,QAATA,CAAA,EAAoB;IAClB,MAAMC,GAAG,GAAGR,WAAW,CAACQ,GAAZ,EAAZ;IACA,MAAMC,IAAI,GAAGD,GAAG,GAAGL,UAAU,CAACO,OAA9B;IACA,IAAID,IAAI,GAAG,EAAX,EAAe;MACbE,OAAO,CAACC,IAAR,CACG,sBACCV,IAAI,GAAI,OAAMA,IAAK,UAAf,GAA2B,OAChC,YACCD,IAAI,GAAGA,IAAH,GAAU,YACf,wFAAuFQ,IAAI,CAACI,OAAL,CACtF,CADsF,CAEtF,2DAPJ;IASD;IACDV,UAAU,CAACO,OAAX,GAAqBF,GAArB;EACD,CAhBa,EAiBd,CAACP,IAAD,EAAOC,IAAP,CAjBc,CAAhB;EAmBA,OAAOG,OAAP;AACD,CAvBL,GAwBI;AACA,SAASP,WAATA,CAAA,EAAuB;EACrB,OAAOF,SAAA,CAAAkB,OAAP;AACD,CA5BP;eA8BehB,W","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}