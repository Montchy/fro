{"ast":null,"code":"import ApiService from \"../ApiService\";\n\n/**\n * Führt eine Fetch-Funktion aus, protokolliert die Antwort und behandelt Fehler.\n */\nconst fetchAndLog = async (type, fetchFunction) => {\n  if (typeof fetchFunction !== \"function\") {\n    console.error(`❌ Fehler: ${type} API-Aufruf existiert nicht!`);\n    return [];\n  }\n  try {\n    const response = await fetchFunction();\n    if (!response) {\n      console.warn(`${type} API hat keine Daten zurückgegeben.`);\n      return [];\n    }\n    return sanitizeData(response);\n  } catch (error) {\n    console.error(`Fehler beim Abrufen von ${type}:`, error);\n    return [];\n  }\n};\n\n/**\n * Entfernt zirkuläre Referenzen und verschachtelte Strukturen.\n */\nconst sanitizeData = (data, seen = new WeakSet()) => {\n  if (data && typeof data === 'object') {\n    if (seen.has(data)) {\n      return undefined;\n    }\n    seen.add(data);\n    const sanitized = Array.isArray(data) ? [] : {};\n    for (const key in data) {\n      if (key === 'betreuer' || key === 'einbringer' || key === 'vermittler') {\n        sanitized[key] = undefined;\n      } else {\n        sanitized[key] = sanitizeData(data[key], seen);\n      }\n    }\n    return sanitized;\n  }\n  return data;\n};\n\n/**\n * Ruft alle Exponate aus der API ab und gibt eine formatierte Liste zurück.\n */\nexport const fetchAllExponate = async () => {\n  console.log(\"Exponate-Methode vorhanden?\", typeof ApiService.fetchEXPONATE === \"function\");\n  try {\n    const exponate = await fetchAndLog(\"Exponate\", ApiService.fetchEXPONATE);\n    return sanitizeExponate(exponate);\n  } catch (error) {\n    console.error(\"Fehler beim Abrufen der Exponate:\", error);\n    throw error;\n  }\n};\n\n/**\n * Bereinigt und formatiert die Liste der Exponate.\n */\nconst sanitizeExponate = exponateList => {\n  if (!Array.isArray(exponateList)) {\n    console.warn(`Erwartete ein Array, aber erhalten:`, exponateList);\n    return [];\n  }\n  return exponateList.map(exponat => ({\n    id: exponat.id,\n    titel: exponat.titel || \"Unbekannt\",\n    kategorie: exponat.kategorie || \"Unbekannt\",\n    masse: exponat.masse || \"Keine Angabe\",\n    gewicht: exponat.gewicht || \"Keine Angabe\",\n    kommentar: exponat.kommentar || \"\"\n  }));\n};","map":{"version":3,"names":["ApiService","fetchAndLog","type","fetchFunction","console","error","response","warn","sanitizeData","data","seen","WeakSet","has","undefined","add","sanitized","Array","isArray","key","fetchAllExponate","log","fetchEXPONATE","exponate","sanitizeExponate","exponateList","map","exponat","id","titel","kategorie","masse","gewicht","kommentar"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/Services/exponateService.js"],"sourcesContent":["import ApiService from \"../ApiService\";\n\n/**\n * Führt eine Fetch-Funktion aus, protokolliert die Antwort und behandelt Fehler.\n */\nconst fetchAndLog = async (type, fetchFunction) => {\n    if (typeof fetchFunction !== \"function\") {\n        console.error(`❌ Fehler: ${type} API-Aufruf existiert nicht!`);\n        return [];\n    }\n\n    try {\n        const response = await fetchFunction();\n\n        if (!response) {\n            console.warn(`${type} API hat keine Daten zurückgegeben.`);\n            return [];\n        }\n\n        return sanitizeData(response);\n    } catch (error) {\n        console.error(`Fehler beim Abrufen von ${type}:`, error);\n        return [];\n    }\n};\n\n/**\n * Entfernt zirkuläre Referenzen und verschachtelte Strukturen.\n */\nconst sanitizeData = (data, seen = new WeakSet()) => {\n    if (data && typeof data === 'object') {\n        if (seen.has(data)) {\n            return undefined;\n        }\n        seen.add(data);\n\n        const sanitized = Array.isArray(data) ? [] : {};\n        for (const key in data) {\n            if (key === 'betreuer' || key === 'einbringer' || key === 'vermittler') {\n                sanitized[key] = undefined;\n            } else {\n                sanitized[key] = sanitizeData(data[key], seen);\n            }\n        }\n        return sanitized;\n    }\n    return data;\n};\n\n/**\n * Ruft alle Exponate aus der API ab und gibt eine formatierte Liste zurück.\n */\nexport const fetchAllExponate = async () => {\n    console.log(\"Exponate-Methode vorhanden?\", typeof ApiService.fetchEXPONATE === \"function\");\n\n    try {\n        const exponate = await fetchAndLog(\"Exponate\", ApiService.fetchEXPONATE);\n        return sanitizeExponate(exponate);\n    } catch (error) {\n        console.error(\"Fehler beim Abrufen der Exponate:\", error);\n        throw error;\n    }\n};\n\n/**\n * Bereinigt und formatiert die Liste der Exponate.\n */\nconst sanitizeExponate = (exponateList) => {\n    if (!Array.isArray(exponateList)) {\n        console.warn(`Erwartete ein Array, aber erhalten:`, exponateList);\n        return [];\n    }\n\n    return exponateList.map(exponat => ({\n        id: exponat.id,\n        titel: exponat.titel || \"Unbekannt\",\n        kategorie: exponat.kategorie || \"Unbekannt\",\n        masse: exponat.masse || \"Keine Angabe\",\n        gewicht: exponat.gewicht || \"Keine Angabe\",\n        kommentar: exponat.kommentar || \"\",\n    }));\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}