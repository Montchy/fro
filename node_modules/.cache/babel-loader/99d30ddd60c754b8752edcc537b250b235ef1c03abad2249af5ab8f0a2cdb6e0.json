{"ast":null,"code":"var _jsxFileName = \"/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/Trylists.js\";\nimport React from 'react';\n\n// Funktion, um zufällige Namen zu generieren\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomName = () => {\n  const firstNames = ['Max', 'Anna', 'Liam', 'Sophia', 'Noah', 'Emma', 'Oliver', 'Ava', 'Ethan', 'Isabella', 'Lucas', 'Mia', 'Mason', 'Charlotte', 'Logan', 'Amelia', 'James', 'Harper', 'Jackson', 'Evelyn'];\n  const lastNames = ['Müller', 'Schmidt', 'Schneider', 'Fischer', 'Weber', 'Meyer', 'Wagner', 'Becker', 'Hoffmann', 'Schulz', 'Richter', 'Klein', 'Wolf', 'Schwarz', 'Zimmermann', 'Braun', 'Krüger', 'Hofmann', 'Schmitz', 'Schulte'];\n  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n  return {\n    firstName,\n    lastName\n  };\n};\n\n// Funktion, um zufällige Exponatnamen zu generieren\nconst generateRandomExhibitName = id => {\n  const exhibitNames = ['Gemälde', 'Skulptur', 'Kunstwerk', 'Fotografie', 'Vase', 'Zeichnung', 'Installationskunst', 'Objekt', 'Relief', 'Handwerk', 'Design', 'Keramik', 'Textilkunst', 'Collage', 'Grafik', 'Mosaik'];\n  const name = exhibitNames[Math.floor(Math.random() * exhibitNames.length)] + ` ${id}`;\n  return name;\n};\n\n// Listen generieren\nconst generateLists = () => {\n  const persons = Array.from({\n    length: 100\n  }, () => generateRandomName());\n  const exhibits = Array.from({\n    length: 100\n  }, (_, index) => ({\n    id: index + 1,\n    name: generateRandomExhibitName(index + 1)\n  }));\n  return {\n    persons,\n    exhibits\n  };\n};\n\n// Hauptkomponente\nconst TryLists = () => {\n  const {\n    persons,\n    exhibits\n  } = generateLists();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Personen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: persons.map((person, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [person.firstName, \" \", person.lastName]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Exponate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: exhibits.map(exhibit => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"ID: \", exhibit.id, \", Name: \", exhibit.name]\n      }, exhibit.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_c = TryLists;\nexport default TryLists;\nvar _c;\n$RefreshReg$(_c, \"TryLists\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","generateRandomName","firstNames","lastNames","firstName","Math","floor","random","length","lastName","generateRandomExhibitName","id","exhibitNames","name","generateLists","persons","Array","from","exhibits","_","index","TryLists","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","map","person","exhibit","_c","$RefreshReg$"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/Trylists.js"],"sourcesContent":["import React from 'react';\n\n// Funktion, um zufällige Namen zu generieren\nconst generateRandomName = () => {\n    const firstNames = [\n        'Max', 'Anna', 'Liam', 'Sophia', 'Noah', 'Emma', 'Oliver', 'Ava', \n        'Ethan', 'Isabella', 'Lucas', 'Mia', 'Mason', 'Charlotte', 'Logan', \n        'Amelia', 'James', 'Harper', 'Jackson', 'Evelyn'\n    ];\n\n    const lastNames = [\n        'Müller', 'Schmidt', 'Schneider', 'Fischer', 'Weber', \n        'Meyer', 'Wagner', 'Becker', 'Hoffmann', 'Schulz', \n        'Richter', 'Klein', 'Wolf', 'Schwarz', 'Zimmermann',\n        'Braun', 'Krüger', 'Hofmann', 'Schmitz', 'Schulte'\n    ];\n\n    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n\n    return { firstName, lastName };\n};\n\n// Funktion, um zufällige Exponatnamen zu generieren\nconst generateRandomExhibitName = (id) => {\n    const exhibitNames = [\n        'Gemälde', 'Skulptur', 'Kunstwerk', 'Fotografie', \n        'Vase', 'Zeichnung', 'Installationskunst', \n        'Objekt', 'Relief', 'Handwerk', 'Design', \n        'Keramik', 'Textilkunst', 'Collage', 'Grafik', 'Mosaik'\n    ];\n\n    const name = exhibitNames[Math.floor(Math.random() * exhibitNames.length)] + ` ${id}`;\n    return name;\n};\n\n// Listen generieren\nconst generateLists = () => {\n    const persons = Array.from({ length: 100 }, () => generateRandomName());\n    const exhibits = Array.from({ length: 100 }, (_, index) => ({\n        id: index + 1,\n        name: generateRandomExhibitName(index + 1),\n    }));\n\n    return { persons, exhibits };\n};\n\n// Hauptkomponente\nconst TryLists = () => {\n    const { persons, exhibits } = generateLists();\n\n    return (\n        <div style={{ padding: '20px' }}>\n            <h2>Personen</h2>\n            <ul>\n                {persons.map((person, index) => (\n                    <li key={index}>{person.firstName} {person.lastName}</li>\n                ))}\n            </ul>\n\n            <h2>Exponate</h2>\n            <ul>\n                {exhibits.map((exhibit) => (\n                    <li key={exhibit.id}>ID: {exhibit.id}, Name: {exhibit.name}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TryLists;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}