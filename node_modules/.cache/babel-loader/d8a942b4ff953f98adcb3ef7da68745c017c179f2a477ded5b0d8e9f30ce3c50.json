{"ast":null,"code":"import ApiService from \"../ApiService\";\n\n/**\n * Führt eine Fetch-Funktion aus, protokolliert die Antwort und behandelt Fehler.\n */\nconst fetchAndLog = async (type, fetchFunction) => {\n  if (typeof fetchFunction !== \"function\") {\n    console.error(`❌ Fehler: ${type} API-Aufruf existiert nicht!`);\n    return [];\n  }\n  try {\n    const response = await fetchFunction();\n    if (!response) {\n      console.warn(`${type} API hat keine Daten zurückgegeben.`);\n      return [];\n    }\n    return sanitizeData(response);\n  } catch (error) {\n    console.error(`Fehler beim Abrufen von ${type}:`, error);\n    return [];\n  }\n};\n\n/**\n * Entfernt zirkuläre Referenzen und verschachtelte Strukturen.\n */\nconst sanitizeData = (data, seen = new WeakSet()) => {\n  if (data && typeof data === 'object') {\n    if (seen.has(data)) {\n      return undefined;\n    }\n    seen.add(data);\n    const sanitized = Array.isArray(data) ? [] : {};\n    for (const key in data) {\n      sanitized[key] = sanitizeData(data[key], seen);\n    }\n    return sanitized;\n  }\n  return data;\n};\n\n/**\n * Ruft alle Auktionen aus der API ab und gibt sie als Liste zurück.\n */\nexport const fetchAllAuctions = async () => {\n  console.log(\"Auktionen-Methode vorhanden?\", typeof ApiService.fetchAUKTIONEN === \"function\");\n  try {\n    const auktionen = await fetchAndLog(\"Auktionen\", ApiService.fetchAUKTIONEN);\n    return sanitizeAuctions(auktionen);\n  } catch (error) {\n    console.error(\"Fehler beim Abrufen der Auktionen:\", error);\n    throw error;\n  }\n};\n\n/**\n * Bereinigt und formatiert die Liste der Auktionen.\n */\nconst sanitizeAuctions = auctions => {\n  if (!Array.isArray(auctions)) {\n    console.warn(\"Erwartete ein Array, aber erhalten:\", auctions);\n    return [];\n  }\n  return auctions.map(auction => ({\n    id: auction.id,\n    title: auction.titel || \"Unbekannte Auktion\",\n    startDate: auction.startDatum || \"Kein Startdatum\",\n    endDate: auction.endDatum || \"Kein Enddatum\",\n    status: auction.status || \"Unbekannter Status\"\n  }));\n};","map":{"version":3,"names":["ApiService","fetchAndLog","type","fetchFunction","console","error","response","warn","sanitizeData","data","seen","WeakSet","has","undefined","add","sanitized","Array","isArray","key","fetchAllAuctions","log","fetchAUKTIONEN","auktionen","sanitizeAuctions","auctions","map","auction","id","title","titel","startDate","startDatum","endDate","endDatum","status"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/Services/auktionenService.js"],"sourcesContent":["import ApiService from \"../ApiService\";\n\n/**\n * Führt eine Fetch-Funktion aus, protokolliert die Antwort und behandelt Fehler.\n */\nconst fetchAndLog = async (type, fetchFunction) => {\n    if (typeof fetchFunction !== \"function\") {\n        console.error(`❌ Fehler: ${type} API-Aufruf existiert nicht!`);\n        return [];\n    }\n\n    try {\n        const response = await fetchFunction();\n\n        if (!response) {\n            console.warn(`${type} API hat keine Daten zurückgegeben.`);\n            return [];\n        }\n\n        return sanitizeData(response);\n    } catch (error) {\n        console.error(`Fehler beim Abrufen von ${type}:`, error);\n        return [];\n    }\n};\n\n/**\n * Entfernt zirkuläre Referenzen und verschachtelte Strukturen.\n */\nconst sanitizeData = (data, seen = new WeakSet()) => {\n    if (data && typeof data === 'object') {\n        if (seen.has(data)) {\n            return undefined;\n        }\n        seen.add(data);\n\n        const sanitized = Array.isArray(data) ? [] : {};\n        for (const key in data) {\n            sanitized[key] = sanitizeData(data[key], seen);\n        }\n        return sanitized;\n    }\n    return data;\n};\n\n/**\n * Ruft alle Auktionen aus der API ab und gibt sie als Liste zurück.\n */\nexport const fetchAllAuctions = async () => {\n    console.log(\"Auktionen-Methode vorhanden?\", typeof ApiService.fetchAUKTIONEN === \"function\");\n\n    try {\n        const auktionen = await fetchAndLog(\"Auktionen\", ApiService.fetchAUKTIONEN);\n        return sanitizeAuctions(auktionen);\n    } catch (error) {\n        console.error(\"Fehler beim Abrufen der Auktionen:\", error);\n        throw error;\n    }\n};\n\n/**\n * Bereinigt und formatiert die Liste der Auktionen.\n */\nconst sanitizeAuctions = (auctions) => {\n    if (!Array.isArray(auctions)) {\n        console.warn(\"Erwartete ein Array, aber erhalten:\", auctions);\n        return [];\n    }\n\n    return auctions.map(auction => ({\n        id: auction.id,\n        title: auction.titel || \"Unbekannte Auktion\",\n        startDate: auction.startDatum || \"Kein Startdatum\",\n        endDate: auction.endDatum || \"Kein Enddatum\",\n        status: auction.status || \"Unbekannter Status\",\n    }));\n};"],"mappings":"AAAA,OAAOA,UAAU,MAAM,eAAe;;AAEtC;AACA;AACA;AACA,MAAMC,WAAW,GAAG,MAAAA,CAAOC,IAAI,EAAEC,aAAa,KAAK;EAC/C,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;IACrCC,OAAO,CAACC,KAAK,CAAC,aAAaH,IAAI,8BAA8B,CAAC;IAC9D,OAAO,EAAE;EACb;EAEA,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMH,aAAa,CAAC,CAAC;IAEtC,IAAI,CAACG,QAAQ,EAAE;MACXF,OAAO,CAACG,IAAI,CAAC,GAAGL,IAAI,qCAAqC,CAAC;MAC1D,OAAO,EAAE;IACb;IAEA,OAAOM,YAAY,CAACF,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,2BAA2BH,IAAI,GAAG,EAAEG,KAAK,CAAC;IACxD,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA;AACA;AACA,MAAMG,YAAY,GAAGA,CAACC,IAAI,EAAEC,IAAI,GAAG,IAAIC,OAAO,CAAC,CAAC,KAAK;EACjD,IAAIF,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAClC,IAAIC,IAAI,CAACE,GAAG,CAACH,IAAI,CAAC,EAAE;MAChB,OAAOI,SAAS;IACpB;IACAH,IAAI,CAACI,GAAG,CAACL,IAAI,CAAC;IAEd,MAAMM,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACR,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/C,KAAK,MAAMS,GAAG,IAAIT,IAAI,EAAE;MACpBM,SAAS,CAACG,GAAG,CAAC,GAAGV,YAAY,CAACC,IAAI,CAACS,GAAG,CAAC,EAAER,IAAI,CAAC;IAClD;IACA,OAAOK,SAAS;EACpB;EACA,OAAON,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMU,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxCf,OAAO,CAACgB,GAAG,CAAC,8BAA8B,EAAE,OAAOpB,UAAU,CAACqB,cAAc,KAAK,UAAU,CAAC;EAE5F,IAAI;IACA,MAAMC,SAAS,GAAG,MAAMrB,WAAW,CAAC,WAAW,EAAED,UAAU,CAACqB,cAAc,CAAC;IAC3E,OAAOE,gBAAgB,CAACD,SAAS,CAAC;EACtC,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA;AACA;AACA,MAAMkB,gBAAgB,GAAIC,QAAQ,IAAK;EACnC,IAAI,CAACR,KAAK,CAACC,OAAO,CAACO,QAAQ,CAAC,EAAE;IAC1BpB,OAAO,CAACG,IAAI,CAAC,qCAAqC,EAAEiB,QAAQ,CAAC;IAC7D,OAAO,EAAE;EACb;EAEA,OAAOA,QAAQ,CAACC,GAAG,CAACC,OAAO,KAAK;IAC5BC,EAAE,EAAED,OAAO,CAACC,EAAE;IACdC,KAAK,EAAEF,OAAO,CAACG,KAAK,IAAI,oBAAoB;IAC5CC,SAAS,EAAEJ,OAAO,CAACK,UAAU,IAAI,iBAAiB;IAClDC,OAAO,EAAEN,OAAO,CAACO,QAAQ,IAAI,eAAe;IAC5CC,MAAM,EAAER,OAAO,CAACQ,MAAM,IAAI;EAC9B,CAAC,CAAC,CAAC;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}