{"ast":null,"code":"/**\n * fetchAndRead.js\n * Utility für API-Aufrufe und Datenverarbeitung.\n */\n\nconst API_BASE_URL = 'http://localhost:8080/api'; // Basis-URL deines Backends\n\n/**\n * Führt einen GET-Request zu einer angegebenen API-URL durch.\n * @param {string} endpoint - Der Endpunkt, z. B. \"/persons\".\n * @param {Object} [options={}] - Zusätzliche Optionen für den Fetch-Request.\n * @returns {Promise<Object>} - Die Antwortdaten im JSON-Format.\n * @throws {Error} - Wenn der Request fehlschlägt oder die Antwort nicht ok ist.\n */\nexport const fetchData = async (endpoint, options = {}) => {\n  try {\n    //const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    const response = await fetch(`${API_BASE_URL}/vermittler`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'MAR200575 geheim1' // Ersetze 'your_token_here' durch deinen JWT-Token\n      },\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`Fehler beim Abrufen der Daten: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API-Fehler:', error);\n    throw error;\n  }\n};\n\n/**\n * Führt einen POST-Request zu einer angegebenen API-URL durch.\n * @param {string} endpoint - Der Endpunkt, z. B. \"/persons\".\n * @param {Object} body - Der Payload (JSON-Objekt) für den POST-Request.\n * @param {Object} [options={}] - Zusätzliche Optionen für den Fetch-Request.\n * @returns {Promise<Object>} - Die Antwortdaten im JSON-Format.\n * @throws {Error} - Wenn der Request fehlschlägt oder die Antwort nicht ok ist.\n */\nexport const postData = async (endpoint, body, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body),\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`Fehler beim Senden der Daten: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API-Fehler:', error);\n    throw error;\n  }\n};\n\n/**\n * Führt einen PUT-Request zu einer angegebenen API-URL durch.\n * @param {string} endpoint - Der Endpunkt, z. B. \"/persons/{id}\".\n * @param {Object} body - Der Payload (JSON-Objekt) für den PUT-Request.\n * @param {Object} [options={}] - Zusätzliche Optionen für den Fetch-Request.\n * @returns {Promise<Object>} - Die Antwortdaten im JSON-Format.\n * @throws {Error} - Wenn der Request fehlschlägt oder die Antwort nicht ok ist.\n */\nexport const updateData = async (endpoint, body, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body),\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`Fehler beim Aktualisieren der Daten: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API-Fehler:', error);\n    throw error;\n  }\n};\n\n/**\n * Führt einen DELETE-Request zu einer angegebenen API-URL durch.\n * @param {string} endpoint - Der Endpunkt, z. B. \"/persons/{id}\".\n * @param {Object} [options={}] - Zusätzliche Optionen für den Fetch-Request.\n * @returns {Promise<void>} - Erfolgsnachricht, wenn gelöscht.\n * @throws {Error} - Wenn der Request fehlschlägt oder die Antwort nicht ok ist.\n */\nexport const deleteData = async (endpoint, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`Fehler beim Löschen der Daten: ${response.statusText}`);\n    }\n    return 'Daten erfolgreich gelöscht.';\n  } catch (error) {\n    console.error('API-Fehler:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchData","endpoint","options","response","fetch","method","headers","ok","Error","statusText","data","json","error","console","postData","body","JSON","stringify","updateData","deleteData"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/fetchAndRead.js"],"sourcesContent":["/**\n * fetchAndRead.js\n * Utility für API-Aufrufe und Datenverarbeitung.\n */\n\nconst API_BASE_URL = 'http://localhost:8080/api'; // Basis-URL deines Backends\n\n/**\n * Führt einen GET-Request zu einer angegebenen API-URL durch.\n * @param {string} endpoint - Der Endpunkt, z. B. \"/persons\".\n * @param {Object} [options={}] - Zusätzliche Optionen für den Fetch-Request.\n * @returns {Promise<Object>} - Die Antwortdaten im JSON-Format.\n * @throws {Error} - Wenn der Request fehlschlägt oder die Antwort nicht ok ist.\n */\nexport const fetchData = async (endpoint, options = {}) => {\n    try {\n        //const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        const response = await fetch(`${API_BASE_URL}/vermittler`, {\n\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'MAR200575 geheim1', // Ersetze 'your_token_here' durch deinen JWT-Token\n            },\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Fehler beim Abrufen der Daten: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('API-Fehler:', error);\n        throw error;\n    }\n};\n\n/**\n * Führt einen POST-Request zu einer angegebenen API-URL durch.\n * @param {string} endpoint - Der Endpunkt, z. B. \"/persons\".\n * @param {Object} body - Der Payload (JSON-Objekt) für den POST-Request.\n * @param {Object} [options={}] - Zusätzliche Optionen für den Fetch-Request.\n * @returns {Promise<Object>} - Die Antwortdaten im JSON-Format.\n * @throws {Error} - Wenn der Request fehlschlägt oder die Antwort nicht ok ist.\n */\nexport const postData = async (endpoint, body, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Fehler beim Senden der Daten: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('API-Fehler:', error);\n        throw error;\n    }\n};\n\n/**\n * Führt einen PUT-Request zu einer angegebenen API-URL durch.\n * @param {string} endpoint - Der Endpunkt, z. B. \"/persons/{id}\".\n * @param {Object} body - Der Payload (JSON-Objekt) für den PUT-Request.\n * @param {Object} [options={}] - Zusätzliche Optionen für den Fetch-Request.\n * @returns {Promise<Object>} - Die Antwortdaten im JSON-Format.\n * @throws {Error} - Wenn der Request fehlschlägt oder die Antwort nicht ok ist.\n */\nexport const updateData = async (endpoint, body, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Fehler beim Aktualisieren der Daten: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('API-Fehler:', error);\n        throw error;\n    }\n};\n\n/**\n * Führt einen DELETE-Request zu einer angegebenen API-URL durch.\n * @param {string} endpoint - Der Endpunkt, z. B. \"/persons/{id}\".\n * @param {Object} [options={}] - Zusätzliche Optionen für den Fetch-Request.\n * @returns {Promise<void>} - Erfolgsnachricht, wenn gelöscht.\n * @throws {Error} - Wenn der Request fehlschlägt oder die Antwort nicht ok ist.\n */\nexport const deleteData = async (endpoint, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Fehler beim Löschen der Daten: ${response.statusText}`);\n        }\n\n        return 'Daten erfolgreich gelöscht.';\n    } catch (error) {\n        console.error('API-Fehler:', error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}