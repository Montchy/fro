{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet, Pressable, View } from 'react-native';\nimport useLatestCallback from 'use-latest-callback';\nimport { getChipColors } from './helpers';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n/**\n * Chips are compact elements that can represent inputs, attributes, or actions.\n * They can have an icon or avatar on the left, and a close button icon on the right.\n * They are typically used to:\n * <ul>\n *  <li>Present multiple options </li>\n *  <li>Represent attributes active or chosen </li>\n *  <li>Present filter options </li>\n *  <li>Trigger actions related to primary content </li>\n * </ul>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = _ref => {\n  let {\n    mode = 'flat',\n    children,\n    icon,\n    avatar,\n    selected = false,\n    disabled = false,\n    background,\n    accessibilityLabel,\n    accessibilityRole = 'button',\n    closeIconAccessibilityLabel = 'Close',\n    onPress,\n    onLongPress,\n    onPressOut,\n    onPressIn,\n    delayLongPress,\n    onClose,\n    closeIcon,\n    textStyle,\n    style,\n    theme: themeOverrides,\n    testID = 'chip',\n    selectedColor,\n    rippleColor: customRippleColor,\n    showSelectedOverlay = false,\n    showSelectedCheck = true,\n    ellipsizeMode,\n    compact,\n    elevated = false,\n    maxFontSizeMultiplier,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    isV3,\n    roundness\n  } = theme;\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(isV3 && elevated ? 1 : 0));\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut\n  });\n  const isOutlined = mode === 'outlined';\n  const handlePressIn = useLatestCallback(e => {\n    const {\n      scale\n    } = theme.animation;\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n    }).start();\n  });\n  const handlePressOut = useLatestCallback(e => {\n    const {\n      scale\n    } = theme.animation;\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n    }).start();\n  });\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = roundness * (isV3 ? 2 : 4);\n  const iconSize = isV3 ? 18 : 16;\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius\n  } = StyleSheet.flatten(style) || {};\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    rippleColor,\n    selectedBackgroundColor,\n    backgroundColor\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n    customRippleColor\n  });\n  const accessibilityState = {\n    selected,\n    disabled\n  };\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected && showSelectedCheck ? 4 * multiplier : 8 * multiplier\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular)\n  };\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor,\n      borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest, {\n    testID: `${testID}-container`,\n    theme: theme\n  }), /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    background: background,\n    style: [{\n      borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,\n    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,\n    delayLongPress: delayLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: accessibilityRole,\n    accessibilityState: accessibilityState,\n    testID: testID,\n    theme: theme\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? /*#__PURE__*/React.createElement(View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity\n    }]\n  }, /*#__PURE__*/React.isValidElement(avatar) ? /*#__PURE__*/React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected && showSelectedCheck ? /*#__PURE__*/React.createElement(View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18,\n    theme: theme\n  }) : /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, /*#__PURE__*/React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, children))), onClose ? /*#__PURE__*/React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, /*#__PURE__*/React.createElement(Pressable, {\n    onPress: onClose,\n    disabled: disabled,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? /*#__PURE__*/React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative'\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    width: '100%'\n  }\n});\nexport default Chip;","map":{"version":3,"names":["React","Animated","Platform","StyleSheet","Pressable","View","useLatestCallback","getChipColors","useInternalTheme","white","hasTouchHandler","Icon","MaterialCommunityIcon","Surface","TouchableRipple","Text","Chip","_ref","mode","children","icon","avatar","selected","disabled","background","accessibilityLabel","accessibilityRole","closeIconAccessibilityLabel","onPress","onLongPress","onPressOut","onPressIn","delayLongPress","onClose","closeIcon","textStyle","style","theme","themeOverrides","testID","selectedColor","rippleColor","customRippleColor","showSelectedOverlay","showSelectedCheck","ellipsizeMode","compact","elevated","maxFontSizeMultiplier","rest","isV3","roundness","current","elevation","useRef","Value","hasPassedTouchHandler","isOutlined","handlePressIn","e","scale","animation","timing","toValue","duration","useNativeDriver","OS","constants","reactNativeVersion","minor","start","handlePressOut","opacity","defaultBorderRadius","iconSize","backgroundColor","customBackgroundColor","borderRadius","flatten","borderColor","textColor","iconColor","selectedBackgroundColor","accessibilityState","elevationStyle","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","color","fonts","labelLarge","regular","createElement","_extends","styles","container","md3OutlineContainer","md3FlatContainer","borderless","touchable","undefined","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","source","colors","primary","size","name","direction","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/react-native-paper/src/components/Chip/Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  Pressable,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport { getChipColors } from './helpers';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $Omit, EllipsizeProp, ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   * Note: With theme version 3 `selectedColor` doesn't apply to the `icon`.\n   *       If you want specify custom color for the `icon`, render your own `Icon` component.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether to display default check icon on selected chip.\n   * Note: Check will not be shown if `icon` is specified. If specified, `icon` will be shown regardless of `selected`.\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: PressableAndroidRippleConfig;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n};\n\n/**\n * Chips are compact elements that can represent inputs, attributes, or actions.\n * They can have an icon or avatar on the left, and a close button icon on the right.\n * They are typically used to:\n * <ul>\n *  <li>Present multiple options </li>\n *  <li>Represent attributes active or chosen </li>\n *  <li>Present filter options </li>\n *  <li>Trigger actions related to primary content </li>\n * </ul>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  background,\n  accessibilityLabel,\n  accessibilityRole = 'button',\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onPressOut,\n  onPressIn,\n  delayLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme: themeOverrides,\n  testID = 'chip',\n  selectedColor,\n  rippleColor: customRippleColor,\n  showSelectedOverlay = false,\n  showSelectedCheck = true,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  maxFontSizeMultiplier,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3, roundness } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressIn?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver:\n        Platform.OS === 'web' ||\n        Platform.constants.reactNativeVersion.minor <= 72,\n    }).start();\n  });\n\n  const handlePressOut = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressOut?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver:\n        Platform.OS === 'web' ||\n        Platform.constants.reactNativeVersion.minor <= 72,\n    }).start();\n  });\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = roundness * (isV3 ? 2 : 4);\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    rippleColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n    customRippleColor,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft:\n      avatar || icon || (selected && showSelectedCheck)\n        ? 4 * multiplier\n        : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={[\n        styles.container,\n        isV3 &&\n          (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n        !theme.isV3 && {\n          elevation: elevationStyle,\n        },\n        {\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor,\n          borderRadius,\n        },\n        style,\n      ]}\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n      testID={`${testID}-container`}\n      theme={theme}\n    >\n      <TouchableRipple\n        borderless\n        background={background}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        delayLongPress={delayLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole={accessibilityRole}\n        accessibilityState={accessibilityState}\n        testID={testID}\n        theme={theme}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || (selected && showSelectedCheck) ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                  theme={theme}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n            maxFontSizeMultiplier={maxFontSizeMultiplier}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <Pressable\n            onPress={onClose}\n            disabled={disabled}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </Pressable>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    width: '100%',\n  },\n});\n\nexport default Chip;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}