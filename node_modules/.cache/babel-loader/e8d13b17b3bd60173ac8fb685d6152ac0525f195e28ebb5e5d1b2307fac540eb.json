{"ast":null,"code":"import ApiService from \"../Application/ApiService\";\n\n/**\n * Fetches all persons from various endpoints and combines them into a single list.\n * @returns {Promise<Array>} - A combined list of persons.\n */\nexport const fetchAllPersons = async () => {\n  try {\n    const vermittler = await fetchAndLog(\"Vermittler\", ApiService.fetchVermittler);\n    const einbringer = await fetchAndLog(\"Einbringer\", ApiService.fetchEinbringer);\n    const betreuer = await fetchAndLog(\"Betreuer\", ApiService.fetchBetreuer);\n    const allPersons = [...sanitizePersons(vermittler, \"Vermittler\"), ...sanitizePersons(einbringer, \"Einbringer\"), ...sanitizePersons(betreuer, \"Betreuer\")];\n    console.log(\"Combined persons list:\", allPersons);\n    return allPersons;\n  } catch (error) {\n    console.error(\"Error fetching persons:\", error.message);\n    throw error;\n  }\n};\n\n/**\n * Helper function to log fetch results and handle errors.\n * @param {string} type - The type of data source.\n * @param {Function} fetchFunction - The fetch function for the API.\n * @returns {Promise<Array>} - API response or an empty array.\n */\nconst fetchAndLog = async (type, fetchFunction) => {\n  try {\n    const response = await fetchFunction();\n    if (!Array.isArray(response)) {\n      console.warn(`${type} API did not return an array:`, response);\n      return [];\n    }\n    console.log(`${type} response:`, response);\n    return response;\n  } catch (error) {\n    console.error(`Error fetching ${type}:`, error.message);\n    return [];\n  }\n};\n\n/**\n * Cleans and formats the list of persons from a specific source.\n * @param {Array} persons - The original list of persons.\n * @param {string} type - The source type (e.g., \"Vermittler\", \"Einbringer\", \"Betreuer\").\n * @returns {Array} - The cleaned and formatted persons list.\n */\nconst sanitizePersons = (persons, type) => {\n  if (!Array.isArray(persons)) {\n    console.warn(`Expected an array, but received:`, persons);\n    return [];\n  }\n  return persons.map(person => {\n    var _person$email, _person$adresse, _person$adresse2, _person$adresse3;\n    return {\n      id: person.id,\n      vorname: person.vorname || \"Unbekannt\",\n      nachname: person.nachname || \"Unbekannt\",\n      email: ((_person$email = person.email) === null || _person$email === void 0 ? void 0 : _person$email.address) || \"Keine Email\",\n      telefon: person.tel || \"Keine Telefonnummer\",\n      adresse: [((_person$adresse = person.adresse) === null || _person$adresse === void 0 ? void 0 : _person$adresse.strasse) || \"\", ((_person$adresse2 = person.adresse) === null || _person$adresse2 === void 0 ? void 0 : _person$adresse2.ort) || \"\", ((_person$adresse3 = person.adresse) === null || _person$adresse3 === void 0 ? void 0 : _person$adresse3.land) || \"\"].filter(Boolean).join(\", \"),\n      typ: type\n    };\n  });\n};","map":{"version":3,"names":["ApiService","fetchAllPersons","vermittler","fetchAndLog","fetchVermittler","einbringer","fetchEinbringer","betreuer","fetchBetreuer","allPersons","sanitizePersons","console","log","error","message","type","fetchFunction","response","Array","isArray","warn","persons","map","person","_person$email","_person$adresse","_person$adresse2","_person$adresse3","id","vorname","nachname","email","address","telefon","tel","adresse","strasse","ort","land","filter","Boolean","join","typ"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/personService.js"],"sourcesContent":["import ApiService from \"../Application/ApiService\";\n\n/**\n * Fetches all persons from various endpoints and combines them into a single list.\n * @returns {Promise<Array>} - A combined list of persons.\n */\nexport const fetchAllPersons = async () => {\n    try {\n        const vermittler = await fetchAndLog(\"Vermittler\", ApiService.fetchVermittler);\n        const einbringer = await fetchAndLog(\"Einbringer\", ApiService.fetchEinbringer);\n        const betreuer = await fetchAndLog(\"Betreuer\", ApiService.fetchBetreuer);\n\n        const allPersons = [\n            ...sanitizePersons(vermittler, \"Vermittler\"),\n            ...sanitizePersons(einbringer, \"Einbringer\"),\n            ...sanitizePersons(betreuer, \"Betreuer\"),\n        ];\n\n        console.log(\"Combined persons list:\", allPersons);\n        return allPersons;\n    } catch (error) {\n        console.error(\"Error fetching persons:\", error.message);\n        throw error;\n    }\n};\n\n/**\n * Helper function to log fetch results and handle errors.\n * @param {string} type - The type of data source.\n * @param {Function} fetchFunction - The fetch function for the API.\n * @returns {Promise<Array>} - API response or an empty array.\n */\nconst fetchAndLog = async (type, fetchFunction) => {\n    try {\n        const response = await fetchFunction();\n\n        if (!Array.isArray(response)) {\n            console.warn(`${type} API did not return an array:`, response);\n            return [];\n        }\n\n        console.log(`${type} response:`, response);\n        return response;\n    } catch (error) {\n        console.error(`Error fetching ${type}:`, error.message);\n        return [];\n    }\n};\n\n/**\n * Cleans and formats the list of persons from a specific source.\n * @param {Array} persons - The original list of persons.\n * @param {string} type - The source type (e.g., \"Vermittler\", \"Einbringer\", \"Betreuer\").\n * @returns {Array} - The cleaned and formatted persons list.\n */\nconst sanitizePersons = (persons, type) => {\n    if (!Array.isArray(persons)) {\n        console.warn(`Expected an array, but received:`, persons);\n        return [];\n    }\n\n    return persons.map(person => ({\n        id: person.id,\n        vorname: person.vorname || \"Unbekannt\",\n        nachname: person.nachname || \"Unbekannt\",\n        email: person.email?.address || \"Keine Email\",\n        telefon: person.tel || \"Keine Telefonnummer\",\n        adresse: [\n            person.adresse?.strasse || \"\",\n            person.adresse?.ort || \"\",\n            person.adresse?.land || \"\",\n        ].filter(Boolean).join(\", \"),\n        typ: type,\n    }));\n};"],"mappings":"AAAA,OAAOA,UAAU,MAAM,2BAA2B;;AAElD;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMC,UAAU,GAAG,MAAMC,WAAW,CAAC,YAAY,EAAEH,UAAU,CAACI,eAAe,CAAC;IAC9E,MAAMC,UAAU,GAAG,MAAMF,WAAW,CAAC,YAAY,EAAEH,UAAU,CAACM,eAAe,CAAC;IAC9E,MAAMC,QAAQ,GAAG,MAAMJ,WAAW,CAAC,UAAU,EAAEH,UAAU,CAACQ,aAAa,CAAC;IAExE,MAAMC,UAAU,GAAG,CACf,GAAGC,eAAe,CAACR,UAAU,EAAE,YAAY,CAAC,EAC5C,GAAGQ,eAAe,CAACL,UAAU,EAAE,YAAY,CAAC,EAC5C,GAAGK,eAAe,CAACH,QAAQ,EAAE,UAAU,CAAC,CAC3C;IAEDI,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,UAAU,CAAC;IACjD,OAAOA,UAAU;EACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACC,OAAO,CAAC;IACvD,MAAMD,KAAK;EACf;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMV,WAAW,GAAG,MAAAA,CAAOY,IAAI,EAAEC,aAAa,KAAK;EAC/C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMD,aAAa,CAAC,CAAC;IAEtC,IAAI,CAACE,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;MAC1BN,OAAO,CAACS,IAAI,CAAC,GAAGL,IAAI,+BAA+B,EAAEE,QAAQ,CAAC;MAC9D,OAAO,EAAE;IACb;IAEAN,OAAO,CAACC,GAAG,CAAC,GAAGG,IAAI,YAAY,EAAEE,QAAQ,CAAC;IAC1C,OAAOA,QAAQ;EACnB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,kBAAkBE,IAAI,GAAG,EAAEF,KAAK,CAACC,OAAO,CAAC;IACvD,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMJ,eAAe,GAAGA,CAACW,OAAO,EAAEN,IAAI,KAAK;EACvC,IAAI,CAACG,KAAK,CAACC,OAAO,CAACE,OAAO,CAAC,EAAE;IACzBV,OAAO,CAACS,IAAI,CAAC,kCAAkC,EAAEC,OAAO,CAAC;IACzD,OAAO,EAAE;EACb;EAEA,OAAOA,OAAO,CAACC,GAAG,CAACC,MAAM;IAAA,IAAAC,aAAA,EAAAC,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;IAAA,OAAK;MAC1BC,EAAE,EAAEL,MAAM,CAACK,EAAE;MACbC,OAAO,EAAEN,MAAM,CAACM,OAAO,IAAI,WAAW;MACtCC,QAAQ,EAAEP,MAAM,CAACO,QAAQ,IAAI,WAAW;MACxCC,KAAK,EAAE,EAAAP,aAAA,GAAAD,MAAM,CAACQ,KAAK,cAAAP,aAAA,uBAAZA,aAAA,CAAcQ,OAAO,KAAI,aAAa;MAC7CC,OAAO,EAAEV,MAAM,CAACW,GAAG,IAAI,qBAAqB;MAC5CC,OAAO,EAAE,CACL,EAAAV,eAAA,GAAAF,MAAM,CAACY,OAAO,cAAAV,eAAA,uBAAdA,eAAA,CAAgBW,OAAO,KAAI,EAAE,EAC7B,EAAAV,gBAAA,GAAAH,MAAM,CAACY,OAAO,cAAAT,gBAAA,uBAAdA,gBAAA,CAAgBW,GAAG,KAAI,EAAE,EACzB,EAAAV,gBAAA,GAAAJ,MAAM,CAACY,OAAO,cAAAR,gBAAA,uBAAdA,gBAAA,CAAgBW,IAAI,KAAI,EAAE,CAC7B,CAACC,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MAC5BC,GAAG,EAAE3B;IACT,CAAC;EAAA,CAAC,CAAC;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}