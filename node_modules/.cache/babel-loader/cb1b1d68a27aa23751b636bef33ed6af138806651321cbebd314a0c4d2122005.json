{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/@jsamr/counter-style/src/public-types.ts"],"sourcesContent":["/**\n * A function which compute the maximum codepoint length of a formatter in a\n * given range.\n *\n * @param min - The inclusive non-negative minimum.\n * @param max - The inclusive non-negative maximum.\n *\n * @public\n */\nexport type MaxCodepointLengthInRangeComputer = (\n  min: number,\n  max: number\n) => number;\n\n/**\n * A function that renders an index into its\n * {@link https://www.w3.org/TR/css-counter-styles-3/#initial-representation-for-the-counter-value | initial counter representation}.\n *\n * As specified in CSS, this function must not render negative signs, add\n * padding or prefixes and suffixes.\n *\n * @remarks It can return undefined to signal a fallback should be used\n * instead.\n *\n * @public\n */\nexport type InitialCounterFormatter = (index: number) => string | undefined;\n\n/**\n * An object to specify RTL rendering.\n *\n * @public\n */\nexport interface RtlOptions {\n  /**\n   * Reverse the order of characters in the prefix.\n   *\n   * @example `-|` becomes `|-`\n   *\n   * @defaultValue true\n   */\n  reversePrefix?: boolean;\n  /**\n   * Reverse the order of characters in the suffix.\n   *\n   * @example `. ` becomes ` .`\n   *\n   * @defaultValue true\n   */\n  reverseSuffix?: boolean;\n  /**\n   * Reverse the order of characters in the counter.\n   *\n   * @example `abc` becomes `cba`\n   *\n   * @defaultValue false\n   */\n  reverseCounter?: boolean;\n}\n\n/**\n * An object to render counters.\n *\n * @public\n */\nexport interface CounterStyleRenderer {\n  /**\n   * Render an index into its counter representation, equivalent to CSS `counter` function.\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#generate-a-counter | CSS Counter Styles Level 3, Counter Styles}.\n   *\n   * @param index - The counter value to render.\n   */\n  renderCounter(index: number): string;\n  /**\n   * Get the maximum counter representation length given an index range. If a\n   * fallback is defined, it will be used for values outside the range\n   * boundaries of this renderer.\n   *\n   * @remarks This method doesn't take into account\n   * {@link https://www.w3.org/TR/css-text-3/#grapheme-cluster | unicode grapheme clusters}.\n   *\n   * @param min - The minimum inclusive value.\n   * @param max - The maximum inclusive value.\n   */\n  maxCounterLenInRange(min: number, max: number): number;\n  /**\n   * Get the maximum marker string length given an index range. If a fallback\n   * is defined, it will be used for values outside the range boundaries of\n   * this renderer.\n   *\n   * @remarks This method doesn't take into account\n   * {@link https://www.w3.org/TR/css-text-3/#grapheme-cluster | unicode grapheme clusters}.\n   *\n   * @param min - The minimum inclusive value.\n   * @param max - The maximum inclusive value.\n   */\n  maxMarkerLenInRange(min: number, max: number): number;\n  /**\n   * Render an index into its corresponding marker string.\n   * See {@link https://www.w3.org/TR/css-lists-3/#text-markers | CSS Lists Level 3, Text-based Markers}.\n   *\n   * @param index - The counter value to render.\n   */\n  renderMarker(index: number): string;\n  /**\n   * Render this renderer's prefix.\n   */\n  renderPrefix(): string;\n  /**\n   * Render this renderer's suffix.\n   */\n  renderSuffix(): string;\n  /**\n   * Create a new renderer with a fallback used when the index is out of bounds.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#counter-style-fallback | CSS Counter Styles Level 3, Defining fallback: the fallback descriptor}.\n   *\n   * @param fallback - A fallback CounterStyleRenderer.\n   */\n  withFallback(fallback: FallbackRenderer): CounterStyleRenderer;\n  /**\n   * Create a new renderer with a constrained range. When the index is out of\n   * bounds, the counter representation is rendered with the provided fallback,\n   * or the default fallback if none was provided.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#counter-style-range | CSS Counter Styles Level 3, Limiting the counter scope: the range descriptor}.\n   *\n   * @param min - Minimum value (inclusive)\n   * @param max - Maximum value (inclusive)\n   * @param fallback - A fallback renderer to apply when the index is out of bounds.\n   */\n  withRange(\n    min: number,\n    max: number,\n    fallback?: FallbackRenderer\n  ): CounterStyleRenderer;\n  /**\n   * Create a new renderer which will render negative values by prefixing and\n   * suffixing the provided characters to the renderer function.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#counter-style-negative | CSS Counter Styles Level 3, Formatting negative values: the negative descriptor}.\n   *\n   * @param prefix - String prepended to counter representation.\n   * @param suffix - String appended to counter representation.\n   */\n  withNegative(prefix: string, suffix?: string): CounterStyleRenderer;\n  /**\n   * Create a new renderer which adds padding to the left.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#counter-style-pad | CSS Counter Styles Level 3, Zero-Padding and Constant-Width Representations: the pad descriptor}.\n   *\n   * @param length - The total length to which padding should be added.\n   * @param pad - The character to pad.\n   * @remarks If you need to pad with spaces, beware on React Native you should\n   * use non-breaking spaces on iOS (\\\\u00A0) or the padding might get trimmed.\n   */\n  withPadLeft(length: number, pad: string): CounterStyleRenderer;\n  /**\n   * Create a new renderer which adds padding to the right.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#counter-style-pad | CSS Counter Styles Level 3, Zero-Padding and Constant-Width Representations: the pad descriptor}.\n   *\n   * @param length - The total length to which padding should be added.\n   * @param pad - The character to pad.\n   * @remarks If you need to pad with spaces, beware on React Native you should\n   * use non-breaking spaces on iOS (\\\\u00A0) or the padding might get trimmed.\n   */\n  withPadRight(length: number, pad: string): CounterStyleRenderer;\n\n  /**\n   * Create a new renderer which replaces or removes this renderer suffix.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#counter-style-suffix | CSS Counter Styles Level 3, Symbols after the marker: the suffix descriptor}.\n   *\n   * @param suffix - A suffix, or `null` to remove the default suffix.\n   */\n  withSuffix(suffix: string | null): CounterStyleRenderer;\n\n  /**\n   * Create a new renderer which replaces or removes this renderer prefix.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#counter-style-prefix | CSS Counter Styles Level 3, Symbols before the marker: the prefix descriptor}.\n   *\n   * @param prefix - A prefix, or `null` to remove this renderer suffix.\n   */\n  withPrefix(prefix: string | null): CounterStyleRenderer;\n\n  /**\n   * Create a new renderer with a (hopefuly) cost-effective max codepoint\n   * length computer.\n   *\n   * @remarks The computer function must not handle negative numbers.\n   *\n   * @param computer - A function to compute the max codepoints length\n   * produced by the underlying formatter given a range.\n   */\n  withMaxLengthComputer(\n    computer: (\n      min: number,\n      max: number,\n      defaultComputer: MaxCodepointLengthInRangeComputer\n    ) => number\n  ): CounterStyleRenderer;\n\n  /**\n   * Create a new renderer which renders Right-to-left.\n   *\n   * @remarks By default:\n   * - The order of prefix, counter representation and suffix will be reversed when rendering marker.\n   * - The letter ordering of prefix and suffix will be reversed when rendering marker, prefix and suffix.\n   * - The letter ordering of counter representation will not be reversed when rendering marker and counter.\n   *\n   * See {@link RtlOptions}.\n   */\n  withRtl(options?: RtlOptions): CounterStyleRenderer;\n}\n\n/**\n * Minimal API for a fallback.\n *\n * @public\n */\nexport type FallbackRenderer = Pick<\n  CounterStyleRenderer,\n  'renderCounter' | 'maxCounterLenInRange'\n>;\n\n/**\n * An object to build counter style renderers.\n *\n * @public\n */\nexport interface CounterStyleStatic {\n  /**\n   * Create a renderer from a formatter function.\n   *\n   * @remarks The formatter function should not add decorations. Especially:\n   *\n   * - should not add negative signs. Use {@link CounterStyleRenderer.withNegative} instead.\n   * - should not add padding. Use {@link CounterStyleRenderer.withPadLeft} and {@link CounterStyleRenderer.withPadRight} instead.\n   * - should not add prefixes or suffixes. Use {@link CounterStyleRenderer.withPrefix} and {@link CounterStyleRenderer.withSuffix} instead.\n   *\n   * If the formatter function doesn't cover the [-Infinity, Infinity] range,\n   * you must specify the scope via {@link CounterStyleRenderer.withRange}.\n   *\n   * @param initialCounterFormatter - A formatter function which takes a non-negative integer\n   * and returns its\n   * {@link https://www.w3.org/TR/css-counter-styles-3/#initial-representation-for-the-counter-value | initial counter representation},\n   * or undefined when there is no representation for this index. If that is\n   * the case, the renderer will use the specified fallback function (see\n   * {@link CounterStyleRenderer.withFallback}), or the default decimal\n   * fallback if none was specified.\n   *\n   * @returns A style renderer.\n   */\n  raw: (\n    initialCounterFormatter: InitialCounterFormatter\n  ) => CounterStyleRenderer;\n\n  /**\n   * Create a cyclic system renderer.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#cyclic-system | CSS Counter Styles Level 3, Cycling Symbols: the cyclic system}.\n   *\n   * @param symbols - A suite of cyclic symbols.\n   * @returns - A cyclic renderer with default range of [-Infinity, Infinity]\n   */\n  cyclic: (...symbols: string[]) => CounterStyleRenderer;\n\n  /**\n   * Create a fixed system renderer.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#fixed-system | CSS Counter Styles Level 3, Exhaustible Symbols: the fixed system}.\n   *\n   * @param symbols - The suite of fixed symbols\n   * @returns - A fixed renderer with default range of [1, symbols.length]\n   */\n  fixed: (...symbols: string[]) => CounterStyleRenderer;\n\n  /**\n   * Create a symbolic system renderer.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#symbolic-system | CSS Counter Styles Level 3, Repeating Symbols: the symbolic system}.\n   *\n   * @param symbols - The suite of repeated symbols.\n   * @returns - A symbolic renderer with default range of [1, Infinity]\n   */\n  symbolic: (...symbols: string[]) => CounterStyleRenderer;\n\n  /**\n   * Create an alphabetic system renderer.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#alphabetic-system | CSS Counter Styles Level 3, Bijective Numerals: the alphabetic system}.\n   *\n   * @param symbols - The suite of alphabetic symbols.\n   * @returns - An alphabetic renderer with default range of [1, Infinity]\n   */\n  alphabetic: (...symbols: string[]) => CounterStyleRenderer;\n\n  /**\n   * Create a numeric system renderer.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#numeric-system | CSS Counter Styles Level 3, Positional Numerals: the numeric system}.\n   *\n   * @param symbols - The suite of numeric symbols.\n   * @returns - An numeric renderer with default range of [-Infinity, Infinity]\n   * and default negative symbol \"-\".\n   */\n  numeric: (...symbols: string[]) => CounterStyleRenderer;\n\n  /**\n   * Create an additive system renderer.\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#additive-system | CSS Counter Styles Level 3, Accumulating Numerals: the additive system}.\n   *\n   * @remarks Additive systems might have \"holes\" in their range coverage. For\n   * example, an additive system which has no representation for \"1\" will not\n   * translate odd indexes. **The behavior of this renderer for incomplete\n   * additive systems is unspecified.**\n   *\n   * @param symbols - A record which indexes are non-negative numbers and values their\n   * corresponding representations, each pair forming an additive tuple.\n   * @returns - An additive renderer with default range of [0, Infinity] if a 0\n   * additive tupple was specified, [1, Infinity] otherwise.\n   */\n  additive: (symbols: Record<number, string>) => CounterStyleRenderer;\n\n  /**\n   * Create a numeric system renderer from a UTF-16 code unit and a\n   * base. The set of numerals for this range will be generated by incrementing\n   * `originUnicode` with every integer in range [0, `base` - 1].\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#numeric-system | CSS Counter Styles Level 3, Positional Numerals: the numeric system}.\n   *\n   * @param originUnicode - The UTF-16 code unit number representation of index \"0\".\n   * @param base - The number of numerals in the multiplicative system.\n   */\n  numericFromUnicodeRange: (\n    originUnicode: number,\n    base: number\n  ) => CounterStyleRenderer;\n\n  /**\n   * Create an alphabetic system renderer from a  UTF-16 code unit and an alphabet\n   * length. The set of symbols for this alphabetic system will be generated by\n   * incrementing `originUnicode` with every integer in range [0,\n   * `alphabetLength` - 1].\n   *\n   * See {@link https://www.w3.org/TR/css-counter-styles-3/#alphabetic-system | CSS Counter Styles Level 3, Bijective Numerals: the alphabetic system}.\n   *\n   * @param originUnicode - The UTF-16 code unit number representation of index \"1\".\n   * @param alphabetLength - The number of characters in this alphabet.\n   */\n  alphabeticFromUnicodeRange: (\n    originUnicode: number,\n    alphabetLength: number\n  ) => CounterStyleRenderer;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}