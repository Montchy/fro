{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api';\nconst getToken = async () => {\n  try {\n    const credentials = btoa(\"MAR200575:geheim1\");\n    const response = await fetch(\"http://localhost:8080/token\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Basic ${credentials}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch token: ${response.statusText}`);\n    }\n    const token = await response.text();\n    if (!token) {\n      throw new Error('Token is empty or invalid');\n    }\n    return token;\n  } catch (error) {\n    throw error;\n  }\n};\nconst fetchDataWithToken = async (endpoint, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error fetching data: ${response.status} ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};\nexport const fetchData = async endpoint => {\n  try {\n    const token = await getToken();\n    return await fetchDataWithToken(endpoint, token);\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\nexport const postData = async (endpoint, body) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    if (!response.ok) {\n      throw new Error(`Error sending data: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};\nexport const updateData = async (endpoint, body) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    if (!response.ok) {\n      throw new Error(`Error updating data: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};\nexport const deleteData = async endpoint => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error deleting data: ${response.statusText}`);\n    }\n    return 'Data successfully deleted.';\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getToken","credentials","btoa","response","fetch","method","headers","ok","Error","statusText","token","text","error","fetchDataWithToken","endpoint","status","json","fetchData","console","postData","body","JSON","stringify","updateData","deleteData"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/fetchAndRead.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api';\n\nconst getToken = async () => {\n    try {\n        const credentials = btoa(\"MAR200575:geheim1\");\n        const response = await fetch(\"http://localhost:8080/token\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Basic ${credentials}`,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch token: ${response.statusText}`);\n        }\n\n        const token = await response.text();\n        if (!token) {\n            throw new Error('Token is empty or invalid');\n        }\n\n        return token;\n    } catch (error) {\n        throw error;\n    }\n};\n\nconst fetchDataWithToken = async (endpoint, token) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error fetching data: ${response.status} ${response.statusText}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const fetchData = async (endpoint) => {\n    try {\n        const token = await getToken();\n        return await fetchDataWithToken(endpoint, token);\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n    }\n};\n\nexport const postData = async (endpoint, body) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error sending data: ${response.statusText}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const updateData = async (endpoint, body) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error updating data: ${response.statusText}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const deleteData = async (endpoint) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error deleting data: ${response.statusText}`);\n        }\n\n        return 'Data successfully deleted.';\n    } catch (error) {\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}