{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hoist = hoist;\nvar _TBlockCtor = _interopRequireDefault(require(\"../tree/TBlockCtor\"));\nvar _TPhrasingCtor = require(\"../tree/TPhrasingCtor\");\nvar _TTextCtor = require(\"../tree/TTextCtor\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Wrap text nodes around TPhrasing nodes.\n * @param tnode The parent node of all elements to group.\n */\nfunction groupText(tnode) {\n  let newChildren = [];\n  const wrapperInit = {\n    elementModel: null,\n    context: tnode.init.context,\n    // We need to merge styles here to make sure\n    // some React Native styles working only for the uppermost Text element\n    // such as \"textAlign\" are preserved.\n    parentStyles: tnode.styles,\n    parent: null\n  };\n  let wrapper = new _TPhrasingCtor.TPhrasingCtor(wrapperInit);\n  let wrapperChildren = [];\n  for (const child of tnode.children) {\n    if (child instanceof _TTextCtor.TTextCtor || child instanceof _TPhrasingCtor.TPhrasingCtor) {\n      wrapperChildren.push(child);\n    } else {\n      if (wrapperChildren.length) {\n        newChildren.push(wrapper);\n        wrapper.bindChildren(wrapperChildren);\n        wrapper = new _TPhrasingCtor.TPhrasingCtor(wrapperInit);\n        wrapperChildren = [];\n      }\n      newChildren.push(child);\n    }\n  }\n  if (wrapperChildren.length) {\n    wrapper.bindChildren(wrapperChildren);\n    newChildren.push(wrapper);\n  }\n  tnode.bindChildren(newChildren);\n  return tnode;\n}\nfunction hoistNode(tnode) {\n  if (tnode instanceof _TTextCtor.TTextCtor) {\n    return tnode;\n  }\n  tnode.bindChildren(tnode.children.map(hoistNode));\n  if (tnode instanceof _TPhrasingCtor.TPhrasingCtor) {\n    for (const cnode of tnode.children) {\n      if (cnode instanceof _TBlockCtor.default) {\n        const newNode = new _TBlockCtor.default(tnode.cloneInitParams());\n        newNode.bindChildren(tnode.children);\n        const output = groupText(newNode);\n        return output;\n      }\n    }\n  } else if (tnode instanceof _TBlockCtor.default) {\n    if (tnode.children.length > 0) {\n      const output = groupText(tnode);\n      return output;\n    }\n  }\n  return tnode;\n}\nfunction hoist(tree) {\n  return hoistNode(tree);\n}","map":{"version":3,"names":["_TBlockCtor","_interopRequireDefault","require","_TPhrasingCtor","_TTextCtor","groupText","tnode","newChildren","wrapperInit","elementModel","context","init","parentStyles","styles","parent","wrapper","TPhrasingCtor","wrapperChildren","child","children","TTextCtor","push","length","bindChildren","hoistNode","map","cnode","default","newNode","cloneInitParams","output","hoist","tree"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/@native-html/transient-render-engine/lib/commonjs/flow/hoist.ts"],"sourcesContent":["import TBlockCtor, { TBlockImpl } from '../tree/TBlockCtor';\nimport { TNodeImpl } from '../tree/tree-types';\nimport { TPhrasingCtor } from '../tree/TPhrasingCtor';\nimport { TTextCtor } from '../tree/TTextCtor';\n\n/**\n * Wrap text nodes around TPhrasing nodes.\n * @param tnode The parent node of all elements to group.\n */\nfunction groupText(tnode: TBlockImpl): TNodeImpl {\n  let newChildren: TNodeImpl[] = [];\n  const wrapperInit = {\n    elementModel: null,\n    context: tnode.init.context,\n    // We need to merge styles here to make sure\n    // some React Native styles working only for the uppermost Text element\n    // such as \"textAlign\" are preserved.\n    parentStyles: tnode.styles,\n    parent: null\n  };\n  let wrapper = new TPhrasingCtor(wrapperInit);\n  let wrapperChildren: TNodeImpl[] = [];\n  for (const child of tnode.children) {\n    if (child instanceof TTextCtor || child instanceof TPhrasingCtor) {\n      wrapperChildren.push(child);\n    } else {\n      if (wrapperChildren.length) {\n        newChildren.push(wrapper);\n        wrapper.bindChildren(wrapperChildren);\n        wrapper = new TPhrasingCtor(wrapperInit);\n        wrapperChildren = [];\n      }\n      newChildren.push(child);\n    }\n  }\n  if (wrapperChildren.length) {\n    wrapper.bindChildren(wrapperChildren);\n    newChildren.push(wrapper);\n  }\n  tnode.bindChildren(newChildren);\n  return tnode;\n}\n\nfunction hoistNode(tnode: TNodeImpl): TNodeImpl {\n  if (tnode instanceof TTextCtor) {\n    return tnode;\n  }\n  tnode.bindChildren(tnode.children.map(hoistNode));\n  if (tnode instanceof TPhrasingCtor) {\n    for (const cnode of tnode.children) {\n      if (cnode instanceof TBlockCtor) {\n        const newNode = new TBlockCtor(tnode.cloneInitParams());\n        newNode.bindChildren(tnode.children);\n        const output = groupText(newNode);\n        return output;\n      }\n    }\n  } else if (tnode instanceof TBlockCtor) {\n    if (tnode.children.length > 0) {\n      const output = groupText(tnode);\n      return output;\n    }\n  }\n  return tnode;\n}\n\nexport function hoist(tree: TNodeImpl): TNodeImpl {\n  return hoistNode(tree);\n}\n"],"mappings":";;;;;;AAAA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA,SAASG,SAATA,CAAmBC,KAAnB,EAAiD;EAC/C,IAAIC,WAAwB,GAAG,EAA/B;EACA,MAAMC,WAAW,GAAG;IAClBC,YAAY,EAAE,IADI;IAElBC,OAAO,EAAEJ,KAAK,CAACK,IAAN,CAAWD,OAFF;IAGlB;IACA;IACA;IACAE,YAAY,EAAEN,KAAK,CAACO,MANF;IAOlBC,MAAM,EAAE;EAPU,CAApB;EASA,IAAIC,OAAO,GAAG,IAAIZ,cAAA,CAAAa,aAAJ,CAAkBR,WAAlB,CAAd;EACA,IAAIS,eAA4B,GAAG,EAAnC;EACA,KAAK,MAAMC,KAAX,IAAoBZ,KAAK,CAACa,QAA1B,EAAoC;IAClC,IAAID,KAAK,YAAYd,UAAA,CAAAgB,SAAjB,IAA8BF,KAAK,YAAYf,cAAA,CAAAa,aAAnD,EAAkE;MAChEC,eAAe,CAACI,IAAhB,CAAqBH,KAArB;IACD,CAFD,MAEO;MACL,IAAID,eAAe,CAACK,MAApB,EAA4B;QAC1Bf,WAAW,CAACc,IAAZ,CAAiBN,OAAjB;QACAA,OAAO,CAACQ,YAAR,CAAqBN,eAArB;QACAF,OAAO,GAAG,IAAIZ,cAAA,CAAAa,aAAJ,CAAkBR,WAAlB,CAAV;QACAS,eAAe,GAAG,EAAlB;MACD;MACDV,WAAW,CAACc,IAAZ,CAAiBH,KAAjB;IACD;EACF;EACD,IAAID,eAAe,CAACK,MAApB,EAA4B;IAC1BP,OAAO,CAACQ,YAAR,CAAqBN,eAArB;IACAV,WAAW,CAACc,IAAZ,CAAiBN,OAAjB;EACD;EACDT,KAAK,CAACiB,YAAN,CAAmBhB,WAAnB;EACA,OAAOD,KAAP;AACD;AAED,SAASkB,SAATA,CAAmBlB,KAAnB,EAAgD;EAC9C,IAAIA,KAAK,YAAYF,UAAA,CAAAgB,SAArB,EAAgC;IAC9B,OAAOd,KAAP;EACD;EACDA,KAAK,CAACiB,YAAN,CAAmBjB,KAAK,CAACa,QAAN,CAAeM,GAAf,CAAmBD,SAAnB,CAAnB;EACA,IAAIlB,KAAK,YAAYH,cAAA,CAAAa,aAArB,EAAoC;IAClC,KAAK,MAAMU,KAAX,IAAoBpB,KAAK,CAACa,QAA1B,EAAoC;MAClC,IAAIO,KAAK,YAAY1B,WAAA,CAAA2B,OAArB,EAAiC;QAC/B,MAAMC,OAAO,GAAG,IAAI5B,WAAA,CAAA2B,OAAJ,CAAerB,KAAK,CAACuB,eAAN,EAAf,CAAhB;QACAD,OAAO,CAACL,YAAR,CAAqBjB,KAAK,CAACa,QAA3B;QACA,MAAMW,MAAM,GAAGzB,SAAS,CAACuB,OAAD,CAAxB;QACA,OAAOE,MAAP;MACD;IACF;EACF,CATD,MASO,IAAIxB,KAAK,YAAYN,WAAA,CAAA2B,OAArB,EAAiC;IACtC,IAAIrB,KAAK,CAACa,QAAN,CAAeG,MAAf,GAAwB,CAA5B,EAA+B;MAC7B,MAAMQ,MAAM,GAAGzB,SAAS,CAACC,KAAD,CAAxB;MACA,OAAOwB,MAAP;IACD;EACF;EACD,OAAOxB,KAAP;AACD;AAEM,SAASyB,KAATA,CAAeC,IAAf,EAA2C;EAChD,OAAOR,SAAS,CAACQ,IAAD,CAAhB;AACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}