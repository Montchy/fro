{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = GenericPressable;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _SharedPropsProvider = require(\"./context/SharedPropsProvider\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction GenericPressable({\n  style,\n  children,\n  borderless = false,\n  ...otherProps\n}) {\n  const {\n    pressableHightlightColor,\n    GenericPressable: UserProvidedPressable\n  } = (0, _SharedPropsProvider.useSharedProps)();\n  if (UserProvidedPressable) {\n    return /*#__PURE__*/_react.default.createElement(UserProvidedPressable, _extends({\n      style: style,\n      borderless: borderless\n    }, otherProps), children);\n  }\n  if (_reactNative.Platform.OS === 'android') {\n    // TouchableNativeFeedback does not support a\n    // style prop. So we must wrap it inside a View.\n    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {\n      style: style\n    }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableNativeFeedback, _extends({\n      useForeground: true,\n      background: _reactNative.TouchableNativeFeedback.Ripple(pressableHightlightColor, borderless)\n    }, otherProps), /*#__PURE__*/_react.default.createElement(_reactNative.View, {\n      testID: \"generic-pressable\"\n    }, children)));\n  }\n  return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableHighlight, _extends({\n    underlayColor: pressableHightlightColor,\n    style: style\n  }, otherProps), /*#__PURE__*/_react.default.createElement(_reactNative.View, {\n    testID: \"generic-pressable\"\n  }, children));\n}","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_SharedPropsProvider","GenericPressable","style","children","borderless","otherProps","pressableHightlightColor","UserProvidedPressable","useSharedProps","default","createElement","_extends","Platform","OS","View","TouchableNativeFeedback","useForeground","background","Ripple","testID","TouchableHighlight","underlayColor"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/react-native-render-html/lib/commonjs/GenericPressable.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport {\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  View\n} from 'react-native';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport { GenericPressableProps } from './shared-types';\n\nexport default function GenericPressable({\n  style,\n  children,\n  borderless = false,\n  ...otherProps\n}: PropsWithChildren<GenericPressableProps>) {\n  const { pressableHightlightColor, GenericPressable: UserProvidedPressable } =\n    useSharedProps();\n  if (UserProvidedPressable) {\n    return (\n      <UserProvidedPressable\n        style={style}\n        borderless={borderless}\n        {...(otherProps as any)}>\n        {children}\n      </UserProvidedPressable>\n    );\n  }\n  if (Platform.OS === 'android') {\n    // TouchableNativeFeedback does not support a\n    // style prop. So we must wrap it inside a View.\n    return (\n      <View style={style}>\n        <TouchableNativeFeedback\n          useForeground\n          background={TouchableNativeFeedback.Ripple(\n            pressableHightlightColor,\n            borderless\n          )}\n          {...(otherProps as any)}>\n          <View testID=\"generic-pressable\">{children}</View>\n        </TouchableNativeFeedback>\n      </View>\n    );\n  }\n  return (\n    <TouchableHighlight\n      underlayColor={pressableHightlightColor}\n      style={style}\n      {...(otherProps as any)}>\n      <View testID=\"generic-pressable\">{children}</View>\n    </TouchableHighlight>\n  );\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAMA,IAAAE,oBAAA,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;AAGe,SAASG,gBAATA,CAA0B;EACvCC,KADuC;EAEvCC,QAFuC;EAGvCC,UAAU,GAAG,KAH0B;EAIvC,GAAGC;AAJoC,CAA1B,EAK8B;EAC3C,MAAM;IAAEC,wBAAF;IAA4BL,gBAAgB,EAAEM;EAA9C,IACJ,IAAAP,oBAAA,CAAAQ,cAAA,GADF;EAEA,IAAID,qBAAJ,EAA2B;IACzB,oBACEX,MAAA,CAAAa,OAAA,CAAAC,aAAA,CAACH,qBAAD,EAAAI,QAAA;MACET,KAAK,EAAEA,KADT;MAEEE,UAAU,EAAEA;IAFd,GAGOC,UAHP,GAIGF,QAJH,CADF;EAQD;EACD,IAAIJ,YAAA,CAAAa,QAAA,CAASC,EAAT,KAAgB,SAApB,EAA+B;IAC7B;IACA;IACA,oBACEjB,MAAA,CAAAa,OAAA,CAAAC,aAAA,CAACX,YAAA,CAAAe,IAAD;MAAMZ,KAAK,EAAEA;IAAb,gBACEN,MAAA,CAAAa,OAAA,CAAAC,aAAA,CAACX,YAAA,CAAAgB,uBAAD,EAAAJ,QAAA;MACEK,aAAa,MADf;MAEEC,UAAU,EAAElB,YAAA,CAAAgB,uBAAA,CAAwBG,MAAxB,CACVZ,wBADU,EAEVF,UAFU;IAFd,GAMOC,UANP,gBAOET,MAAA,CAAAa,OAAA,CAAAC,aAAA,CAACX,YAAA,CAAAe,IAAD;MAAMK,MAAM,EAAC;IAAb,GAAkChB,QAAlC,CAPF,CADF,CADF;EAaD;EACD,oBACEP,MAAA,CAAAa,OAAA,CAAAC,aAAA,CAACX,YAAA,CAAAqB,kBAAD,EAAAT,QAAA;IACEU,aAAa,EAAEf,wBADjB;IAEEJ,KAAK,EAAEA;EAFT,GAGOG,UAHP,gBAIET,MAAA,CAAAa,OAAA,CAAAC,aAAA,CAACX,YAAA,CAAAe,IAAD;IAAMK,MAAM,EAAC;EAAb,GAAkChB,QAAlC,CAJF,CADF;AAQD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}