{"ast":null,"code":"// Importiere Klassen und Enums\nimport Adresse from './Adresse.js';\nimport Betreuer from './Betreuer.js';\nimport Einbringer from './Einbringer.js';\nimport Exponat from './Exponat.js';\nimport Kaeufer from './Kaeufer.js';\nimport Kuenstler from './Kuenstler.js';\nimport Person from './Person.js';\nimport Vermittler from './Vermittler.js';\nimport { Sprache, Anrede, Land, Waehrung } from './Enums.js';\n\n// Funktion zur zufälligen Auswahl aus einer Liste\nconst randomFromArray = arr => arr[Math.floor(Math.random() * arr.length)];\n\n// Generiere Testdaten für Adresse\nconst generateAdresses = count => {\n  const adresses = [];\n  for (let i = 0; i < count; i++) {\n    adresses.push(new Adresse(`adresse-${i}`, Math.random() > 0.5, Math.random() > 0.5, Math.random() > 0.5, `Zusatz ${i}`, `Straße ${i}`, randomFromArray([Land.OESTERREICH, Land.DEUTSCHLAND, Land.SCHWEIZ]), `PLZ-${i}`, `Ort ${i}`));\n  }\n  return adresses;\n};\n\n// Generiere Testdaten für Personen\nconst generatePersons = count => {\n  const persons = [];\n  for (let i = 0; i < count; i++) {\n    persons.push(new Person(`person-${i}`, null, Math.random() > 0.5, randomFromArray([Sprache.DEUTSCH, Sprache.ENGLISH, Sprache.ZWEISPRACHIG]), randomFromArray([Anrede.FRAU, Anrede.HERR, Anrede.DIVERSE]), `Vorname${i}`, `Nachname${i}`, `Firma ${i}`, `Tätigkeit ${i}`, `email${i}@example.com`, `+4312345678${i}`, generateAdresses(2)));\n  }\n  return persons;\n};\n\n// Generiere Testdaten für Betreuer\nconst generateBetreuer = (count, persons) => {\n  const betreuer = [];\n  for (let i = 0; i < count; i++) {\n    const person = persons[i % persons.length];\n    betreuer.push(new Betreuer(person.personenNr, `betreuerNr-${i}`, person));\n  }\n  return betreuer;\n};\n\n// Generiere Testdaten für Einbringer\nconst generateEinbringer = (count, persons) => {\n  const einbringer = [];\n  for (let i = 0; i < count; i++) {\n    const person = persons[i % persons.length];\n    einbringer.push(new Einbringer(person.personenNr, `einbringerNr-${i}`, `Grad ${i}`, person));\n  }\n  return einbringer;\n};\n\n// Generiere Testdaten für Exponat\nconst generateExponate = (count, kaeufer, vermittler, einbringer) => {\n  const exponate = [];\n  for (let i = 0; i < count; i++) {\n    exponate.push(new Exponat(`exponat-${i}`, `Titel ${i}`, `exponatNr-${i}`, `TechnikKurz ${i}`, `Technik ${i}`, `Masse ${i}`, `Signatur ${i}`, `Kommentar ${i}`, `Gewicht ${i}`, `Kategorie ${i}`, kaeufer[i % kaeufer.length], vermittler[i % vermittler.length], einbringer[i % einbringer.length]));\n  }\n  return exponate;\n};\n\n// Generiere Testdaten für Käufer\nconst generateKaeufer = (count, persons) => {\n  const kaeufer = [];\n  for (let i = 0; i < count; i++) {\n    const person = persons[i % persons.length];\n    kaeufer.push(new Kaeufer(person.personenNr, `kaeuferNr-${i}`, `Steuertyp ${i}`, Math.random() > 0.5, `Grad ${i}`, person));\n  }\n  return kaeufer;\n};\n\n// Generiere Testdaten für Künstler\nconst generateKuenstler = (count, persons) => {\n  const kuenstler = [];\n  for (let i = 0; i < count; i++) {\n    const person = persons[i % persons.length];\n    kuenstler.push(new Kuenstler(person.personenNr, `kuenstlerNr-${i}`, `BezKurz ${i}`, `Bez ${i}`, `Pseudonym1 ${i}`, `Pseudonym2 ${i}`, person));\n  }\n  return kuenstler;\n};\n\n// Generiere Testdaten für Vermittler\nconst generateVermittler = (count, persons) => {\n  const vermittler = [];\n  for (let i = 0; i < count; i++) {\n    const person = persons[i % persons.length];\n    vermittler.push(new Vermittler(person.personenNr, `vermittlerNr-${i}`, Math.random() > 0.5, `Provision ${i}`, `Basis ${i}`, randomFromArray([Waehrung.EUR, Waehrung.USD, Waehrung.GBP, Waehrung.CHF]), `Grad ${i}`, person));\n  }\n  return vermittler;\n};\n\n// Erstellen der Testdaten\nconst personList = generatePersons(100);\nconst betreuerList = generateBetreuer(100, personList);\nconst einbringerList = generateEinbringer(100, personList);\nconst kaeuferList = generateKaeufer(100, personList);\nconst kuenstlerList = generateKuenstler(100, personList);\nconst vermittlerList = generateVermittler(100, personList);\nconst exponateList = generateExponate(100, kaeuferList, vermittlerList, einbringerList);\n\n// Exportiere Testdaten\nexport { personList, betreuerList, einbringerList, kaeuferList, kuenstlerList, vermittlerList, exponateList };","map":{"version":3,"names":["Adresse","Betreuer","Einbringer","Exponat","Kaeufer","Kuenstler","Person","Vermittler","Sprache","Anrede","Land","Waehrung","randomFromArray","arr","Math","floor","random","length","generateAdresses","count","adresses","i","push","OESTERREICH","DEUTSCHLAND","SCHWEIZ","generatePersons","persons","DEUTSCH","ENGLISH","ZWEISPRACHIG","FRAU","HERR","DIVERSE","generateBetreuer","betreuer","person","personenNr","generateEinbringer","einbringer","generateExponate","kaeufer","vermittler","exponate","generateKaeufer","generateKuenstler","kuenstler","generateVermittler","EUR","USD","GBP","CHF","personList","betreuerList","einbringerList","kaeuferList","kuenstlerList","vermittlerList","exponateList"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/Classes/testDataGenerator.js"],"sourcesContent":["// Importiere Klassen und Enums\nimport Adresse from './Adresse.js';\nimport Betreuer from './Betreuer.js';\nimport Einbringer from './Einbringer.js';\nimport Exponat from './Exponat.js';\nimport Kaeufer from './Kaeufer.js';\nimport Kuenstler from './Kuenstler.js';\nimport Person from './Person.js';\nimport Vermittler from './Vermittler.js';\nimport { Sprache, Anrede, Land, Waehrung } from './Enums.js';\n\n// Funktion zur zufälligen Auswahl aus einer Liste\nconst randomFromArray = (arr) => arr[Math.floor(Math.random() * arr.length)];\n\n// Generiere Testdaten für Adresse\nconst generateAdresses = (count) => {\n    const adresses = [];\n    for (let i = 0; i < count; i++) {\n        adresses.push(new Adresse(\n            `adresse-${i}`,\n            Math.random() > 0.5,\n            Math.random() > 0.5,\n            Math.random() > 0.5,\n            `Zusatz ${i}`,\n            `Straße ${i}`,\n            randomFromArray([Land.OESTERREICH, Land.DEUTSCHLAND, Land.SCHWEIZ]),\n            `PLZ-${i}`,\n            `Ort ${i}`\n        ));\n    }\n    return adresses;\n};\n\n// Generiere Testdaten für Personen\nconst generatePersons = (count) => {\n    const persons = [];\n    for (let i = 0; i < count; i++) {\n        persons.push(new Person(\n            `person-${i}`,\n            null,\n            Math.random() > 0.5,\n            randomFromArray([Sprache.DEUTSCH, Sprache.ENGLISH, Sprache.ZWEISPRACHIG]),\n            randomFromArray([Anrede.FRAU, Anrede.HERR, Anrede.DIVERSE]),\n            `Vorname${i}`,\n            `Nachname${i}`,\n            `Firma ${i}`,\n            `Tätigkeit ${i}`,\n            `email${i}@example.com`,\n            `+4312345678${i}`,\n            generateAdresses(2)\n        ));\n    }\n    return persons;\n};\n\n// Generiere Testdaten für Betreuer\nconst generateBetreuer = (count, persons) => {\n    const betreuer = [];\n    for (let i = 0; i < count; i++) {\n        const person = persons[i % persons.length];\n        betreuer.push(new Betreuer(person.personenNr, `betreuerNr-${i}`, person));\n    }\n    return betreuer;\n};\n\n// Generiere Testdaten für Einbringer\nconst generateEinbringer = (count, persons) => {\n    const einbringer = [];\n    for (let i = 0; i < count; i++) {\n        const person = persons[i % persons.length];\n        einbringer.push(new Einbringer(person.personenNr, `einbringerNr-${i}`, `Grad ${i}`, person));\n    }\n    return einbringer;\n};\n\n// Generiere Testdaten für Exponat\nconst generateExponate = (count, kaeufer, vermittler, einbringer) => {\n    const exponate = [];\n    for (let i = 0; i < count; i++) {\n        exponate.push(new Exponat(\n            `exponat-${i}`,\n            `Titel ${i}`,\n            `exponatNr-${i}`,\n            `TechnikKurz ${i}`,\n            `Technik ${i}`,\n            `Masse ${i}`,\n            `Signatur ${i}`,\n            `Kommentar ${i}`,\n            `Gewicht ${i}`,\n            `Kategorie ${i}`,\n            kaeufer[i % kaeufer.length],\n            vermittler[i % vermittler.length],\n            einbringer[i % einbringer.length]\n        ));\n    }\n    return exponate;\n};\n\n// Generiere Testdaten für Käufer\nconst generateKaeufer = (count, persons) => {\n    const kaeufer = [];\n    for (let i = 0; i < count; i++) {\n        const person = persons[i % persons.length];\n        kaeufer.push(new Kaeufer(\n            person.personenNr,\n            `kaeuferNr-${i}`,\n            `Steuertyp ${i}`,\n            Math.random() > 0.5,\n            `Grad ${i}`,\n            person\n        ));\n    }\n    return kaeufer;\n};\n\n// Generiere Testdaten für Künstler\nconst generateKuenstler = (count, persons) => {\n    const kuenstler = [];\n    for (let i = 0; i < count; i++) {\n        const person = persons[i % persons.length];\n        kuenstler.push(new Kuenstler(\n            person.personenNr,\n            `kuenstlerNr-${i}`,\n            `BezKurz ${i}`,\n            `Bez ${i}`,\n            `Pseudonym1 ${i}`,\n            `Pseudonym2 ${i}`,\n            person\n        ));\n    }\n    return kuenstler;\n};\n\n// Generiere Testdaten für Vermittler\nconst generateVermittler = (count, persons) => {\n    const vermittler = [];\n    for (let i = 0; i < count; i++) {\n        const person = persons[i % persons.length];\n        vermittler.push(new Vermittler(\n            person.personenNr,\n            `vermittlerNr-${i}`,\n            Math.random() > 0.5,\n            `Provision ${i}`,\n            `Basis ${i}`,\n            randomFromArray([Waehrung.EUR, Waehrung.USD, Waehrung.GBP, Waehrung.CHF]),\n            `Grad ${i}`,\n            person\n        ));\n    }\n    return vermittler;\n};\n\n// Erstellen der Testdaten\nconst personList = generatePersons(100);\nconst betreuerList = generateBetreuer(100, personList);\nconst einbringerList = generateEinbringer(100, personList);\nconst kaeuferList = generateKaeufer(100, personList);\nconst kuenstlerList = generateKuenstler(100, personList);\nconst vermittlerList = generateVermittler(100, personList);\nconst exponateList = generateExponate(100, kaeuferList, vermittlerList, einbringerList);\n\n// Exportiere Testdaten\nexport {\n    personList,\n    betreuerList,\n    einbringerList,\n    kaeuferList,\n    kuenstlerList,\n    vermittlerList,\n    exponateList\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}