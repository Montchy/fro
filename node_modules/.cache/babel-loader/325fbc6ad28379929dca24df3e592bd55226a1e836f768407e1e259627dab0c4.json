{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Platform, StyleSheet, Pressable, View } from 'react-native';\nimport color from 'color';\nimport { modeTextVariant } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport Text from '../Typography/Text';\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = _ref => {\n  let {\n    color: titleColor,\n    subtitle,\n    subtitleStyle,\n    onPress,\n    disabled,\n    style,\n    titleRef,\n    titleStyle,\n    title,\n    titleMaxFontSizeMultiplier,\n    mode = 'small',\n    theme: themeOverrides,\n    testID = 'appbar-content',\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    isV3,\n    colors\n  } = theme;\n  const titleTextColor = titleColor ? titleColor : isV3 ? colors.onSurface : white;\n  const subtitleColor = color(titleTextColor).alpha(0.7).rgb().string();\n  const modeContainerStyles = {\n    small: styles.v3DefaultContainer,\n    medium: styles.v3MediumContainer,\n    large: styles.v3LargeContainer,\n    'center-aligned': styles.v3DefaultContainer\n  };\n  const variant = modeTextVariant[mode];\n  const contentWrapperProps = {\n    pointerEvents: 'box-none',\n    style: [styles.container, isV3 && modeContainerStyles[mode], style],\n    testID,\n    ...rest\n  };\n  const content = /*#__PURE__*/React.createElement(React.Fragment, null, typeof title === 'string' ? /*#__PURE__*/React.createElement(Text, _extends({}, isV3 && {\n    variant\n  }, {\n    ref: titleRef,\n    style: [{\n      color: titleTextColor,\n      ...(isV3 ? theme.fonts[variant] : Platform.OS === 'ios' ? theme.fonts.regular : theme.fonts.medium)\n    }, !isV3 && styles.title, titleStyle],\n    numberOfLines: 1,\n    accessible: true,\n    accessibilityRole: onPress ? 'none' : Platform.OS === 'web' ? 'heading' : 'header'\n    // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n\n    accessibilityTraits: \"header\",\n    testID: `${testID}-title-text`,\n    maxFontSizeMultiplier: titleMaxFontSizeMultiplier\n  }), title) : title, !isV3 && subtitle ? /*#__PURE__*/React.createElement(Text, {\n    style: [styles.subtitle, {\n      color: subtitleColor\n    }, subtitleStyle],\n    numberOfLines: 1\n  }, subtitle) : null);\n  if (onPress) {\n    return /*#__PURE__*/(\n      // eslint-disable-next-line react-native-a11y/has-accessibility-props\n      React.createElement(Pressable, _extends({\n        accessibilityRole: touchableRole\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        ,\n\n        accessibilityTraits: touchableRole,\n        accessibilityComponentType: \"button\",\n        onPress: onPress,\n        disabled: disabled\n      }, contentWrapperProps), content)\n    );\n  }\n  return /*#__PURE__*/React.createElement(View, contentWrapperProps, content);\n};\nAppbarContent.displayName = 'Appbar.Content';\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12\n  },\n  v3DefaultContainer: {\n    paddingHorizontal: 0\n  },\n  v3MediumContainer: {\n    paddingHorizontal: 0,\n    justifyContent: 'flex-end',\n    paddingBottom: 24\n  },\n  v3LargeContainer: {\n    paddingHorizontal: 0,\n    paddingTop: 36,\n    justifyContent: 'flex-end',\n    paddingBottom: 28\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14\n  }\n});\nconst iosTouchableRole = ['button', 'header'];\nconst touchableRole = Platform.select({\n  ios: iosTouchableRole,\n  default: iosTouchableRole[0]\n});\nexport default AppbarContent;\n\n// @component-docs ignore-next-line\nexport { AppbarContent };","map":{"version":3,"names":["React","Platform","StyleSheet","Pressable","View","color","modeTextVariant","useInternalTheme","white","Text","AppbarContent","_ref","titleColor","subtitle","subtitleStyle","onPress","disabled","style","titleRef","titleStyle","title","titleMaxFontSizeMultiplier","mode","theme","themeOverrides","testID","rest","isV3","colors","titleTextColor","onSurface","subtitleColor","alpha","rgb","string","modeContainerStyles","small","styles","v3DefaultContainer","medium","v3MediumContainer","large","v3LargeContainer","variant","contentWrapperProps","pointerEvents","container","content","createElement","Fragment","_extends","ref","fonts","OS","regular","numberOfLines","accessible","accessibilityRole","accessibilityTraits","maxFontSizeMultiplier","touchableRole","accessibilityComponentType","displayName","create","flex","paddingHorizontal","justifyContent","paddingBottom","paddingTop","fontSize","iosTouchableRole","select","ios","default"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/react-native-paper/src/components/Appbar/AppbarContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityRole,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  Pressable,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { modeTextVariant } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $RemoveChildren, MD3TypescaleKey, ThemeProp } from '../../types';\nimport Text, { TextRef } from '../Typography/Text';\n\ntype TitleString = {\n  title: string;\n  titleStyle?: StyleProp<TextStyle>;\n};\n\ntype TitleElement = { title: React.ReactNode; titleStyle?: never };\n\nexport type Props = $RemoveChildren<typeof View> & {\n  // For `title` and `titleStyle` props their types are duplicated due to the generation of documentation.\n  // Appropriate type for them are either `TitleString` or `TitleElement`, depends on `title` type.\n  /**\n   * Text or component for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title, if `title` is a string.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<TextRef>;\n  /**\n   * @deprecated Deprecated in v5.x\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * @deprecated Deprecated in v5.x\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * If true, disable all interactions for this component.\n   */\n  disabled?: boolean;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Specifies the largest possible scale a title font can reach.\n   */\n  titleMaxFontSizeMultiplier?: number;\n  /**\n   * @internal\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n} & (TitleString | TitleElement);\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  disabled,\n  style,\n  titleRef,\n  titleStyle,\n  title,\n  titleMaxFontSizeMultiplier,\n  mode = 'small',\n  theme: themeOverrides,\n  testID = 'appbar-content',\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3, colors } = theme;\n\n  const titleTextColor = titleColor\n    ? titleColor\n    : isV3\n    ? colors.onSurface\n    : white;\n\n  const subtitleColor = color(titleTextColor).alpha(0.7).rgb().string();\n\n  const modeContainerStyles = {\n    small: styles.v3DefaultContainer,\n    medium: styles.v3MediumContainer,\n    large: styles.v3LargeContainer,\n    'center-aligned': styles.v3DefaultContainer,\n  };\n\n  const variant = modeTextVariant[mode] as MD3TypescaleKey;\n\n  const contentWrapperProps = {\n    pointerEvents: 'box-none' as ViewProps['pointerEvents'],\n    style: [styles.container, isV3 && modeContainerStyles[mode], style],\n    testID,\n    ...rest,\n  };\n\n  const content = (\n    <>\n      {typeof title === 'string' ? (\n        <Text\n          {...(isV3 && { variant })}\n          ref={titleRef}\n          style={[\n            {\n              color: titleTextColor,\n              ...(isV3\n                ? theme.fonts[variant]\n                : Platform.OS === 'ios'\n                ? theme.fonts.regular\n                : theme.fonts.medium),\n            },\n            !isV3 && styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityRole={\n            onPress\n              ? 'none'\n              : Platform.OS === 'web'\n              ? ('heading' as 'header')\n              : 'header'\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"header\"\n          testID={`${testID}-title-text`}\n          maxFontSizeMultiplier={titleMaxFontSizeMultiplier}\n        >\n          {title}\n        </Text>\n      ) : (\n        title\n      )}\n      {!isV3 && subtitle ? (\n        <Text\n          style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n          numberOfLines={1}\n        >\n          {subtitle}\n        </Text>\n      ) : null}\n    </>\n  );\n\n  if (onPress) {\n    return (\n      // eslint-disable-next-line react-native-a11y/has-accessibility-props\n      <Pressable\n        accessibilityRole={touchableRole}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={touchableRole}\n        accessibilityComponentType=\"button\"\n        onPress={onPress}\n        disabled={disabled}\n        {...contentWrapperProps}\n      >\n        {content}\n      </Pressable>\n    );\n  }\n\n  return <View {...contentWrapperProps}>{content}</View>;\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  v3DefaultContainer: {\n    paddingHorizontal: 0,\n  },\n  v3MediumContainer: {\n    paddingHorizontal: 0,\n    justifyContent: 'flex-end',\n    paddingBottom: 24,\n  },\n  v3LargeContainer: {\n    paddingHorizontal: 0,\n    paddingTop: 36,\n    justifyContent: 'flex-end',\n    paddingBottom: 28,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nconst iosTouchableRole: readonly AccessibilityRole[] = ['button', 'header'];\nconst touchableRole: AccessibilityRole = Platform.select({\n  ios: iosTouchableRole as unknown as 'button',\n  default: iosTouchableRole[0],\n});\n\nexport default AppbarContent;\n\n// @component-docs ignore-next-line\nexport { AppbarContent };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}