{"ast":null,"code":"function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction randomElement(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\nconst people = [];\n(function generatePersonData() {\n  const currentYear = new Date().getFullYear();\n  const genders = ['male', 'female'];\n  const professions = ['Engineer', 'Doctor', 'Artist', 'Teacher', 'Nurse', 'Driver', 'Manager', 'Clerk'];\n  const locations = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego'];\n  const educationLevels = ['High School', 'Associate Degree', 'Bachelor\\'s Degree', 'Master\\'s Degree', 'Doctorate'];\n  for (let i = 1; i <= 1000; i++) {\n    const age = randomIntFromInterval(18, 80);\n    const birthYear = currentYear - age;\n    const birthMonth = randomIntFromInterval(1, 12);\n    const birthDay = randomIntFromInterval(1, new Date(birthYear, birthMonth, 0).getDate());\n    const birthDate = new Date(birthYear, birthMonth - 1, birthDay).toISOString().split('T')[0];\n    people.push({\n      id: i,\n      age: age,\n      birthDate: birthDate,\n      gender: randomElement(genders),\n      profession: randomElement(professions),\n      location: randomElement(locations),\n      income: randomIntFromInterval(20000, 100000),\n      // Einkommen zwischen 20.000 und 100.000\n      education: randomElement(educationLevels)\n    });\n  }\n})();\nconsole.log(people);\nexport { people };","map":{"version":3,"names":["randomIntFromInterval","min","max","Math","floor","random","randomElement","arr","length","people","generatePersonData","currentYear","Date","getFullYear","genders","professions","locations","educationLevels","i","age","birthYear","birthMonth","birthDay","getDate","birthDate","toISOString","split","push","id","gender","profession","location","income","education","console","log"],"sources":["/Users/amelieploil/Desktop/Displomtest/Graphs /graphs/src/Graphs/DataList.js"],"sourcesContent":["function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction randomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\nconst people = [];\n\n(function generatePersonData() {\n    const currentYear = new Date().getFullYear();\n    const genders = ['male', 'female'];\n    const professions = ['Engineer', 'Doctor', 'Artist', 'Teacher', 'Nurse', 'Driver', 'Manager', 'Clerk'];\n    const locations = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego'];\n    const educationLevels = ['High School', 'Associate Degree', 'Bachelor\\'s Degree', 'Master\\'s Degree', 'Doctorate'];\n\n    for (let i = 1; i <= 1000; i++) {\n        const age = randomIntFromInterval(18, 80);\n        const birthYear = currentYear - age;\n        const birthMonth = randomIntFromInterval(1, 12);\n        const birthDay = randomIntFromInterval(1, new Date(birthYear, birthMonth, 0).getDate());\n\n        const birthDate = new Date(birthYear, birthMonth - 1, birthDay).toISOString().split('T')[0];\n\n        people.push({\n            id: i,\n            age: age,\n            birthDate: birthDate,\n            gender: randomElement(genders),\n            profession: randomElement(professions),\n            location: randomElement(locations),\n            income: randomIntFromInterval(20000, 100000),  // Einkommen zwischen 20.000 und 100.000\n            education: randomElement(educationLevels)\n        });\n    }\n})();\n\nconsole.log(people);\n\nexport { people };\n"],"mappings":"AAAA,SAASA,qBAAqBA,CAACC,GAAG,EAAEC,GAAG,EAAE;EACrC,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,GAAGA,GAAG,CAAC;AAC5D;AAEA,SAASK,aAAaA,CAACC,GAAG,EAAE;EACxB,OAAOA,GAAG,CAACJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGE,GAAG,CAACC,MAAM,CAAC,CAAC;AACtD;AAEA,MAAMC,MAAM,GAAG,EAAE;AAEjB,CAAC,SAASC,kBAAkBA,CAAA,EAAG;EAC3B,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC5C,MAAMC,OAAO,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;EAClC,MAAMC,WAAW,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;EACtG,MAAMC,SAAS,GAAG,CAAC,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,aAAa,EAAE,WAAW,CAAC;EAC1H,MAAMC,eAAe,GAAG,CAAC,aAAa,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,WAAW,CAAC;EAElH,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,EAAEA,CAAC,EAAE,EAAE;IAC5B,MAAMC,GAAG,GAAGnB,qBAAqB,CAAC,EAAE,EAAE,EAAE,CAAC;IACzC,MAAMoB,SAAS,GAAGT,WAAW,GAAGQ,GAAG;IACnC,MAAME,UAAU,GAAGrB,qBAAqB,CAAC,CAAC,EAAE,EAAE,CAAC;IAC/C,MAAMsB,QAAQ,GAAGtB,qBAAqB,CAAC,CAAC,EAAE,IAAIY,IAAI,CAACQ,SAAS,EAAEC,UAAU,EAAE,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC;IAEvF,MAAMC,SAAS,GAAG,IAAIZ,IAAI,CAACQ,SAAS,EAAEC,UAAU,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAE3FjB,MAAM,CAACkB,IAAI,CAAC;MACRC,EAAE,EAAEV,CAAC;MACLC,GAAG,EAAEA,GAAG;MACRK,SAAS,EAAEA,SAAS;MACpBK,MAAM,EAAEvB,aAAa,CAACQ,OAAO,CAAC;MAC9BgB,UAAU,EAAExB,aAAa,CAACS,WAAW,CAAC;MACtCgB,QAAQ,EAAEzB,aAAa,CAACU,SAAS,CAAC;MAClCgB,MAAM,EAAEhC,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC;MAAG;MAC/CiC,SAAS,EAAE3B,aAAa,CAACW,eAAe;IAC5C,CAAC,CAAC;EACN;AACJ,CAAC,EAAE,CAAC;AAEJiB,OAAO,CAACC,GAAG,CAAC1B,MAAM,CAAC;AAEnB,SAASA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}