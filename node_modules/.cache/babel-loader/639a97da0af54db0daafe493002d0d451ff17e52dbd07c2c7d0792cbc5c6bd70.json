{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { Pressable } from './Pressable';\nimport { getTouchableRippleColors } from './utils';\nimport { SettingsContext } from '../../core/settings';\nimport { useInternalTheme } from '../../core/theming';\nimport { forwardRef } from '../../utils/forwardRef';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Pressable props https://reactnative.dev/docs/Pressable#props\n */\nconst TouchableRipple = (_ref, ref) => {\n  let {\n    style,\n    background: _background,\n    borderless = false,\n    disabled: disabledProp,\n    rippleColor,\n    underlayColor: _underlayColor,\n    children,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    calculatedRippleColor\n  } = getTouchableRippleColors({\n    theme,\n    rippleColor\n  });\n  const hoverColor = color(calculatedRippleColor).fade(0.5).rgb().string();\n  const {\n    rippleEffectEnabled\n  } = React.useContext(SettingsContext);\n  const {\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut\n  } = rest;\n  const handlePressIn = React.useCallback(e => {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    if (rippleEffectEnabled) {\n      const {\n        centered\n      } = rest;\n      const button = e.currentTarget;\n      const style = window.getComputedStyle(button);\n      const dimensions = button.getBoundingClientRect();\n      let touchX;\n      let touchY;\n      const {\n        changedTouches,\n        touches\n      } = e.nativeEvent;\n      const touch = (touches === null || touches === void 0 ? void 0 : touches[0]) ?? (changedTouches === null || changedTouches === void 0 ? void 0 : changedTouches[0]);\n\n      // If centered or it was pressed using keyboard - enter or space\n      if (centered || !touch) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        touchX = touch.locationX ?? e.pageX;\n        touchY = touch.locationY ?? e.pageY;\n      }\n\n      // Get the size of the button to determine how big the ripple should be\n      const size = centered ?\n      // If ripple is always centered, we don't need to make it too big\n      Math.min(dimensions.width, dimensions.height) * 1.25 :\n      // Otherwise make it twice as big so clicking on one end spreads ripple to other\n      Math.max(dimensions.width, dimensions.height) * 2;\n\n      // Create a container for our ripple effect so we don't need to change the parent's style\n      const container = document.createElement('span');\n      container.setAttribute('data-paper-ripple', '');\n      Object.assign(container.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        borderTopLeftRadius: style.borderTopLeftRadius,\n        borderTopRightRadius: style.borderTopRightRadius,\n        borderBottomRightRadius: style.borderBottomRightRadius,\n        borderBottomLeftRadius: style.borderBottomLeftRadius,\n        overflow: centered ? 'visible' : 'hidden'\n      });\n\n      // Create span to show the ripple effect\n      const ripple = document.createElement('span');\n      Object.assign(ripple.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        backgroundColor: calculatedRippleColor,\n        borderRadius: '50%',\n        /* Transition configuration */\n        transitionProperty: 'transform opacity',\n        transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n        transitionTimingFunction: 'linear',\n        transformOrigin: 'center',\n        /* We'll animate these properties */\n        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n        opacity: '0.5',\n        // Position the ripple where cursor was\n        left: `${touchX}px`,\n        top: `${touchY}px`,\n        width: `${size}px`,\n        height: `${size}px`\n      });\n\n      // Finally, append it to DOM\n      container.appendChild(ripple);\n      button.appendChild(container);\n\n      // rAF runs in the same frame as the event handler\n      // Use double rAF to ensure the transition class is added in next frame\n      // This will make sure that the transition animation is triggered\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          Object.assign(ripple.style, {\n            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n            opacity: '1'\n          });\n        });\n      });\n    }\n  }, [onPressIn, rest, rippleEffectEnabled, calculatedRippleColor]);\n  const handlePressOut = React.useCallback(e => {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    if (rippleEffectEnabled) {\n      const containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          containers.forEach(container => {\n            const ripple = container.firstChild;\n            Object.assign(ripple.style, {\n              transitionDuration: '250ms',\n              opacity: 0\n            });\n\n            // Finally remove the span after the transition\n            setTimeout(() => {\n              const {\n                parentNode\n              } = container;\n              if (parentNode) {\n                parentNode.removeChild(container);\n              }\n            }, 500);\n          });\n        });\n      });\n    }\n  }, [onPressOut, rippleEffectEnabled]);\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut\n  });\n  const disabled = disabledProp || !hasPassedTouchHandler;\n  return /*#__PURE__*/React.createElement(Pressable, _extends({}, rest, {\n    ref: ref,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    disabled: disabled,\n    style: state => [styles.touchable, borderless && styles.borderless,\n    // focused state is not ready yet: https://github.com/necolas/react-native-web/issues/1849\n    // state.focused && { backgroundColor: ___ },\n    state.hovered && {\n      backgroundColor: hoverColor\n    }, typeof style === 'function' ? style(state) : style]\n  }), state => React.Children.only(typeof children === 'function' ? children(state) : children));\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n      transition: '150ms background-color'\n    })\n  },\n  borderless: {\n    overflow: 'hidden'\n  }\n});\nconst Component = forwardRef(TouchableRipple);\nexport default Component;","map":{"version":3,"names":["React","Platform","StyleSheet","color","Pressable","getTouchableRippleColors","SettingsContext","useInternalTheme","forwardRef","hasTouchHandler","TouchableRipple","_ref","ref","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","themeOverrides","rest","calculatedRippleColor","hoverColor","fade","rgb","string","rippleEffectEnabled","useContext","onPress","onLongPress","onPressIn","onPressOut","handlePressIn","useCallback","e","centered","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","hasPassedTouchHandler","_extends","state","styles","touchable","hovered","Children","only","supported","create","OS","cursor","transition","Component"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport type { PressableProps, PressableStateCallbackType } from './Pressable';\nimport { Pressable } from './Pressable';\nimport { getTouchableRippleColors } from './utils';\nimport { Settings, SettingsContext } from '../../core/settings';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\n\nexport type Props = PressableProps & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute immediately when a touch is engaged, before `onPressOut` and `onPress`.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute when a touch is released.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children:\n    | ((state: PressableStateCallbackType) => React.ReactNode)\n    | React.ReactNode;\n  style?:\n    | StyleProp<ViewStyle>\n    | ((state: PressableStateCallbackType) => StyleProp<ViewStyle>)\n    | undefined;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Pressable props https://reactnative.dev/docs/Pressable#props\n */\nconst TouchableRipple = (\n  {\n    style,\n    background: _background,\n    borderless = false,\n    disabled: disabledProp,\n    rippleColor,\n    underlayColor: _underlayColor,\n    children,\n    theme: themeOverrides,\n    ...rest\n  }: Props,\n  ref: React.ForwardedRef<View>\n) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { calculatedRippleColor } = getTouchableRippleColors({\n    theme,\n    rippleColor,\n  });\n  const hoverColor = color(calculatedRippleColor).fade(0.5).rgb().string();\n  const { rippleEffectEnabled } = React.useContext<Settings>(SettingsContext);\n\n  const { onPress, onLongPress, onPressIn, onPressOut } = rest;\n\n  const handlePressIn = React.useCallback(\n    (e: any) => {\n      onPressIn?.(e);\n\n      if (rippleEffectEnabled) {\n        const { centered } = rest;\n\n        const button = e.currentTarget;\n        const style = window.getComputedStyle(button);\n        const dimensions = button.getBoundingClientRect();\n\n        let touchX;\n        let touchY;\n\n        const { changedTouches, touches } = e.nativeEvent;\n        const touch = touches?.[0] ?? changedTouches?.[0];\n\n        // If centered or it was pressed using keyboard - enter or space\n        if (centered || !touch) {\n          touchX = dimensions.width / 2;\n          touchY = dimensions.height / 2;\n        } else {\n          touchX = touch.locationX ?? e.pageX;\n          touchY = touch.locationY ?? e.pageY;\n        }\n\n        // Get the size of the button to determine how big the ripple should be\n        const size = centered\n          ? // If ripple is always centered, we don't need to make it too big\n            Math.min(dimensions.width, dimensions.height) * 1.25\n          : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n            Math.max(dimensions.width, dimensions.height) * 2;\n\n        // Create a container for our ripple effect so we don't need to change the parent's style\n        const container = document.createElement('span');\n\n        container.setAttribute('data-paper-ripple', '');\n\n        Object.assign(container.style, {\n          position: 'absolute',\n          pointerEvents: 'none',\n          top: '0',\n          left: '0',\n          right: '0',\n          bottom: '0',\n          borderTopLeftRadius: style.borderTopLeftRadius,\n          borderTopRightRadius: style.borderTopRightRadius,\n          borderBottomRightRadius: style.borderBottomRightRadius,\n          borderBottomLeftRadius: style.borderBottomLeftRadius,\n          overflow: centered ? 'visible' : 'hidden',\n        });\n\n        // Create span to show the ripple effect\n        const ripple = document.createElement('span');\n\n        Object.assign(ripple.style, {\n          position: 'absolute',\n          pointerEvents: 'none',\n          backgroundColor: calculatedRippleColor,\n          borderRadius: '50%',\n\n          /* Transition configuration */\n          transitionProperty: 'transform opacity',\n          transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n          transitionTimingFunction: 'linear',\n          transformOrigin: 'center',\n\n          /* We'll animate these properties */\n          transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n          opacity: '0.5',\n\n          // Position the ripple where cursor was\n          left: `${touchX}px`,\n          top: `${touchY}px`,\n          width: `${size}px`,\n          height: `${size}px`,\n        });\n\n        // Finally, append it to DOM\n        container.appendChild(ripple);\n        button.appendChild(container);\n\n        // rAF runs in the same frame as the event handler\n        // Use double rAF to ensure the transition class is added in next frame\n        // This will make sure that the transition animation is triggered\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            Object.assign(ripple.style, {\n              transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n              opacity: '1',\n            });\n          });\n        });\n      }\n    },\n    [onPressIn, rest, rippleEffectEnabled, calculatedRippleColor]\n  );\n\n  const handlePressOut = React.useCallback(\n    (e: any) => {\n      onPressOut?.(e);\n\n      if (rippleEffectEnabled) {\n        const containers = e.currentTarget.querySelectorAll(\n          '[data-paper-ripple]'\n        ) as HTMLElement[];\n\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            containers.forEach((container) => {\n              const ripple = container.firstChild as HTMLSpanElement;\n\n              Object.assign(ripple.style, {\n                transitionDuration: '250ms',\n                opacity: 0,\n              });\n\n              // Finally remove the span after the transition\n              setTimeout(() => {\n                const { parentNode } = container;\n\n                if (parentNode) {\n                  parentNode.removeChild(container);\n                }\n              }, 500);\n            });\n          });\n        });\n      }\n    },\n    [onPressOut, rippleEffectEnabled]\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  const disabled = disabledProp || !hasPassedTouchHandler;\n\n  return (\n    <Pressable\n      {...rest}\n      ref={ref}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n      style={(state) => [\n        styles.touchable,\n        borderless && styles.borderless,\n        // focused state is not ready yet: https://github.com/necolas/react-native-web/issues/1849\n        // state.focused && { backgroundColor: ___ },\n        state.hovered && { backgroundColor: hoverColor },\n        typeof style === 'function' ? style(state) : style,\n      ]}\n    >\n      {(state) =>\n        React.Children.only(\n          typeof children === 'function' ? children(state) : children\n        )\n      }\n    </Pressable>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n      transition: '150ms background-color',\n    }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nconst Component = forwardRef(TouchableRipple);\n\nexport default Component as typeof Component & { supported: boolean };\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAGEC,QAAQ,EAERC,UAAU,QAGL,cAAc;AAErB,OAAOC,KAAK,MAAM,OAAO;AAGzB,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,wBAAwB,QAAQ,SAAS;AAClD,SAAmBC,eAAe,QAAQ,qBAAqB;AAC/D,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,UAAU,QAAQ,wBAAwB;AACnD,OAAOC,eAAe,MAAM,6BAA6B;AA4DzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAAAC,IAAA,EAYtBC,GAA6B,KAC1B;EAAA,IAZH;IACEC,KAAK;IACLC,UAAU,EAAEC,WAAW;IACvBC,UAAU,GAAG,KAAK;IAClBC,QAAQ,EAAEC,YAAY;IACtBC,WAAW;IACXC,aAAa,EAAEC,cAAc;IAC7BC,QAAQ;IACRC,KAAK,EAAEC,cAAc;IACrB,GAAGC;EACE,CAAC,GAAAd,IAAA;EAGR,MAAMY,KAAK,GAAGhB,gBAAgB,CAACiB,cAAc,CAAC;EAC9C,MAAM;IAAEE;EAAsB,CAAC,GAAGrB,wBAAwB,CAAC;IACzDkB,KAAK;IACLJ;EACF,CAAC,CAAC;EACF,MAAMQ,UAAU,GAAGxB,KAAK,CAACuB,qBAAqB,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EACxE,MAAM;IAAEC;EAAoB,CAAC,GAAG/B,KAAK,CAACgC,UAAU,CAAW1B,eAAe,CAAC;EAE3E,MAAM;IAAE2B,OAAO;IAAEC,WAAW;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGX,IAAI;EAE5D,MAAMY,aAAa,GAAGrC,KAAK,CAACsC,WAAW,CACpCC,CAAM,IAAK;IACVJ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAGI,CAAC,CAAC;IAEd,IAAIR,mBAAmB,EAAE;MACvB,MAAM;QAAES;MAAS,CAAC,GAAGf,IAAI;MAEzB,MAAMgB,MAAM,GAAGF,CAAC,CAACG,aAAa;MAC9B,MAAM7B,KAAK,GAAG8B,MAAM,CAACC,gBAAgB,CAACH,MAAM,CAAC;MAC7C,MAAMI,UAAU,GAAGJ,MAAM,CAACK,qBAAqB,CAAC,CAAC;MAEjD,IAAIC,MAAM;MACV,IAAIC,MAAM;MAEV,MAAM;QAAEC,cAAc;QAAEC;MAAQ,CAAC,GAAGX,CAAC,CAACY,WAAW;MACjD,MAAMC,KAAK,GAAG,CAAAF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAG,CAAC,CAAC,MAAID,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAG,CAAC,CAAC;;MAEjD;MACA,IAAIT,QAAQ,IAAI,CAACY,KAAK,EAAE;QACtBL,MAAM,GAAGF,UAAU,CAACQ,KAAK,GAAG,CAAC;QAC7BL,MAAM,GAAGH,UAAU,CAACS,MAAM,GAAG,CAAC;MAChC,CAAC,MAAM;QACLP,MAAM,GAAGK,KAAK,CAACG,SAAS,IAAIhB,CAAC,CAACiB,KAAK;QACnCR,MAAM,GAAGI,KAAK,CAACK,SAAS,IAAIlB,CAAC,CAACmB,KAAK;MACrC;;MAEA;MACA,MAAMC,IAAI,GAAGnB,QAAQ;MACjB;MACAoB,IAAI,CAACC,GAAG,CAAChB,UAAU,CAACQ,KAAK,EAAER,UAAU,CAACS,MAAM,CAAC,GAAG,IAAI;MACpD;MACAM,IAAI,CAACE,GAAG,CAACjB,UAAU,CAACQ,KAAK,EAAER,UAAU,CAACS,MAAM,CAAC,GAAG,CAAC;;MAErD;MACA,MAAMS,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAEhDF,SAAS,CAACG,YAAY,CAAC,mBAAmB,EAAE,EAAE,CAAC;MAE/CC,MAAM,CAACC,MAAM,CAACL,SAAS,CAAClD,KAAK,EAAE;QAC7BwD,QAAQ,EAAE,UAAU;QACpBC,aAAa,EAAE,MAAM;QACrBC,GAAG,EAAE,GAAG;QACRC,IAAI,EAAE,GAAG;QACTC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,GAAG;QACXC,mBAAmB,EAAE9D,KAAK,CAAC8D,mBAAmB;QAC9CC,oBAAoB,EAAE/D,KAAK,CAAC+D,oBAAoB;QAChDC,uBAAuB,EAAEhE,KAAK,CAACgE,uBAAuB;QACtDC,sBAAsB,EAAEjE,KAAK,CAACiE,sBAAsB;QACpDC,QAAQ,EAAEvC,QAAQ,GAAG,SAAS,GAAG;MACnC,CAAC,CAAC;;MAEF;MACA,MAAMwC,MAAM,GAAGhB,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAE7CE,MAAM,CAACC,MAAM,CAACY,MAAM,CAACnE,KAAK,EAAE;QAC1BwD,QAAQ,EAAE,UAAU;QACpBC,aAAa,EAAE,MAAM;QACrBW,eAAe,EAAEvD,qBAAqB;QACtCwD,YAAY,EAAE,KAAK;QAEnB;QACAC,kBAAkB,EAAE,mBAAmB;QACvCC,kBAAkB,EAAG,GAAExB,IAAI,CAACC,GAAG,CAACF,IAAI,GAAG,GAAG,EAAE,GAAG,CAAE,IAAG;QACpD0B,wBAAwB,EAAE,QAAQ;QAClCC,eAAe,EAAE,QAAQ;QAEzB;QACAC,SAAS,EAAE,mDAAmD;QAC9DC,OAAO,EAAE,KAAK;QAEd;QACAhB,IAAI,EAAG,GAAEzB,MAAO,IAAG;QACnBwB,GAAG,EAAG,GAAEvB,MAAO,IAAG;QAClBK,KAAK,EAAG,GAAEM,IAAK,IAAG;QAClBL,MAAM,EAAG,GAAEK,IAAK;MAClB,CAAC,CAAC;;MAEF;MACAI,SAAS,CAAC0B,WAAW,CAACT,MAAM,CAAC;MAC7BvC,MAAM,CAACgD,WAAW,CAAC1B,SAAS,CAAC;;MAE7B;MACA;MACA;MACA2B,qBAAqB,CAAC,MAAM;QAC1BA,qBAAqB,CAAC,MAAM;UAC1BvB,MAAM,CAACC,MAAM,CAACY,MAAM,CAACnE,KAAK,EAAE;YAC1B0E,SAAS,EAAE,6CAA6C;YACxDC,OAAO,EAAE;UACX,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,EACD,CAACrD,SAAS,EAAEV,IAAI,EAAEM,mBAAmB,EAAEL,qBAAqB,CAC9D,CAAC;EAED,MAAMiE,cAAc,GAAG3F,KAAK,CAACsC,WAAW,CACrCC,CAAM,IAAK;IACVH,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAGG,CAAC,CAAC;IAEf,IAAIR,mBAAmB,EAAE;MACvB,MAAM6D,UAAU,GAAGrD,CAAC,CAACG,aAAa,CAACmD,gBAAgB,CACjD,qBACF,CAAkB;MAElBH,qBAAqB,CAAC,MAAM;QAC1BA,qBAAqB,CAAC,MAAM;UAC1BE,UAAU,CAACE,OAAO,CAAE/B,SAAS,IAAK;YAChC,MAAMiB,MAAM,GAAGjB,SAAS,CAACgC,UAA6B;YAEtD5B,MAAM,CAACC,MAAM,CAACY,MAAM,CAACnE,KAAK,EAAE;cAC1BuE,kBAAkB,EAAE,OAAO;cAC3BI,OAAO,EAAE;YACX,CAAC,CAAC;;YAEF;YACAQ,UAAU,CAAC,MAAM;cACf,MAAM;gBAAEC;cAAW,CAAC,GAAGlC,SAAS;cAEhC,IAAIkC,UAAU,EAAE;gBACdA,UAAU,CAACC,WAAW,CAACnC,SAAS,CAAC;cACnC;YACF,CAAC,EAAE,GAAG,CAAC;UACT,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,EACD,CAAC3B,UAAU,EAAEL,mBAAmB,CAClC,CAAC;EAED,MAAMoE,qBAAqB,GAAG1F,eAAe,CAAC;IAC5CwB,OAAO;IACPC,WAAW;IACXC,SAAS;IACTC;EACF,CAAC,CAAC;EAEF,MAAMnB,QAAQ,GAAGC,YAAY,IAAI,CAACiF,qBAAqB;EAEvD,oBACEnG,KAAA,CAAAiE,aAAA,CAAC7D,SAAS,EAAAgG,QAAA,KACJ3E,IAAI;IACRb,GAAG,EAAEA,GAAI;IACTuB,SAAS,EAAEE,aAAc;IACzBD,UAAU,EAAEuD,cAAe;IAC3B1E,QAAQ,EAAEA,QAAS;IACnBJ,KAAK,EAAGwF,KAAK,IAAK,CAChBC,MAAM,CAACC,SAAS,EAChBvF,UAAU,IAAIsF,MAAM,CAACtF,UAAU;IAC/B;IACA;IACAqF,KAAK,CAACG,OAAO,IAAI;MAAEvB,eAAe,EAAEtD;IAAW,CAAC,EAChD,OAAOd,KAAK,KAAK,UAAU,GAAGA,KAAK,CAACwF,KAAK,CAAC,GAAGxF,KAAK;EAClD,IAEAwF,KAAK,IACLrG,KAAK,CAACyG,QAAQ,CAACC,IAAI,CACjB,OAAOpF,QAAQ,KAAK,UAAU,GAAGA,QAAQ,CAAC+E,KAAK,CAAC,GAAG/E,QACrD,CAEO,CAAC;AAEhB,CAAC;;AAED;AACA;AACA;AACAZ,eAAe,CAACiG,SAAS,GAAG,IAAI;AAEhC,MAAML,MAAM,GAAGpG,UAAU,CAAC0G,MAAM,CAAC;EAC/BL,SAAS,EAAE;IACTlC,QAAQ,EAAE,UAAU;IACpB,IAAIpE,QAAQ,CAAC4G,EAAE,KAAK,KAAK,IAAI;MAC3BC,MAAM,EAAE,SAAS;MACjBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACD/F,UAAU,EAAE;IACV+D,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,MAAMiC,SAAS,GAAGxG,UAAU,CAACE,eAAe,CAAC;AAE7C,eAAesG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}