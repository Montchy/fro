{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TStyles = void 0;\nvar _cssProcessor = require(\"@native-html/css-processor\");\nvar _isNil = _interopRequireDefault(require(\"ramda/src/isNil\"));\nvar _not = _interopRequireDefault(require(\"ramda/src/not\"));\nvar _compose = _interopRequireDefault(require(\"ramda/src/compose\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nconst notNil = (0, _compose.default)(_not.default, _isNil.default);\n/**\n * A merge properties from left to right.\n *\n * @param child\n * @param parent\n */\n\nfunction inheritProperties() {\n  for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {\n    properties[_key] = arguments[_key];\n  }\n  const realProperties = properties.filter(notNil);\n  if (realProperties.length === 1) {\n    return realProperties[0];\n  }\n  if (Object.keys(realProperties[0]).length === 0) {\n    return realProperties[1];\n  }\n  return realProperties.reduce((prev, curr) => _objectSpread(_objectSpread({}, prev), curr), Object.prototype);\n}\n/**\n * A record of styles organized in logical chunks:\n *\n * - wether they are supported in React Native (native) and others (web).\n * - wether they target native Views (block) or Text (text).\n * - wether they are inherited by this node's children (flow) or not (retain).\n *\n * @public\n */\n\nclass TStyles {\n  constructor(ownProcessedProps, parentStyles) {\n    _defineProperty(this, \"nativeTextFlow\", void 0);\n    _defineProperty(this, \"nativeBlockFlow\", void 0);\n    _defineProperty(this, \"nativeTextRet\", void 0);\n    _defineProperty(this, \"nativeBlockRet\", void 0);\n    _defineProperty(this, \"webTextFlow\", void 0);\n    _defineProperty(this, \"webBlockRet\", void 0);\n    this.nativeTextFlow = inheritProperties(parentStyles === null || parentStyles === void 0 ? void 0 : parentStyles.nativeTextFlow, ownProcessedProps.native.text.flow);\n    this.nativeBlockFlow = inheritProperties(parentStyles === null || parentStyles === void 0 ? void 0 : parentStyles.nativeBlockFlow, ownProcessedProps.native.block.flow);\n    this.webTextFlow = inheritProperties(parentStyles === null || parentStyles === void 0 ? void 0 : parentStyles.webTextFlow, ownProcessedProps.web.text.flow); // In theory, we shouldn't merge those properties. However, these\n    // properties being textDecoration*, we actually want children nodes to\n    // inherit from them. A cleaner solution would be to to let each TNode\n    // handle its merging logic, because only TPhrasing and TText nodes would\n    // need to merge these.\n\n    this.nativeTextRet = inheritProperties(parentStyles === null || parentStyles === void 0 ? void 0 : parentStyles.nativeTextRet, ownProcessedProps.native.text.retain);\n    this.nativeBlockRet = ownProcessedProps.native.block.retain;\n    this.webBlockRet = ownProcessedProps.web.block.retain;\n  }\n  static empty() {\n    return new TStyles(new _cssProcessor.CSSProcessedProps());\n  }\n}\nexports.TStyles = TStyles;","map":{"version":3,"names":["_cssProcessor","require","_isNil","_interopRequireDefault","_not","_compose","notNil","default","inheritProperties","_len","arguments","length","properties","Array","_key","realProperties","filter","Object","keys","reduce","prev","curr","_objectSpread","prototype","TStyles","constructor","ownProcessedProps","parentStyles","_defineProperty","nativeTextFlow","native","text","flow","nativeBlockFlow","block","webTextFlow","web","nativeTextRet","retain","nativeBlockRet","webBlockRet","empty","CSSProcessedProps"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/@native-html/transient-render-engine/lib/commonjs/styles/TStyles.ts"],"sourcesContent":["import { CSSProperties, CSSProcessedProps } from '@native-html/css-processor';\nimport nil from 'ramda/src/isNil';\nimport not from 'ramda/src/not';\nimport compose from 'ramda/src/compose';\n\nconst notNil = compose(not, nil);\n/**\n * A merge properties from left to right.\n *\n * @param child\n * @param parent\n */\nfunction inheritProperties(\n  ...properties: Array<CSSProperties | null | undefined>\n): CSSProperties {\n  const realProperties = properties.filter(notNil) as CSSProperties[];\n  if (realProperties.length === 1) {\n    return realProperties[0];\n  }\n  if (Object.keys(realProperties[0]).length === 0) {\n    return realProperties[1];\n  }\n  return realProperties.reduce(\n    (prev, curr) => ({ ...prev, ...curr }),\n    Object.prototype as CSSProperties\n  ) as CSSProperties;\n}\n\n/**\n * A record of styles organized in logical chunks:\n *\n * - wether they are supported in React Native (native) and others (web).\n * - wether they target native Views (block) or Text (text).\n * - wether they are inherited by this node's children (flow) or not (retain).\n *\n * @public\n */\nexport interface TStylesShape {\n  readonly nativeTextFlow: CSSProcessedProps['native']['text']['flow'];\n  readonly nativeBlockFlow: CSSProcessedProps['native']['block']['flow'];\n  readonly nativeTextRet: CSSProcessedProps['native']['text']['retain'];\n  readonly nativeBlockRet: CSSProcessedProps['native']['block']['retain'];\n  readonly webTextFlow: CSSProcessedProps['web']['text']['flow'];\n  readonly webBlockRet: CSSProcessedProps['web']['block']['retain'];\n}\n\nexport class TStyles implements TStylesShape {\n  public readonly nativeTextFlow: CSSProcessedProps['native']['text']['flow'];\n  public readonly nativeBlockFlow: CSSProcessedProps['native']['block']['flow'];\n  public readonly nativeTextRet: CSSProcessedProps['native']['text']['retain'];\n  public readonly nativeBlockRet: CSSProcessedProps['native']['block']['retain'];\n  public readonly webTextFlow: CSSProcessedProps['web']['text']['flow'];\n  public readonly webBlockRet: CSSProcessedProps['web']['block']['retain'];\n\n  constructor(\n    ownProcessedProps: CSSProcessedProps,\n    parentStyles?: TStyles | null\n  ) {\n    this.nativeTextFlow = inheritProperties(\n      parentStyles?.nativeTextFlow,\n      ownProcessedProps.native.text.flow\n    );\n    this.nativeBlockFlow = inheritProperties(\n      parentStyles?.nativeBlockFlow,\n      ownProcessedProps.native.block.flow\n    );\n    this.webTextFlow = inheritProperties(\n      parentStyles?.webTextFlow,\n      ownProcessedProps.web.text.flow\n    );\n    // In theory, we shouldn't merge those properties. However, these\n    // properties being textDecoration*, we actually want children nodes to\n    // inherit from them. A cleaner solution would be to to let each TNode\n    // handle its merging logic, because only TPhrasing and TText nodes would\n    // need to merge these.\n    this.nativeTextRet = inheritProperties(\n      parentStyles?.nativeTextRet,\n      ownProcessedProps.native.text.retain\n    );\n    this.nativeBlockRet = ownProcessedProps.native.block.retain;\n    this.webBlockRet = ownProcessedProps.web.block.retain;\n  }\n\n  static empty(): TStyles {\n    return new TStyles(new CSSProcessedProps());\n  }\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,aAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,IAAA,GAAAD,sBAAA,CAAAF,OAAA;AACA,IAAAI,QAAA,GAAAF,sBAAA,CAAAF,OAAA;;;;;;;;;;;;;;;;;;;AAEA,MAAMK,MAAM,GAAG,IAAAD,QAAA,CAAAE,OAAA,EAAQH,IAAA,CAAAG,OAAR,EAAaL,MAAA,CAAAK,OAAb,CAAf;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAATA,CAAA,EAEiB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADZC,UADL,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IACKF,UADL,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAGE,MAAMC,cAAc,GAAGH,UAAU,CAACI,MAAX,CAAkBV,MAAlB,CAAvB;EACA,IAAIS,cAAc,CAACJ,MAAf,KAA0B,CAA9B,EAAiC;IAC/B,OAAOI,cAAc,CAAC,CAAD,CAArB;EACD;EACD,IAAIE,MAAM,CAACC,IAAP,CAAYH,cAAc,CAAC,CAAD,CAA1B,EAA+BJ,MAA/B,KAA0C,CAA9C,EAAiD;IAC/C,OAAOI,cAAc,CAAC,CAAD,CAArB;EACD;EACD,OAAOA,cAAc,CAACI,MAAf,CACL,CAACC,IAAD,EAAOC,IAAP,KAAAC,aAAA,CAAAA,aAAA,KAAsBF,IAAL,GAAcC,IAAA,CAD1B,EAELJ,MAAM,CAACM,SAFF,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUO,MAAMC,OAAN,CAAsC;EAQ3CC,WAAWA,CACTC,iBADS,EAETC,YAFS,EAGT;IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACA,KAAKC,cAAL,GAAsBrB,iBAAiB,CACrCmB,YADqC,aACrCA,YADqC,uBACrCA,YAAY,CAAEE,cADuB,EAErCH,iBAAiB,CAACI,MAAlB,CAAyBC,IAAzB,CAA8BC,IAFO,CAAvC;IAIA,KAAKC,eAAL,GAAuBzB,iBAAiB,CACtCmB,YADsC,aACtCA,YADsC,uBACtCA,YAAY,CAAEM,eADwB,EAEtCP,iBAAiB,CAACI,MAAlB,CAAyBI,KAAzB,CAA+BF,IAFO,CAAxC;IAIA,KAAKG,WAAL,GAAmB3B,iBAAiB,CAClCmB,YADkC,aAClCA,YADkC,uBAClCA,YAAY,CAAEQ,WADoB,EAElCT,iBAAiB,CAACU,GAAlB,CAAsBL,IAAtB,CAA2BC,IAFO,CAApC,CATA,CAaA;IACA;IACA;IACA;IACA;;IACA,KAAKK,aAAL,GAAqB7B,iBAAiB,CACpCmB,YADoC,aACpCA,YADoC,uBACpCA,YAAY,CAAEU,aADsB,EAEpCX,iBAAiB,CAACI,MAAlB,CAAyBC,IAAzB,CAA8BO,MAFM,CAAtC;IAIA,KAAKC,cAAL,GAAsBb,iBAAiB,CAACI,MAAlB,CAAyBI,KAAzB,CAA+BI,MAArD;IACA,KAAKE,WAAL,GAAmBd,iBAAiB,CAACU,GAAlB,CAAsBF,KAAtB,CAA4BI,MAA/C;EACD;EAEW,OAALG,KAAKA,CAAA,EAAY;IACtB,OAAO,IAAIjB,OAAJ,CAAY,IAAIxB,aAAA,CAAA0C,iBAAJ,EAAZ,CAAP;EACD;AAvC0C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}