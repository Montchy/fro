{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSInlineParseRun = void 0;\nvar _cssToReactNative = require(\"css-to-react-native\");\nvar _CSSParseRun = require(\"./CSSParseRun\");\nvar _ShortMergeRequest = require(\"./ShortMergeRequest\");\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nclass CSSInlineParseRun extends _CSSParseRun.CSSParseRun {\n  constructor(inlineCSS, registry) {\n    super(registry);\n    _defineProperty(this, \"rules\", void 0);\n    this.rules = this.parseInlineCSS(inlineCSS);\n    this.normalizeProp = this.normalizeProp.bind(this);\n    this.reduceProps = this.reduceProps.bind(this);\n  }\n  parseInlineCSS(inlineCSS) {\n    return inlineCSS.split(';').map(prop => prop.split(':')).reduce((acc, prop) => {\n      if (prop.length === 2) {\n        return [...acc, [prop[0].trim(), prop[1].trim()]];\n      }\n      return acc;\n    }, []);\n  }\n  normalizeProp(rule) {\n    let strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const rawName = rule[0];\n    const rawValue = rule[1];\n    const camelCaseName = (0, _cssToReactNative.getPropertyName)(rawName);\n    if (!this.validationMap.shouldRegisterInlineProperty(camelCaseName)) {\n      return null;\n    }\n    const validator = this.validationMap.getValidatorForProperty(camelCaseName);\n    const normalizedValue = validator.normalizeInlineCSSValue(rawValue);\n    if (normalizedValue === null) {\n      if (strict) {\n        throw new TypeError();\n      }\n      return null;\n    }\n    return [camelCaseName, normalizedValue];\n  }\n  reduceProps(reg, rule) {\n    if (!rule) {\n      return reg;\n    }\n    const [camelCaseName, normalizedValue] = rule;\n    if (normalizedValue instanceof _ShortMergeRequest.ShortMergeRequest) {\n      try {\n        return normalizedValue.map(r => this.normalizeProp(r, true)).reduce(this.reduceProps, reg);\n      } catch (e) {\n        return reg;\n      }\n    }\n    return _objectSpread(_objectSpread({}, reg), {}, {\n      [camelCaseName]: normalizedValue\n    });\n  }\n  fillProcessedProps() {\n    const rawTransformed = this.rules.map(r => this.normalizeProp(r)).reduce(this.reduceProps, {});\n    Object.keys(rawTransformed).forEach(camelCaseName => {\n      const value = rawTransformed[camelCaseName];\n      const validator = this.validationMap.getValidatorForProperty(camelCaseName);\n      const normalizedValue = validator.normalizeInlineCSSValue(value);\n      this.processedProps.withProperty(camelCaseName, normalizedValue, validator);\n    });\n  }\n}\nexports.CSSInlineParseRun = CSSInlineParseRun;","map":{"version":3,"names":["_cssToReactNative","require","_CSSParseRun","_ShortMergeRequest","CSSInlineParseRun","CSSParseRun","constructor","inlineCSS","registry","_defineProperty","rules","parseInlineCSS","normalizeProp","bind","reduceProps","split","map","prop","reduce","acc","length","trim","rule","strict","arguments","undefined","rawName","rawValue","camelCaseName","getPropertyName","validationMap","shouldRegisterInlineProperty","validator","getValidatorForProperty","normalizedValue","normalizeInlineCSSValue","TypeError","reg","ShortMergeRequest","r","e","_objectSpread","fillProcessedProps","rawTransformed","Object","keys","forEach","value","processedProps","withProperty"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/@native-html/css-processor/lib/commonjs/CSSInlineParseRun.ts"],"sourcesContent":["import { getPropertyName } from 'css-to-react-native';\nimport { CSSParseRun } from './CSSParseRun';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { ValidatorsType } from './makepropertiesValidators';\nimport { CSSProperties } from './processor-types';\nimport { ShortMergeRequest } from './ShortMergeRequest';\nimport { LongCSSPropertyValidator } from './validators/LongCSSPropertyValidator';\n\ntype CSSRawPropertiesList = [string, any][];\n\nexport class CSSInlineParseRun extends CSSParseRun {\n  private rules: CSSRawPropertiesList;\n\n  constructor(inlineCSS: string, registry: CSSPropertiesValidationRegistry) {\n    super(registry);\n    this.rules = this.parseInlineCSS(inlineCSS);\n    this.normalizeProp = this.normalizeProp.bind(this);\n    this.reduceProps = this.reduceProps.bind(this);\n  }\n\n  private parseInlineCSS(inlineCSS: string): CSSRawPropertiesList {\n    return inlineCSS\n      .split(';')\n      .map((prop) => prop.split(':'))\n      .reduce<CSSRawPropertiesList>((acc, prop) => {\n        if (prop.length === 2) {\n          return [...acc, [prop[0].trim(), prop[1].trim()]];\n        }\n        return acc;\n      }, []);\n  }\n\n  normalizeProp(\n    rule: CSSRawPropertiesList[number],\n    strict = false\n  ): null | [keyof ValidatorsType, any] {\n    const rawName = rule[0];\n    const rawValue = rule[1];\n    const camelCaseName = getPropertyName(rawName);\n    if (!this.validationMap.shouldRegisterInlineProperty(camelCaseName)) {\n      return null;\n    }\n    const validator = this.validationMap.getValidatorForProperty(camelCaseName);\n    const normalizedValue = validator.normalizeInlineCSSValue(rawValue);\n    if (normalizedValue === null) {\n      if (strict) {\n        throw new TypeError();\n      }\n      return null;\n    }\n    return [camelCaseName, normalizedValue];\n  }\n\n  reduceProps(\n    reg: CSSProperties,\n    rule: null | [keyof ValidatorsType, Exclude<any, null>]\n  ): CSSProperties {\n    if (!rule) {\n      return reg;\n    }\n    const [camelCaseName, normalizedValue] = rule;\n    if (normalizedValue instanceof ShortMergeRequest) {\n      try {\n        return normalizedValue\n          .map((r) => this.normalizeProp(r, true))\n          .reduce(this.reduceProps, reg);\n      } catch (e) {\n        return reg;\n      }\n    }\n    return {\n      ...reg,\n      [camelCaseName]: normalizedValue\n    };\n  }\n\n  fillProcessedProps() {\n    const rawTransformed = this.rules\n      .map((r) => this.normalizeProp(r))\n      .reduce(this.reduceProps, {});\n    (Object.keys(rawTransformed) as Array<keyof ValidatorsType>).forEach(\n      (camelCaseName) => {\n        const value = rawTransformed[camelCaseName];\n        const validator = this.validationMap.getValidatorForProperty(\n          camelCaseName\n        ) as LongCSSPropertyValidator;\n        const normalizedValue = validator.normalizeInlineCSSValue(value);\n        this.processedProps.withProperty(\n          camelCaseName as keyof MixedStyleDeclaration,\n          normalizedValue,\n          validator\n        );\n      }\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}