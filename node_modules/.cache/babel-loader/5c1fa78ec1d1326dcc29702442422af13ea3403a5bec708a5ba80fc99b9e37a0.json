{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = domNodeToHTMLString;\nvar _stringifyEntities = _interopRequireDefault(require(\"stringify-entities\"));\nvar _transientRenderEngine = require(\"@native-html/transient-render-engine\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction renderOpeningTag(tag, attributes) {\n  const strAttributes = [];\n  Object.keys(attributes).forEach(key => {\n    strAttributes.push(`${key}=\"${(0, _stringifyEntities.default)(`${attributes[key]}`)}\"`);\n  });\n  return `<${tag}${strAttributes.length ? ' ' : ''}${strAttributes.join(' ')}>`;\n}\n/**\n * Convert a DOM node to its HTML representation.\n *\n * @param root - The root to stringify.\n * @param reporter - An optional function which will receive every\n * parsed node as 1st argument, the depth as 2d argument and the converted html\n * as 3d argument.\n */\n\nfunction domNodeToHTMLString(root, reporter, depth = 0) {\n  let html = '';\n  if ((0, _transientRenderEngine.isDomElement)(root)) {\n    const strChildren = root.children.reduce((prev, curr) => {\n      const convertedNode = domNodeToHTMLString(curr, reporter, depth + 1);\n      return `${prev}${convertedNode}`;\n    }, '');\n    html = `${renderOpeningTag(root.tagName, root.attribs)}${strChildren}</${root.tagName}>`;\n  } else if ((0, _transientRenderEngine.isDomText)(root)) {\n    const text = (0, _stringifyEntities.default)(root.data);\n    html = text;\n  }\n  typeof reporter === 'function' && reporter(root, depth, html);\n  return html;\n}\n/**\n * @public\n */","map":{"version":3,"names":["_stringifyEntities","_interopRequireDefault","require","_transientRenderEngine","renderOpeningTag","tag","attributes","strAttributes","Object","keys","forEach","key","push","default","length","join","domNodeToHTMLString","root","reporter","depth","html","isDomElement","strChildren","children","reduce","prev","curr","convertedNode","tagName","attribs","isDomText","text","data"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/react-native-render-html/lib/commonjs/helpers/domNodeToHTMLString.ts"],"sourcesContent":["import strigifyEntities from 'stringify-entities';\nimport {\n  Node,\n  isDomText,\n  isDomElement\n} from '@native-html/transient-render-engine';\n\nfunction renderOpeningTag(tag: string, attributes: Record<string, string>) {\n  const strAttributes: string[] = [];\n  Object.keys(attributes).forEach((key) => {\n    strAttributes.push(`${key}=\"${strigifyEntities(`${attributes[key]}`)}\"`);\n  });\n  return `<${tag}${strAttributes.length ? ' ' : ''}${strAttributes.join(' ')}>`;\n}\n\n/**\n * Convert a DOM node to its HTML representation.\n *\n * @param root - The root to stringify.\n * @param reporter - An optional function which will receive every\n * parsed node as 1st argument, the depth as 2d argument and the converted html\n * as 3d argument.\n */\nexport default function domNodeToHTMLString(\n  root: Node | null,\n  reporter?: DomNodeToHtmlReporter,\n  depth = 0\n) {\n  let html = '';\n  if (isDomElement(root)) {\n    const strChildren = root.children.reduce((prev, curr) => {\n      const convertedNode = domNodeToHTMLString(curr, reporter, depth + 1);\n      return `${prev}${convertedNode}`;\n    }, '');\n    html = `${renderOpeningTag(root.tagName, root.attribs)}${strChildren}</${\n      root.tagName\n    }>`;\n  } else if (isDomText(root)) {\n    const text = strigifyEntities(root.data);\n    html = text;\n  }\n  typeof reporter === 'function' && reporter(root, depth, html);\n  return html;\n}\n\n/**\n * @public\n */\nexport interface DomNodeToHtmlReporter {\n  /**\n   * @param node - The node being parsed.\n   * @param depth - How many parents this node have.\n   * @param html - The HTML representation of this node and its children.\n   */\n  (node: Node | null, depth: number, html: string): void;\n}\n"],"mappings":";;;;;;AAAA,IAAAA,kBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,sBAAA,GAAAD,OAAA;;;;;;AAMA,SAASE,gBAATA,CAA0BC,GAA1B,EAAuCC,UAAvC,EAA2E;EACzE,MAAMC,aAAuB,GAAG,EAAhC;EACAC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBI,OAAxB,CAAiCC,GAAD,IAAS;IACvCJ,aAAa,CAACK,IAAd,CAAoB,GAAED,GAAI,KAAI,IAAAX,kBAAA,CAAAa,OAAA,EAAkB,GAAEP,UAAU,CAACK,GAAD,CAAM,EAApC,CAAuC,GAArE;EACD,CAFD;EAGA,OAAQ,IAAGN,GAAI,GAAEE,aAAa,CAACO,MAAd,GAAuB,GAAvB,GAA6B,EAAG,GAAEP,aAAa,CAACQ,IAAd,CAAmB,GAAnB,CAAwB,GAA3E;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,SAASC,mBAATA,CACbC,IADa,EAEbC,QAFa,EAGbC,KAAK,GAAG,CAHK,EAIb;EACA,IAAIC,IAAI,GAAG,EAAX;EACA,IAAI,IAAAjB,sBAAA,CAAAkB,YAAA,EAAaJ,IAAb,CAAJ,EAAwB;IACtB,MAAMK,WAAW,GAAGL,IAAI,CAACM,QAAL,CAAcC,MAAd,CAAqB,CAACC,IAAD,EAAOC,IAAP,KAAgB;MACvD,MAAMC,aAAa,GAAGX,mBAAmB,CAACU,IAAD,EAAOR,QAAP,EAAiBC,KAAK,GAAG,CAAzB,CAAzC;MACA,OAAQ,GAAEM,IAAK,GAAEE,aAAc,EAA/B;IACD,CAHmB,EAGjB,EAHiB,CAApB;IAIAP,IAAI,GAAI,GAAEhB,gBAAgB,CAACa,IAAI,CAACW,OAAN,EAAeX,IAAI,CAACY,OAApB,CAA6B,GAAEP,WAAY,KACnEL,IAAI,CAACW,OACN,GAFD;EAGD,CARD,MAQO,IAAI,IAAAzB,sBAAA,CAAA2B,SAAA,EAAUb,IAAV,CAAJ,EAAqB;IAC1B,MAAMc,IAAI,GAAG,IAAA/B,kBAAA,CAAAa,OAAA,EAAiBI,IAAI,CAACe,IAAtB,CAAb;IACAZ,IAAI,GAAGW,IAAP;EACD;EACD,OAAOb,QAAP,KAAoB,UAApB,IAAkCA,QAAQ,CAACD,IAAD,EAAOE,KAAP,EAAcC,IAAd,CAA1C;EACA,OAAOA,IAAP;AACD;AAED;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}