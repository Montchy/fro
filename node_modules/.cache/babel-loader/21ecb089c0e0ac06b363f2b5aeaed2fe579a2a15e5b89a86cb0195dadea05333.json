{"ast":null,"code":"import _objectSpread from\"/Users/amelieploil/Desktop/Diploma/kinskyfe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const API_BASE_URL='http://localhost:8080/api';// Base URL of your backend\n/**\n * Retrieves a token using basic authentication.\n * @returns {Promise<string>} - The retrieved token.\n */const getToken=async()=>{try{const credentials=btoa(\"MAR200575:geheim1\");// Encode credentials\nconst response=await fetch(\"http://localhost:8080/token\",{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Basic \".concat(credentials)}});if(!response.ok){throw new Error(\"Failed to fetch token: \".concat(response.statusText));}const token=await response.text();// Assuming the token is a plain string\nif(!token){throw new Error('Token is empty or invalid');}//onsole.log(\"Token fetched successfully:\", token);\nreturn token;}catch(error){//console.error('Error fetching token:', error);\nthrow error;}};/**\n * Fetches data from an API endpoint using a Bearer token.\n * @param {string} endpoint - The endpoint to fetch data from.\n * @param {string} token - The Bearer token.\n * @returns {Promise<any>} - The response data.\n */const fetchDataWithToken=async(endpoint,token)=>{try{const response=await fetch(\"\".concat(API_BASE_URL).concat(endpoint),{method:'GET',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)// Use Bearer token\n}});if(!response.ok){throw new Error(\"Error fetching data: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();//console.log(`Parsed data from ${endpoint}:`, data);\nreturn data;}catch(error){//console.error(`API Error (${endpoint}):`, error);\nthrow error;}};/**\n * Performs a GET request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */export const fetchData=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const token=await getToken();const data=await fetchDataWithToken(endpoint,token);if(!data){throw new Error(\"No data returned from \".concat(endpoint));}return data;}catch(error){console.error('API Error:',error);throw error;}};/**\n * Performs a POST request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @param {Object} body - The payload (JSON object) for the POST request.\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */export const postData=async function(endpoint,body){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{const response=await fetch(\"\".concat(API_BASE_URL).concat(endpoint),_objectSpread({method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)},options));if(!response.ok){throw new Error(\"Error sending data: \".concat(response.statusText));}const data=await response.json();//(`Data posted to ${endpoint}:`, data);\nreturn data;}catch(error){//onsole.error('API Error:', error);\nthrow error;}};/**\n * Performs a PUT request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons/{id}\".\n * @param {Object} body - The payload (JSON object) for the PUT request.\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */export const updateData=async function(endpoint,body){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{const response=await fetch(\"\".concat(API_BASE_URL).concat(endpoint),_objectSpread({method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)},options));if(!response.ok){throw new Error(\"Error updating data: \".concat(response.statusText));}const data=await response.json();//console.log(`Data updated at ${endpoint}:`, data);\nreturn data;}catch(error){//console.error('API Error:', error);\nthrow error;}};/**\n * Performs a DELETE request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons/{id}\".\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<void>} - Success message if deleted.\n * @throws {Error} - If the request fails or the response is not ok.\n */export const deleteData=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await fetch(\"\".concat(API_BASE_URL).concat(endpoint),_objectSpread({method:'DELETE',headers:{'Content-Type':'application/json'}},options));if(!response.ok){throw new Error(\"Error deleting data: \".concat(response.statusText));}//console.log(`Data deleted from ${endpoint}`);\nreturn'Data successfully deleted.';}catch(error){//console.error('API Error:', error);\nthrow error;}};","map":{"version":3,"names":["API_BASE_URL","getToken","credentials","btoa","response","fetch","method","headers","concat","ok","Error","statusText","token","text","error","fetchDataWithToken","endpoint","status","data","json","fetchData","options","arguments","length","undefined","console","postData","body","_objectSpread","JSON","stringify","updateData","deleteData"],"sources":["/Users/amelieploil/Desktop/Diploma/kinskyfe/src/Application/fetchAndRead.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api'; // Base URL of your backend\n\n/**\n * Retrieves a token using basic authentication.\n * @returns {Promise<string>} - The retrieved token.\n */\nconst getToken = async () => {\n    try {\n        const credentials = btoa(\"MAR200575:geheim1\"); // Encode credentials\n        const response = await fetch(\"http://localhost:8080/token\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Basic ${credentials}`,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch token: ${response.statusText}`);\n        }\n\n        const token = await response.text(); // Assuming the token is a plain string\n        if (!token) {\n            throw new Error('Token is empty or invalid');\n        }\n\n        //onsole.log(\"Token fetched successfully:\", token);\n        return token;\n    } catch (error) {\n        //console.error('Error fetching token:', error);\n        throw error;\n    }\n};\n\n/**\n * Fetches data from an API endpoint using a Bearer token.\n * @param {string} endpoint - The endpoint to fetch data from.\n * @param {string} token - The Bearer token.\n * @returns {Promise<any>} - The response data.\n */\nconst fetchDataWithToken = async (endpoint, token) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`, // Use Bearer token\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error fetching data: ${response.status} ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        //console.log(`Parsed data from ${endpoint}:`, data);\n\n        return data;\n    } catch (error) {\n        //console.error(`API Error (${endpoint}):`, error);\n        throw error;\n    }\n};\n\n/**\n * Performs a GET request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const fetchData = async (endpoint, options = {}) => {\n    try {\n        const token = await getToken();\n        const data = await fetchDataWithToken(endpoint, token);\n\n        if (!data) {\n            throw new Error(`No data returned from ${endpoint}`);\n        }\n\n        return data;\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n    }\n};\n\n/**\n * Performs a POST request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons\".\n * @param {Object} body - The payload (JSON object) for the POST request.\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const postData = async (endpoint, body, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error sending data: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        //(`Data posted to ${endpoint}:`, data);\n        return data;\n    } catch (error) {\n        //onsole.error('API Error:', error);\n        throw error;\n    }\n};\n\n/**\n * Performs a PUT request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons/{id}\".\n * @param {Object} body - The payload (JSON object) for the PUT request.\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<Object>} - The response data in JSON format.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const updateData = async (endpoint, body, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error updating data: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        //console.log(`Data updated at ${endpoint}:`, data);\n        return data;\n    } catch (error) {\n        //console.error('API Error:', error);\n        throw error;\n    }\n};\n\n/**\n * Performs a DELETE request to a given API URL.\n * @param {string} endpoint - The endpoint, e.g., \"/persons/{id}\".\n * @param {Object} [options={}] - Additional options for the fetch request.\n * @returns {Promise<void>} - Success message if deleted.\n * @throws {Error} - If the request fails or the response is not ok.\n */\nexport const deleteData = async (endpoint, options = {}) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            ...options,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error deleting data: ${response.statusText}`);\n        }\n\n        //console.log(`Data deleted from ${endpoint}`);\n        return 'Data successfully deleted.';\n    } catch (error) {\n        //console.error('API Error:', error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}